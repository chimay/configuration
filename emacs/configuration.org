
#+STARTUP: showall


* Documentation


** Aide en ligne

C-h i   : lecteur info (très pratique)
C-h r   : manuel emacs en mode info
C-h C-h : aide sur l’aide en ligne
C-h f   : aide de la fonction donnée
C-h k   : aide de la séquence de touches donnée
C-h v   : aide de la variable donnée
C-h m   : aide sur le mode majeur & les modes mineurs courant

Début de séquence de touches puis « C-h » :
liste de toutes les séquences de touches
commençant par celle donnée

C-h a : commandes dont les noms correspondent à un motif donné
C-h b : tous les keybindings
C-h c : commande lancée par la séquence de touche donnée
C-h C : système de coding
C-h d : fonctions, variables, etc, dont les noms correspondent à un motif donné
C-h e : messages (echo area)
C-h F : aide de la commande donnée
C-h K : aide de la commande liée à la séquence de touches donnée
C-h n : changements récents dans emacs
C-h p : paquet correspondant à un mot clé
C-h P : décrit le paquet donné
C-h s : table de syntaxe courante
C-h S : section info du symbole courant
C-h t : tutoriel
C-h w : quelle séquence de touche lance la commande donnée ?
C-h . : aide correspondant au point courant dans l’echo area
C-h C-a : information à propos d’emacs
C-h C-f : emacs FAQ
C-h C-p : known problems


** Modificateurs disponibles

M = Méta
C = Control
S = Shift
s = Super
H = Hyper

** Chargement

(add-to-list 'load-path "...")

(load "...")

(require 'librairie)
(require 'librairie "fichier")

(autoload 'symbole "chemin" "description" t)


** Keybindings

[[https://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs/683575#683575]]


** Mots-clé

defun
defalias
defadvice

add-hook


** Booléens

use “t” for true, “nil” for false


** Historique

Minibuffer :

  - M-p, up (previous-history-element) : retrieve the input before the one currently in the minibuffer

  - M-n, down (next-history-element) : retrieve the input after the one currently in the minibuffer

  - M-r (previous-matching-history-element) : Move to an earlier item in the minibuffer history that matches a regexp you enter.

  - M-s (next-matching-history-element) : Move to a later item in the minibuffer history that matches a regexp you enter.


* Chemins d’accès

#+begin_src emacs-lisp

(add-to-list 'load-path "~/racine/dotdir/emacs.d")

(add-to-list 'custom-theme-load-path "~/racine/config/edit/emacs/color")

#+end_src


* Démarrage

#+begin_src emacs-lisp

(setq inhibit-startup-message t)
(setq inhibit-splash-screen t)
(setq inhibit-startup-screen t)

(setq initial-buffer-choice t)

;(setq initial-scratch-message "")

(setq initial-buffer-choice (lambda ()
    (org-agenda-list 30)
    (get-buffer "*Org Agenda*")))

#+end_src


* Configuration automatique

Fichier utilisé par customize

#+begin_src emacs-lisp

(setq custom-file "~/racine/config/edit/emacs/enligne.el")
(load custom-file)

#+end_src


* Messages

#+begin_src emacs-lisp

(setq message-log-max 3000)

(setq debug-on-error t)

#+end_src


* Info

#+begin_src emacs-lisp

(setq Info-use-header-line t)
(setq Info-hide-note-references t)

(setq Info-scroll-prefer-subnodes nil)

(setq Info-isearch-search t)

(setq Info-enable-active-nodes nil)

#+end_src


* Optimisation

#+begin_src emacs-lisp

(setq gc-cons-threshold 20000000)

#+end_src


* Serveur

#+begin_src emacs-lisp

(require 'server)

(unless (server-running-p) (server-start))

#+end_src


* Compilation

#+begin_src emacs-lisp

(setq compilation-window-height 12)

(setq
 ;; use gdb-many-windows by default
 gdb-many-windows t

 ;; Non-nil means display source file containing the main routine at startup
 gdb-show-main t
 )

#+end_src


* Édition


** Commandes

#+begin_src emacs-lisp

(setq disabled-command-function nil)

#+end_src


** Lignes visuelles

#+begin_src emacs-lisp

; Coupures entre les mots

(global-visual-line-mode -1)

; La flèche vers le bas bouge par lignes visuelles

(setq line-move-visual nil)

#+end_src


** Indentation

#+begin_src emacs-lisp

(setq indent-tabs-mode t)

(setq standard-indent 4)
(setq tab-width 4)

(setq c-basic-offset 4)

#+end_src


** Format

#+begin_src emacs-lisp

(add-hook 'before-save-hook 'delete-trailing-whitespace)

; Mode texte en auto-fill par défaut (créé une nouvelle ligne  entre deux mots à
; chaque fois que la ligne courant devient trop longue)

(add-hook 'text-mode-hook 'turn-on-auto-fill)

; en Americain, les phrases (sentences) se terminent par deux espaces
; ce comportement n'est pas souhaitable en francais

(setq sentence-end-double-space nil)

; Eviter que la cesure de fin de ligne, operée par exemple par le
; mode autofill ou par un M-q, coupe au niveau d'un caractere parenthèse ouvrante ou :

(add-hook 'fill-no-break-predicate 'fill-french-nobreak-p)

#+end_src


** Sélection

#+begin_src emacs-lisp

(delete-selection-mode 1)
;(pending-delete-mode t)

#+end_src


** Correspondances (), [], ...

#+begin_src emacs-lisp

;; Voir aussi smartparens

(show-paren-mode 1)

(setq show-paren-delay 0)

(electric-pair-mode t)

#+end_src


** Recherche & Remplacement

#+begin_src emacs-lisp

; Wrap search

(setq isearch-wrap-function nil)

(setq search-default-mode #'char-fold-to-regexp)

(setq replace-char-fold t)

#+end_src


** Annulation

#+begin_src emacs-lisp

(setq undo-limit 80000)

#+end_src


** Copier & Coller

#+begin_src emacs-lisp

(setq kill-ring-max 712)

(setq save-interprogram-paste-before-kill t)

#+end_src


** Confirmation

#+begin_src emacs-lisp

; y / n au lieu de yes / no

(defalias 'yes-or-no-p 'y-or-n-p)

#+end_src


** Sélection en rectangle


*** En partant d’une sélection ordinaire

Activé par C-x <SPC>.


*** CUA Mode

Activé par [[*Bindings][un binding]].

Ensuite :

  - RET change le curseur de coin

  - Le texte inséré se place à gauche ou à droite du rectangle,
    suivant la position du curseur

  - C-2 M-w copie le texte dans le registre 2

  - C-S-<SPC> place une marque globale où tous les textes copiés
    seront ajoutés


** Chiffrement

#+begin_src emacs-lisp

; Fait automatiquement

;;(require 'epa-file)
;;(epa-file-enable)

#+end_src


* Fichiers


** Backup

#+begin_src emacs-lisp

(setq version-control t)
(setq delete-old-versions t)
(setq backup-by-copying t)

(setq kept-new-versions 7)
(setq kept-old-versions 5)

(setq backup-directory-alist '((".*" . "~/racine/varia/backup/")))

#+end_src


** Autosave

#+begin_src emacs-lisp

(setq auto-save-default t)

(setq auto-save-interval 300)
(setq auto-save-timeout 30)

(defconst biblio/autosave-dir
 (concat (getenv "HOME") "/racine/varia/autosave/"))

(setq auto-save-list-file-prefix biblio/autosave-dir)

(setq auto-save-file-name-transforms `((".*" ,biblio/autosave-dir t)))

#+end_src


** Autoread

#+begin_src emacs-lisp

;; (global-auto-revert-mode 1)
;; (setq global-auto-revert-non-file-buffers t)
;; (setq auto-revert-verbose nil)

#+end_src


** Encodage

#+begin_src emacs-lisp

(set-default-coding-systems 'utf-8)
(set-language-environment 'utf-8)
(setq locale-coding-system 'utf-8)

(prefer-coding-system 'utf-8)

(setq default-file-name-coding-system 'utf-8)

(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(set-clipboard-coding-system 'utf-8)

(setq utf-translate-cjk-mode nil)

(setq-default buffer-file-coding-system 'utf-8-unix)

(add-to-list 'file-coding-system-alist '("\\.tex" . utf-8-unix))

;; Treat clipboard input as UTF-8 string first; compound text next, etc.

(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))


#+end_src


** Accents

Ils sont normalement supportés par votre distribution mais on ne sait jamais

#+begin_src emacs-lisp

(setq selection-coding-system 'compound-text-with-extensions)

#+end_src


** Compression

#+begin_src emacs-lisp

(auto-compression-mode t)

#+end_src


** Accès à distance

#+begin_src emacs-lisp

(require 'tramp)

#+end_src

* Répertoires

#+begin_src emacs-lisp

(require 'dired-x)

(require 'dired-aux)

(require 'wdired)

(setq wdired-allow-to-change-permissions t)

(setq default-directory "~/racine/plain/")

(setq delete-by-moving-to-trash t)

(setq trash-directory "~/racine/trash/Emacs")

(setq dired-listing-switches "--time-style=iso -lhDF")

(setq ls-lisp-dirs-first t)

(setq dired-ls-F-marks-symlinks t)

(setq dired-recursive-copies 'always)
(setq dired-recursive-deletes 'always)

(add-hook 'dired-mode-hook 'auto-revert-mode)

(setq dired-listing-switches "-lha")

(setq-default dired-omit-files-p t) ; this is buffer-local variable

;; (setq dired-omit-files
;;     (concat dired-omit-files "^\\..*\\.un~"))

(setq dired-omit-files "^\\..*\\.un~")

(setq
 wdired-allow-to-change-permissions t
 wdired-allow-to-redirect-links t
 )

#+end_src


* Tampons (buffers)


** Tampon contenant la liste des tampons

#+begin_src emacs-lisp

(autoload 'ibuffer "ibuffer" "List buffers." t)

#+end_src


** Tampon précédent & suivant

#+begin_src emacs-lisp

(defadvice next-buffer (after avoid-messages-buffer-in-next-buffer)
  (when (string= "*scratch*" (buffer-name)) (next-buffer))
  (when (string= "*Messages*" (buffer-name)) (next-buffer))
  (when (string= "*Completions*" (buffer-name)) (next-buffer))
  (when (string= "*compilation*" (buffer-name)) (next-buffer))
  (when (string= "*Help*" (buffer-name)) (next-buffer))
  (when (string= "*Ibuffer*" (buffer-name)) (next-buffer))
  (when (string-match "TAGS.*" (buffer-name)) (next-buffer))
  (when (string-match "\*helm.*\*" (buffer-name)) (next-buffer)))

(ad-activate 'next-buffer)

(defadvice previous-buffer (after avoid-messages-buffer-in-previous-buffer)
  (when (string= "*scratch*" (buffer-name)) (previous-buffer))
  (when (string= "*Messages*" (buffer-name)) (previous-buffer))
  (when (string= "*Completions*" (buffer-name)) (previous-buffer))
  (when (string= "*compilation*" (buffer-name)) (previous-buffer))
  (when (string= "*Help*" (buffer-name)) (previous-buffer))
  (when (string= "*Ibuffer*" (buffer-name)) (previous-buffer))
  (when (string-match "TAGS.*" (buffer-name)) (previous-buffer))
  (when (string-match "\*helm.*\*" (buffer-name)) (previous-buffer)))

(ad-activate 'previous-buffer)

#+end_src


** Tampons inactifs

#+begin_src emacs-lisp
(setq clean-buffer-list-delay-general 1) ; nombre de jours
(setq clean-buffer-list-delay-special (* 12 3600)) ; nombre de secondes
#+end_src


** Mini-tampon

#+begin_src emacs-lisp

(setq enable-recursive-minibuffers t)

(setq minibuffer-auto-raise t)

(add-hook 'minibuffer-setup-hook '(lambda () (enlarge-window 12)))

#+end_src


* Historique


** Sauvegarde

#+begin_src emacs-lisp

(setq savehist-file
 (concat (getenv "HOME") "/racine/dotdir/emacs.d/hist/savehist"))

(setq savehist-autosave-interval 300)

(setq save-place-file
 (concat (getenv "HOME") "/racine/dotdir/emacs.d/hist/saveplace"))

(setq-default save-place t)

; Important de placer le require après la définition des variables

(require 'saveplace)

(savehist-mode 1)

#+end_src


** Fichiers récents

Penser à exécuter recentf-cleanup de temps en temps

#+begin_src emacs-lisp

(setq recentf-max-saved-items 1234)
(setq recentf-max-menu-items 1234)

(setq recentf-save-file
 (concat (getenv "HOME") "/racine/dotdir/emacs.d/hist/recentf"))

(setq recentf-auto-cleanup 'never) ;; disable before we start recentf!

; Important de placer le require après la définition des variables

(require 'recentf)

(recentf-mode 1)

#+end_src


* Contrôle de version

#+begin_src emacs-lisp

(require 'vc)

#+end_src


* Terminal & Shell


** ANSI

#+begin_src emacs-lisp

(autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

#+end_src


** Shell bash, zsh, etc

#+begin_src emacs-lisp

(setq explicit-shell-file-name "/bin/bash")
(setq shell-file-name "bash")

(defun comint-delchar-or-eof-or-kill-buffer (arg)
  (interactive "p")
  (if (null (get-buffer-process (current-buffer)))
      (kill-buffer)
    (comint-delchar-or-maybe-eof arg)))

(add-hook 'shell-mode-hook
          (lambda ()
            (define-key shell-mode-map
              (kbd "C-d") 'comint-delchar-or-eof-or-kill-buffer)))

#+end_src


** Eshell


*** Visual commands

(require 'eshell)
(require 'em-smart)

(setq eshell-where-to-jump 'begin)
(setq eshell-review-quick-commands nil)
(setq eshell-smart-space-goes-to-end t)


* Courriel


** Données

#+begin_src emacs-lisp

;; (setq user-mail-address "your@mail")
;; (setq user-full-name "Tic Tac")

#+end_src


** Receive

If getmail or fetchmail or ... is not installed

#+begin_src emacs-lisp

;(setq mail-sources '((pop :server "pop.provider.org" :user "you" :password "secret")))

#+end_src


** Send

#+begin_src emacs-lisp

;;(setq smtpmail-default-smtp-server "smtp.server.org")
;;(setq smtpmail-smtp-server "smtp.server.org")

;;(setq smtpmail-local-domain "server.org")

;(setq smtpmail-auth-credentials '(("hostname" "port" "username" "password")))
;(setq smtpmail-starttls-credentials '(("hostname" "port" nil nil)))

;;(load-library "smtpmail")

;;(setq send-mail-function 'smtpmail-send-it)

;;(setq message-send-mail-function 'smtpmail-send-it)

#+end_src


** Read

Pour lire ses mails dans emacs : M-x rmail

#+begin_src emacs-lisp

;;(setq rmail-preserve-inbox t)

;;(setq rmail-primary-inbox-list
;;      '("/var/spool/mail/user"
;;	"~/racine/mail/Systeme/mbox"
;;       ))

;;(setq rmail-ignored-headers
;;      (concat rmail-ignored-headers
;;	      "\\|^x-.*:\\|^IronPort-PHdr.*:\\|^Received.*:\\|^DKIM.*:"))

#+end_src


* Usenet


** Gnus


*** Sources

#+begin_src emacs-lisp

;; (setq gnus-select-method '(nntp "news.gmane.org"))
;;
;; (setq gnus-secondary-select-methods '((nntp "news.gnus.org")))
;; (add-to-list 'gnus-secondary-select-methods '(nnml ""))

#+end_src


*** Newsgroup

#+begin_src emacs-lisp

;; (setq gnus-startup-file (expand-file-name  "~/racine/config/news/gnus-newsrc"))
;; (setq gnus-dribble-directory "~/racine/config/news")
;;
;; (setq gnus-check-new-newsgroups 'ask-server)
;;
;; (setq gnus-read-newsrc-file nil)
;; (setq gnus-save-newsrc-file nil)
;;
;; (setq gnus-save-killed-list nil)
;;
;; (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
;;
;; (setq gnus-subscribe-hierarchical-interactive t)

#+end_src


* Périphériques


** Impression

#+begin_src emacs-lisp

;; Options génériques

(setq lpr-switches '("-o number-up=2" "-o Duplex=DuplexTumble"))

;; Avec lpr

;; (setq lpr-command "lpr")
;; (setq printer-name "Officejet_5740")

;; Avec lp

(setq lpr-command "lp")

(setq printer-name nil)

(setq lpr-add-switches nil)

#+end_src


** Souris

#+begin_src emacs-lisp

;; Move the mouse to the screen corner on any keypress.

; (when (and (display-mouse-p) (require 'avoid nil t))
;
; 	;; Move the mouse to the lower-right corner instead of default upper-right
;
; 	(defun mouse-avoidance-banish-destination ()
; 		(cons (+ 3 (frame-width)) (frame-height))
; 	)
;
; 	(mouse-avoidance-mode 'banish)
; )

#+end_src


* Modes


** Python

#+begin_src emacs-lisp

(setq-default major-mode 'text-mode)

(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))

(add-to-list 'interpreter-mode-alist '("python" . python-mode))

(setq python-shell-interpreter "python")

(setq python-shell-completion-native nil)

#+end_src


* Orthographe

#+begin_src emacs-lisp

;(ispell-change-dictionary "francais" t)
;(setq ispell-dictionary "francais")

#+end_src


* Développement


** CEDET

Conflit avec org-mode/timestamp

#+begin_src emacs-lisp

;; (global-ede-mode)

#+end_src


* Présentation


** Police

#+begin_src emacs-lisp

(set-frame-font "Monospace-11")

(add-to-list 'default-frame-alist '(font . "Monospace-11" ))

#+end_src


** Symboles

#+begin_src emacs-lisp

(global-prettify-symbols-mode 1)

#+end_src

** Curseur

#+begin_src emacs-lisp

(setq blink-cursor-mode nil)

(global-hl-line-mode 1)

#+end_src


** Menus

#+begin_src emacs-lisp

(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

#+end_src


** Lignes et colonnes

#+begin_src emacs-lisp

(require 'linum)
(global-linum-mode 1)

(setq line-number-display-limit nil)
(line-number-mode t)

(column-number-mode t)

(global-hl-line-mode 1) ; turn on highlighting current line

#+end_src


** Barres de défilement

#+begin_src emacs-lisp

(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'horizontal-scroll-bar-mode) (horizontal-scroll-bar-mode -1))

(setq	scroll-step 1
	scroll-margin 7
	scroll-conservatively 100000
	scroll-up-agressively 0.01
	scroll-down-agressively 0.01
	scroll-preserve-screen-position 1
	auto-window-vscroll nil
)

(setq-default
	scroll-up-agressively 0.01
	scroll-down-agressively 0.01
)

(setq mouse-wheel-scroll-amount '(5 ((shift) . 10))) ; one line at a time
(setq mouse-wheel-progressive-speed nil)            ; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't)                  ; scroll window under mouse
(setq scroll-step 1)                                ; keyboard scroll one line at a time

#+end_src


** Coloration syntaxique

#+begin_src emacs-lisp

; Activer la coloration syntaxique
(global-font-lock-mode t)

;;(setq font-lock-maximum-decoration '((c-mode . 1) (t . 2)))

(setq font-lock-maximum-decoration t)

#+end_src


** Barre d'outil

#+begin_src emacs-lisp

(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))

#+end_src


** Minibuffer

#+begin_src emacs-lisp

(setq resize-mini-windows t)

(setq max-mini-window-height 3)

#+end_src


** Beep

#+begin_src emacs-lisp

(setq visible-bell 1)
(setq visible-bell 'top-bottom)

#+end_src


** Thème

#+begin_src emacs-lisp

(when (equal window-system 'x) (load-theme 'ornuit-gui t))
(when (equal window-system nil) (load-theme 'ornuit-term t))

(if (daemonp)
  (add-hook 'after-make-frame-functions
    '(lambda (frame)
     (with-selected-frame frame
       (when (equal window-system 'x) (load-theme 'ornuit-gui t))
       )))
  (when (equal window-system 'x) (load-theme 'ornuit-gui t))
)

#+end_src


* Fonctions


** Fichier de configuration


*** Éditer ce fichier

#+begin_src emacs-lisp

(defun biblio/edite-configuration-org ()
  (interactive)
  (find-file "~/racine/config/edit/emacs/configuration.org")
  (cd "~/racine/config/edit/emacs"))

#+end_src


*** Recharger ce fichier

#+begin_src emacs-lisp

(defun biblio/recharge-configuration-org ()
  "Reloads configuration.org at runtime"
  (interactive)
  (org-babel-load-file "~/racine/config/edit/emacs/configuration.org"))

#+end_src


** Efface mot

#+begin_src emacs-lisp

(defun biblio/efface-mot ()
  "Efface le mot sous le curseur"
  (interactive)
  (forward-char 1)
  (backward-word)
  (kill-word 1)
)

#+end_src

** Copie une ligne

#+begin_src emacs-lisp

(defun biblio/copie-ligne ()
  "Copies a line without regard for cursor position."
  (interactive)
  (save-excursion
    (kill-new
     (buffer-substring
      (point-at-bol)
      (point-at-eol)))))

;; (defun biblio/copie-ligne ()
;;  "Copie une ligne"
;;  (interactive)
;;  (kill-whole-line)
;;  (undo-boundary)
;;  (undo)
;;  )

#+end_src


** Copie jusqu’à la fin de la ligne

#+begin_src emacs-lisp

(defun biblio/copie-jusque-fin-ligne ()
 "Copie jusqu’à la fin de la ligne"
 (interactive)
 (kill-line)
 (undo-boundary)
 (undo)
 )

#+end_src


** Efface contenu ligne

#+begin_src emacs-lisp

(defun biblio/efface-contenu-ligne ()
 "Efface le contenu de la ligne"
 (interactive)
 (kill-line 0)
 (kill-line)
 )

#+end_src


** Efface jusque début ligne

#+begin_src emacs-lisp

(defun biblio/efface-jusque-debut-ligne ()
"kill from point to start of line"
(interactive)
(kill-line 0)
)

#+end_src


** Affiche nom fichier

#+begin_src emacs-lisp

(defun biblio/affiche-copie-nom-fichier ()
  "Show the full path file name in the minibuffer."
  (interactive)
  (message (buffer-file-name))
  (kill-new (file-truename buffer-file-name))
  )

#+end_src


** Tampons (buffers)


*** Tampon précédent

#+begin_src emacs-lisp

(defun biblio/tampon-precedent ()
 "Va au tampon précédent"
 (interactive)
 (switch-to-buffer nil)
 )

#+end_src


*** Fermer le tampon courant

#+begin_src emacs-lisp

(defun biblio/ferme-tampon-courant ()
  "Supprime le tampon courant."
  (interactive)
  (kill-buffer (current-buffer)))

#+end_src


*** Fermer tous les tampons

#+begin_src emacs-lisp

(defun biblio/ferme-tous-les-tampons ()
  "Ferme tous les tampons."
  (interactive)
  (mapc 'kill-buffer (buffer-list)))

#+end_src


*** Revert all buffers

#+begin_src emacs-lisp

  (defun biblio/revert-all-buffers ()
      "Refreshes all open buffers from their respective files."
      (interactive)
      (dolist (buf (buffer-list))
	(with-current-buffer buf
	  (when (and (buffer-file-name) (file-exists-p (buffer-file-name)) (not (buffer-modified-p)))
	    (revert-buffer t t t) )))
      (message "Refreshed open files.") )

#+end_src


** Fenêtres

#+begin_src emacs-lisp

(defun biblio/scinde-et-suit-horizontalement ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))

(defun biblio/scinde-et-suit-verticalement ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))

#+end_src

** Insertion date

#+begin_src emacs-lisp

(defun biblio/insertion-date () (interactive)
  (insert (shell-command-to-string "echo -n $(date +'%d %b %Y')")))

#+end_src


** Insertion date jour

#+begin_src emacs-lisp

(defun biblio/insertion-date-jour () (interactive)
  (insert (shell-command-to-string "echo -n $(date +'%a %d %b %Y')")))

#+end_src


** Insertion date jour heure

#+begin_src emacs-lisp

(defun biblio/insertion-date-jour-heure () (interactive)
  (insert (shell-command-to-string "echo -n $(date +'%H : %M %a %d %b %Y')")))

#+end_src


** Lignes vides simples

#+begin_src emacs-lisp

(defun biblio/lignes-vides-simples ()

  (interactive)

  (goto-char (point-min))

  (while (re-search-forward "\\(^\\s-*$\\)\n" nil t)
    (replace-match "\n")
    (forward-char 1))

  (goto-char (point-min))
)

#+end_src


** Lignes doubles avant titres

#+begin_src emacs-lisp

(defun biblio/lignes-doubles-avant-titres ()

  (interactive)

  (goto-char (point-min))

  (while (re-search-forward "\\(^\\*+ \\)" nil t) ;
    (replace-match (concat "\n" (match-string 1)) t nil))

  (goto-char (point-min))
)

#+end_src


** Autres

#+begin_src emacs-lisp

(require 'personnel-fonction "fonction")

#+end_src


* Bindings


** Modificateurs

X-Y, où X est un des éléments de la liste ci-dessous :

S = Shift
C = Control
M = Meta
A = Alt
s = Super
H = Hyper


** Fichier de configuration


*** Éditer ce fichier

#+begin_src emacs-lisp

(global-set-key (kbd "<f5> e") 'biblio/edite-configuration-org)

#+end_src


*** Recharger ce fichier

#+begin_src emacs-lisp

(global-set-key (kbd "<f5> r") 'biblio/recharge-configuration-org)

#+end_src


*** Recharger un fichier lisp

#+begin_src emacs-lisp

(global-set-key (kbd "<f5> b") 'eval-buffer)

(global-set-key (kbd "s-l") 'eval-buffer)

#+end_src


*** Thème courant

#+begin_src emacs-lisp

(global-set-key (kbd "<f5> c") 'list-faces-display)

#+end_src

** Exécution de fonction intéractive

#+begin_src emacs-lisp

;;(global-set-key (kbd "M-:") 'execute-extended-command)
;;(global-set-key (kbd "M-;") 'keyboard-quit)
;;(define-key minibuffer-local-map (kbd "M-;") 'minibuffer-keyboard-quit)

#+end_src


** Historique

#+begin_src emacs-lisp

;;(global-set-key (kbd "s-R" ) 'recentf-open-files)

(define-key minibuffer-local-map (kbd "M-p") 'previous-history-element)
(define-key minibuffer-local-map (kbd "M-n") 'next-history-element)

(define-key minibuffer-local-map (kbd "<C-M-p>") 'previous-complete-history-element)
(define-key minibuffer-local-map (kbd "<C-M-n>") 'next-complete-history-element)

#+end_src


** Quitter

Client et server

#+begin_src emacs-lisp

(global-set-key (kbd "s-a s-z") 'save-buffers-kill-emacs)

#+end_src


** Exploration

#+begin_src emacs-lisp

;;(global-set-key (kbd "s-*") 'find-name-dired)

#+end_src


*** Navigation

#+begin_src emacs-lisp

(global-set-key [kp-prior] 'scroll-down-command)
(global-set-key [prior]    'scroll-down-command)

(global-set-key [kp-next]  'scroll-up-command)
(global-set-key [next]     'scroll-up-command)

(global-set-key [S-home]      'beginning-of-buffer)
(global-set-key [S-end]      'end-of-buffer)

#+end_src


*** Signets

#+begin_src emacs-lisp

;; (global-set-key (kbd "<f1> a")   'bookmark-set)
;; (global-set-key (kbd "<f1> b")   'bookmark-bmenu-list)

#+end_src


*** Labels (etags, emacs tags)

Voir Helm dans la configuration des paquets

#+begin_src emacs-lisp

;;(global-set-key (kbd "M-*") 'find-tag)

;;(global-set-key (kbd "M-,") 'pop-tag-mark)
;;(global-set-key (kbd "M-.") 'tags-loop-continue)

#+end_src


** Insertion

#+begin_src emacs-lisp

(global-set-key [insert]    'overwrite-mode)
(global-set-key [kp-insert] 'overwrite-mode)

#+end_src


** Annulation

#+begin_src emacs-lisp

(global-unset-key (kbd "C-z"))

(global-set-key (kbd "C-z" ) 'undo)

#+end_src


** Effacer

#+begin_src emacs-lisp

(global-set-key (kbd "<C-backspace>") 'backward-kill-word)

(global-set-key (kbd "<M-backspace>") 'biblio/efface-mot)

(global-set-key (kbd "M-/") 'just-one-space)

#+end_src


** Copier & Coller

#+begin_src emacs-lisp

(global-set-key (kbd "<C-insert>")   'biblio/copie-ligne)

(global-set-key (kbd "<M-insert>")   'biblio/copie-jusque-fin-ligne)

(global-set-key (kbd "<C-delete>")   'biblio/efface-contenu-ligne)

(global-set-key (kbd "<M-delete>")   'biblio/efface-jusque-debut-ligne)

(global-set-key (kbd "<s-backspace>")   'kill-whole-line)

#+end_src


** Rectangle

#+begin_src emacs-lisp

(global-set-key (kbd "s-v") 'cua-rectangle-mark-mode)

#+end_src

CUA mode est mieux

#+begin_src emacs-lisp

;;(global-set-key (kbd "C-x s-r") 'string-insert-rectangle)
;;(global-set-key (kbd "C-x s-r") 'string-rectangle)

#+end_src


** Répétition

#+begin_src emacs-lisp

(global-set-key (kbd "s-7") 'repeat)

#+end_src


** Recherche & Remplacement

#+begin_src emacs-lisp

;;(define-key isearch-mode-map (kbd "M-p") 'isearch-ring-retreat)
;;(define-key isearch-mode-map (kbd "M-n") 'isearch-ring-advance)

(global-set-key (kbd "s-r") 'rgrep)

#+end_src


** Complétion

#+begin_src emacs-lisp

(setq hippie-expand-try-functions-list
	'(
		try-expand-dabbrev
		try-expand-dabbrev-all-buffers
		try-expand-dabbrev-from-kill
		try-expand-all-abbrevs
		try-expand-list
		try-expand-line
		try-complete-file-name-partially
		try-complete-file-name
		try-complete-lisp-symbol-partially
		try-complete-lisp-symbol
	)
)

(global-set-key (kbd "M-SPC") 'hippie-expand)

#+end_src


** Orthographe

#+begin_src emacs-lisp

(global-set-key (kbd "<f12> o") 'flyspell-mode)

; Espaces
(global-set-key (kbd "<f12> s") 'whitespace-mode)

#+end_src


** Fenêtres

Voir aussi key-chord & hydra dans la configuration des paquets

#+begin_src emacs-lisp

(global-set-key (kbd "<s-kp-0>") 'delete-window)
(global-set-key (kbd "<s-kp-1>") 'delete-other-windows)

(global-set-key (kbd "<s-kp-2>") 'biblio/scinde-et-suit-horizontalement)
(global-set-key (kbd "<s-kp-3>") 'biblio/scinde-et-suit-verticalement)

(global-set-key (kbd "<s-kp-5>") 'other-window)

(when (fboundp 'windmove-default-keybindings) (windmove-default-keybindings))

(global-set-key (kbd "<S-up>") 'windmove-up)
(global-set-key (kbd "<S-down>") 'windmove-down)
(global-set-key (kbd "<S-right>") 'windmove-right)
(global-set-key (kbd "<S-left>") 'windmove-left)

(global-set-key (kbd "C-x _") 'shrink-window)

(global-set-key (kbd "<f12> f") 'follow-mode)

#+end_src


** Tampons (buffers)


*** Tampon précédent

#+begin_src emacs-lisp
  (global-set-key (kbd "C-^") 'biblio/tampon-precedent)
#+end_src


*** Liste des tampons

#+begin_src emacs-lisp
  (define-key global-map [remap list-buffers] 'ibuffer)
#+end_src


*** Revert

#+begin_src emacs-lisp
  (global-set-key (kbd "<f2> r") 'revert-buffer)
  (global-set-key (kbd "<f2> R") 'biblio/revert-all-buffers)
#+end_src


*** Fermer le tampon courant

#+begin_src emacs-lisp

(global-set-key (kbd "C-x k") 'biblio/ferme-tampon-courant)

#+end_src


*** Fermer tous les tampons

#+begin_src emacs-lisp

(global-set-key (kbd "C-M-s-k") 'biblio/ferme-tous-les-tampons)

#+end_src


*** Tampons inactifs

#+begin_src emacs-lisp
(global-set-key (kbd "<f2> c") 'clean-buffer-list)
#+end_src

*** Vue restreinte sur un tampon (narrowing)

#+begin_src emacs-lisp

(global-set-key (kbd "s-à") 'narrow-to-region)

#+end_src


*** Divers

#+begin_src emacs-lisp

  ;; Informations sur le tampon courant

  (global-set-key (kbd "<f2> n") 'biblio/affiche-copie-nom-fichier)

  ;; Lancer et répondre "!" pour sauver tous les tampons modifiés
  ;;(global-set-key (kbd "C-x s") 'save-some-buffers)

#+end_src


** Outils


*** Emacs-lisp

#+begin_src emacs-lisp

(global-set-key (kbd "C-=") 'eval-expression)

#+end_src


*** Shell

#+begin_src emacs-lisp

(global-set-key (kbd "C-|") 'shell-command-on-region)

(global-set-key (kbd "<s-return>") 'eshell)
(global-set-key (kbd "C-!") 'shell)
(global-set-key (kbd "s-!") 'ansi-term)

;; (global-set-key (kbd "s-!") 'term)

(defvar biblio/terminal-shell "/bin/bash")

(defadvice ansi-term (before force-bash)
  (interactive (list biblio/terminal-shell))
)

(ad-activate 'ansi-term)

#+end_src


*** Calculatrice

#+begin_src emacs-lisp

(global-set-key (kbd "C-&") 'calc)

#+end_src


*** Compilation

#+begin_src emacs-lisp

(global-set-key [f7] 'compile)

#+end_src


*** Date

#+begin_src emacs-lisp

(global-set-key (kbd "s-d") 'biblio/insertion-date)
(global-set-key (kbd "s-D") 'biblio/insertion-date-jour)

#+end_src


*** Caractères

Voir aussi key-chord & hydra dans la configuration des paquets

#+begin_src emacs-lisp

(global-unset-key (kbd "<f8>"))

(global-set-key (kbd "<f8> <") (lambda () (interactive) (insert "⟻")))
(global-set-key (kbd "<f8> >") (lambda () (interactive) (insert "⟼")))

(global-set-key (kbd "<f8> SPC") (lambda () (interactive) (insert " ")))

(global-set-key (kbd "<f8> a") (lambda () (interactive) (insert "â")))
(global-set-key (kbd "<f8> e") (lambda () (interactive) (insert "ê")))
(global-set-key (kbd "<f8> i") (lambda () (interactive) (insert "î")))
(global-set-key (kbd "<f8> o") (lambda () (interactive) (insert "ô")))
(global-set-key (kbd "<f8> u") (lambda () (interactive) (insert "û")))


#+end_src


** Souris

#+begin_src emacs-lisp

(global-set-key [down-mouse-2]   'mouse-flash-position-or-M-x)
(global-set-key [S-down-mouse-2] 'mouse-scan-lines-or-M-:)

#+end_src


* Macros enregistrées

#+begin_src emacs-lisp

;; (fset 'efface-tag
;;    (lambda (&optional arg) "Keyboard macro." (interactive "p")
;;       (kmacro-exec-ring-item (quote ([19 60 return 2 134217828 134217828 134217828 4 4] 0 "%d")) arg)))
;;
;; (global-set-key (kbd "C-x C-k 0") 'efface-tag)

#+end_src


* Compilation bytecode

Désactivé car induisant parfois en erreur.

#+begin_src emacs-lisp

;;(require 'bytecomp)

;;(byte-recompile-directory "~/racine/config/edit/emacs" 0)

#+end_src


* Configuration des paquets


** Fonctions


*** Rename modeline

À quoi ça sert ?

#+begin_src emacs-lisp

(defmacro rename-modeline (package-name mode new-name)
  `(eval-after-load ,package-name
     '(defadvice ,mode (after rename-modeline activate)
        (setq mode-name ,new-name))))

#+end_src


** Organisation


*** Outline

#+begin_src emacs-lisp

(require 'outline)

(eval-after-load "outline" '(require 'foldout))

;(setq outline-minor-mode-prefix (kbd "C-c C-c"))

(global-set-key (kbd "s-o n") 'outline-next-visible-heading)
(global-set-key (kbd "s-o p") 'outline-previous-visible-heading)
(global-set-key (kbd "s-o f") 'outline-forward-same-level)
(global-set-key (kbd "s-o b") 'outline-backward-same-level)
(global-set-key (kbd "s-o u") 'outline-up-heading)

(global-set-key (kbd "s-o c") 'hide-entry)
(global-set-key (kbd "s-o e") 'show-entry)
(global-set-key (kbd "s-o d") 'hide-subtree)
(global-set-key (kbd "s-o s") 'show-subtree)
(global-set-key (kbd "s-o l") 'hide-leaves)
(global-set-key (kbd "s-o k") 'show-branches)
(global-set-key (kbd "s-o i") 'show-children)
(global-set-key (kbd "s-o t") 'hide-body)
(global-set-key (kbd "s-o a") 'show-all)
(global-set-key (kbd "s-o q") 'hide-sublevels)
(global-set-key (kbd "s-o o") 'hide-others)

(global-set-key (kbd "s-o z") 'foldout-zoom-subtree)
(global-set-key (kbd "s-o x") 'foldout-exit-fold)

#+end_src


**** Outline-magic

#+begin_src emacs-lisp

(add-hook 'outline-minor-mode-hook
          (lambda ()
            (require 'outline-magic)
            (define-key outline-minor-mode-map (kbd "TAB") 'outline-cycle)))

#+end_src


*** Org-mode

#+begin_src emacs-lisp

(require 'org)

#+end_src


**** Options

#+begin_src emacs-lisp

(setq org-directory "~/racine/plain/orgdir/")

(setq org-archive-location "~/racine/plain/orgdir/archive.org::* Fichier %s")

(setq org-use-speed-commands t) ; Commandes org accessibles au 1er * de chaque titre

(setq org-adapt-indentation nil) ; Pas d’indentation auto pour suivre la hiérarchie

(setq org-list-use-circular-motion t)

(setq org-export-preserve-breaks nil)

(setq org-ellipsis " |--->")

(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-src-window-setup 'current-window)

(setq org-confirm-babel-evaluate nil)
(setq org-export-with-smart-quotes t)

#+end_src


**** Org goto

#+begin_src emacs-lisp

(setq org-goto-auto-isearch nil)

(setq org-goto-interface 'outline-path-completionp)
(setq org-outline-path-complete-in-steps nil)

#+end_src


**** Bindings

#+begin_src emacs-lisp

(defun org-liste-espacee ()
 "Passer une ligne avant Meta-return"
 (interactive)
 (org-meta-return)
 (beginning-of-visual-line)
 (newline)
 (end-of-visual-line)
 )

(add-hook
 'org-mode-hook
 '(lambda ()
    (define-key org-mode-map (kbd "s-§") 'org-goto)
    (define-key org-mode-map (kbd "C-c l") 'org-store-link)
    (define-key org-mode-map (kbd "C-c a") 'org-agenda)
    (define-key org-mode-map (kbd "C-c c") 'org-capture)
    (define-key org-mode-map (kbd "C-c b") 'org-iswitchb)
    (define-key org-mode-map (kbd "<C-M-return>") 'org-liste-espacee)
    )
 )

#+end_src


**** Modules

#+begin_src emacs-lisp

(org-babel-do-load-languages
  'org-babel-load-languages
  '(
    (emacs-lisp . t)
    (shell t)
    (org t)
    (lilypond t)
    (octave t)
    ))

(require 'org-checklist)

(require 'org-tempo)

(require 'evil-org)

(evil-org-set-key-theme '(textobjects insert navigation additional shift todo heading))

#+end_src


**** Exportation

#+begin_src emacs-lisp

(with-eval-after-load 'ox
  (require 'ox-pandoc))

(setq org-publish-project-alist
'(("eclats de vers"
 :base-directory "~/racine/site/orgmode"
 :base-extension "org"
 :publishing-directory "~/racine/site/publish"
 :recursive t
 :publishing-function org-twbs-publish-to-html
 :headline-levels 6             ; Just the default for this project.
 :auto-preamble t
 ))
)

;;  :publishing-function org-html-publish-to-html

#+end_src


**** Agenda

Voir C-c [ & C-c ] pour la gestion de org-agenda-files

#+begin_src emacs-lisp

(setq org-agenda-span 30)

(setq org-agenda-start-on-weekday nil)

(setq org-agenda-start-day nil)

(setq org-agenda-include-diary nil)

#+end_src


**** Complétion

Nécessite org-tempo

#+begin_src emacs-lisp

(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))

#+end_src


**** Liste de choses à faire

#+begin_src emacs-lisp

(setq org-treat-S-cursor-todo-selection-as-state-change nil)

;; (setq org-use-fast-todo-selection t)

;; (setq org-todo-keywords
;;       (quote
;;        ((sequence "TODO(t!)" "DONE(d!)" "MAYBE(m!)" "WAIT(w@/!)" "|" "CANCELLED(c@)"))))

#+end_src


**** Capture

#+begin_src emacs-lisp

(setq org-default-notes-file "~/racine/plain/orgdir/notes.org")

(setq org-capture-templates '(

	("a" "Agenda" entry (file+olp "~/racine/plain/orgdir/agenda.org" "Agenda" "Ordinaires")
         "* TODO %?\nSCHEDULED: %^{Agenda}T \nLien : %a\n\n%i" :empty-lines 2)

	("t" "Todo : Liste de tâches" entry (file+headline "~/racine/plain/orgdir/taches.org" "Tâches")
         "* TODO %?\n\nCréé le : %U\n\nLien : %a\n\n%i" :empty-lines 2)

	("f" "Fix : Astuces, résolution de bugs" entry (file+headline "~/racine/plain/orgdir/astuces.org" "Astuces")
         "* %?\n\nCréé le : %U\n\nLien : %a\n\n%i" :empty-lines 2)

	("l" "Log : Journal de bord du capitaine" entry (file+olp+datetree "~/racine/plain/orgdir/journaldebord.org" "Journal")
         "* %?\n\nCréé le %U\n\nLien : %a\n\n%i" :empty-lines 2)

	("d" "Dreamtime : Rêverie" entry (file+olp+datetree "~/racine/plain/orgdir/reverie.org" "Rêverie")
         "* %?" :empty-lines 1)

	("e" "Éducation" entry (file+olp+datetree "~/racine/plain/orgdir/education.org" "Éducation")
         "* %?" :empty-lines 1)

	("n" "Notes" entry (file+headline "~/racine/plain/orgdir/notes.org" "Notes")
         "* %?\n\nCréé le : %U\n\nLien : %a\n\n%i" :empty-lines 2)
))

#+end_src


**** Refile

#+begin_src emacs-lisp

;; (setq org-refile-targets '((nil :maxlevel . 9) (org-agenda-files :maxlevel . 9)))

(setq org-refile-targets '((nil :maxlevel . 9)))

(setq org-refile-use-outline-path t)                  ; Show full paths for refiling

#+end_src


**** Présentation

#+begin_src emacs-lisp

(setq org-list-demote-modify-bullet
      '(("-" . "+") ("+" . "*") ("*" . "-")))

;; use org-bullets-mode for utf8 symbols as org bullets

;;(require 'org-bullets)

;; make available "org-bullet-face" such that I can control the font size individually

(setq org-bullets-face-name (quote org-bullet-face))

(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

(setq org-bullets-bullet-list '("☯" "☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷"))

(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

#+end_src


*** Alert

#+begin_src emacs-lisp

(setq alert-default-style 'libnotify)

;; (setq alert-default-style 'mode-line)

;; (setq alert-default-style 'fringe)

;; (setq alert-default-style 'message)

(setq alert-fade-time 30)

(setq alert-persist-idle-time 900)

#+end_src


*** Org-alert

Ne vérifie pas l’heure : on demande un intervalle long, au moins une
heure.

#+begin_src emacs-lisp

(require 'org-alert)

; Il semble que les variables doivent être modifiées avant org-alert-enable

(setq org-alert-interval 3600)

(setq org-alert-headline-regexp "\\(Sched.+:.+\\|Deadline:.+\\)")

(org-alert-enable)
;;(org-alert-disable)

#+end_src


*** Org-wild-notifier

#+begin_src emacs-lisp

(require 'org-wild-notifier)

(org-wild-notifier-mode)

(setq org-wild-notifier-alert-time 10)

(setq org-wild-notifier-keyword-whitelist '("TODO"))

(setq org-wild-notifier--day-wide-events t)

(setq org-wild-notifier-alert-times-property "WILD_NOTIFIER_NOTIFY_BEFORE")

#+end_src


** Exploration


*** Projectile

#+begin_src emacs-lisp

(setq projectile-indexing-method 'alien)

;;(setq projectile-indexing-method 'native)

(setq projectile-enable-caching t)

(setq projectile-completion-system 'helm)

(setq projectile-switch-project-action 'helm-projectile)

(setq projectile-keymap-prefix (kbd "s-p"))

;; (setq projectile-globally-ignored-files '("*.elc"))
;; (setq projectile-globally-ignored-files (append '("*.html" "*.php" "*.pdf") projectile-globally-ignored-files))

;; (setq projectile-globally-ignored-directories '(".git"))
;; (setq projectile-globally-ignored-directories (append '(".hg" ".bzr") projectile-globally-ignored-directories))

(projectile-global-mode)

#+end_src


*** Ivy & Swiper

#+begin_src emacs-lisp

;;(ivy-mode 1)

(global-set-key (kbd "<f12> i") 'ivy-mode)

(eval-after-load "ivy"
 '(progn
   (define-key ivy-minibuffer-map (kbd "s-o")  'ivy-dispatching-done)
   (define-key ivy-minibuffer-map (kbd "M-o")  'ivy-dispatching-done)
   (define-key ivy-minibuffer-map (kbd "C-n")  'ivy-next-line)
   (define-key ivy-minibuffer-map (kbd "C-p")  'ivy-previous-line)
   (define-key ivy-minibuffer-map (kbd "M-<")  'ivy-beginning-of-buffer)
   (define-key ivy-minibuffer-map (kbd "M->")  'ivy-end-of-buffer)
   (define-key ivy-minibuffer-map (kbd "C-v")  'ivy-scroll-up-command)
   (define-key ivy-minibuffer-map (kbd "M-v")  'ivy-scroll-down-command)))

(setq ivy-height 20)

(setq ivy-wrap t)

(setq ivy-count-format "(%d/%d) ")

(setq ivy-use-virtual-buffers t)

(global-set-key (kbd "s-f") 'counsel-find-file)

(global-set-key (kbd "s-b") 'ivy-switch-buffer)

(global-set-key (kbd "s-x") 'counsel-M-x)

(global-set-key (kbd "s-s") 'swiper)

(global-set-key (kbd "s-G") 'counsel-ag)

#+end_src


*** Counsel projectile

#+begin_src emacs-lisp

;;(global-set-key (kbd "s-%") 'counsel-projectile)

#+end_src


*** Helm


**** Options

#+begin_src emacs-lisp

(setq helm-split-window-default-side 'other)

(setq helm-split-window-in-side-p t)

(setq helm-autoresize-mode t)

(setq helm-autoresize-max-height 40)
(setq helm-autoresize-min-height 30)

(setq helm-move-to-line-cycle-in-source t)

(setq helm-quick-update t)

(setq helm-idle-delay 0.01)

(setq helm-input-idle-delay 0.01)

(setq helm-candidate-number-limit 200)

(setq helm-scroll-amount 4)

(setq helm-ff-file-name-history-use-recentf t)

(setq helm-buffers-favorite-modes (append helm-buffers-favorite-modes '(picture-mode artist-mode)))

(setq helm-ff-search-library-in-sexp t)

(loop for ext in
 '("\\.elc$" "\\.pyc$" "\\.git$" "\\.o$" "*~")
 do (add-to-list 'helm-boring-file-regexp-list ext))

(setq helm-mini-default-sources '(
  helm-source-buffers-list
  helm-source-recentf
  helm-source-files-in-current-dir
  helm-source-buffer-not-found
  ))

(setq helm-M-x-requires-pattern 0)

(setq helm-locate-command "locate -d ~/racine/index/locate/racine.db %s -e -A %s")

(setq helm-ack-grep-executable "/usr/bin/vendor_perl/ack")

#+end_src


**** Bindings

Voir aussi key-chord & hydra dans la configuration des paquets

#+begin_src emacs-lisp

(global-set-key (kbd "s-h") 'helm-command-prefix)

(global-unset-key (kbd "C-x c"))

(define-key global-map [remap find-file] 'helm-find-files)
(define-key global-map [remap occur] 'helm-occur)
(define-key global-map [remap dabbrev-expand] 'helm-dabbrev)
(define-key global-map [remap bookmark-bmenu-list] 'helm-filtered-bookmarks)
(define-key global-map [remap insert-register] 'helm-register)

(global-set-key (kbd "s-SPC") 'helm-mini)

(global-set-key (kbd "M-x") 'helm-M-x)

; Même idée qu’occur

(global-set-key (kbd "s-é") 'helm-swoop)
(global-set-key (kbd "s-è") 'helm-multi-swoop)

(global-set-key (kbd "s-ç") 'helm-show-kill-ring)

(global-set-key (kbd "M-s l") 'swiper-helm)

(global-set-key (kbd "s-$") 'helm-etags-select)
(global-set-key (kbd "s--") 'helm-locate)

(global-set-key (kbd "s-g") 'helm-do-grep-ag)
(global-set-key (kbd "s-&") 'helm-projectile-grep)

(global-set-key (kbd "s-'") 'helm-all-mark-rings)

(global-set-key (kbd "s-m") 'helm-filtered-bookmarks)

(global-set-key (kbd "s-^") 'helm-gid)

(global-set-key (kbd "s-h y") 'helm-show-kill-ring)
(global-set-key (kbd "s-h :") 'helm-mini-buffer-history)
(global-set-key (kbd "s-h '") 'helm-all-mark-rings)

#+end_src


**** Bindings locaux au tampon helm

#+begin_src emacs-lisp

(define-key helm-map (kbd "s-z") 'helm-select-action)
(define-key helm-map (kbd "C-z") 'helm-execute-persistent-action)

;;(helm-mode 1)

(global-set-key (kbd "<f12> h") 'helm-mode)

#+end_src


*** Helm projectile

#+begin_src emacs-lisp

(require 'helm-projectile)

(global-set-key (kbd "s-ù") 'helm-projectile)

;; (global-set-key (kbd "s-*") 'helm-projectile-find-file)

(global-set-key (kbd "C-c s-SPC") 'helm-projectile-recentf)

(global-set-key (kbd "s-p s-f") 'helm-projectile-find-file-in-known-projects)

(helm-projectile-on)

#+end_src


*** Helm gtags

#+begin_src emacs-lisp

(global-set-key (kbd "s-£") 'helm-gtags-find-pattern)

(setq
 helm-gtags-ignore-case t
 helm-gtags-auto-update t
 helm-gtags-use-input-at-cursor t
 helm-gtags-pulse-at-cursor t
 helm-gtags-prefix-key "\C-cg"
 helm-gtags-suggested-key-mapping t
 )

(require 'helm-gtags)

#+end_src


*** Ggtags

#+begin_src emacs-lisp

(global-set-key (kbd "<f12> g") 'ggtags-mode)

(global-set-key (kbd "s-q") 'ggtags-idutils-query)

(setq ggtags-completing-read-function nil)

#+end_src


*** MTorus

Voir aussi key-chord & hydra dans la configuration des paquets

#+begin_src emacs-lisp

(require 'mtorus)
(mtorus-init)

;; (mtorus-install-suggested-bindings)

(global-set-key (kbd "s-t c") 'mtorus-new-ring)
(global-set-key (kbd "s-t m") 'mtorus-rename-ring)
(global-set-key (kbd "s-t D") 'mtorus-delete-ring)

(global-set-key (kbd "<S-s-insert>") 'mtorus-new-ring)

(global-set-key (kbd "s-t a") 'mtorus-add-current-pos-to-current-ring)
(global-set-key (kbd "s-t u") 'mtorus-update-current-marker)
(global-set-key (kbd "s-t d") 'mtorus-delete-current-marker-from-current-ring)

(global-set-key (kbd "<s-insert>") 'mtorus-add-current-pos-to-current-ring)
(global-set-key (kbd "<s-delete>") 'mtorus-update-current-marker)
(global-set-key (kbd "<S-s-delete>") 'mtorus-delete-current-marker-from-current-ring)

(global-set-key (kbd "s-t l") 'mtorus-describe-current-ring)

(global-set-key (kbd "s-t n") 'mtorus-cycle-marker-next)
(global-set-key (kbd "s-t p") 'mtorus-cycle-marker-previous)

(global-set-key (kbd "<C-prior>") 'mtorus-cycle-marker-previous)
(global-set-key (kbd "<C-next>") 'mtorus-cycle-marker-next)

(global-set-key (kbd "s-t N") 'mtorus-cycle-ring-next)
(global-set-key (kbd "s-t P") 'mtorus-cycle-ring-previous)

(global-set-key (kbd "<C-home>") 'mtorus-cycle-ring-previous)
(global-set-key (kbd "<C-end>") 'mtorus-cycle-ring-next)

;; (global-set-key (kbd "s-t *") 'mtorus-switch-to-ring)

(global-set-key (kbd "s-t *") (lambda () (interactive) (mtorus-switch-to-ring) (mtorus-cycle-marker-next)))

;; (global-set-key (kbd "s-*") 'mtorus-switch-to-ring)

(global-set-key (kbd "s-*") (lambda () (interactive) (mtorus-switch-to-ring) (mtorus-cycle-marker-next)))

(global-set-key (kbd "s-t s") 'mtorus-save-torus)
(global-set-key (kbd "s-t r") 'mtorus-read-torus)

(setq mtorus-save-on-exit t)
(setq mtorus-file-name "~/racine/plugin/data/mtorus/mtorus.el")

;; (mtorus-read-torus)

#+end_src


*** Ibuffer-vc

#+begin_src emacs-lisp

(add-hook 'ibuffer-hook
  (lambda ()
    (ibuffer-vc-set-filter-groups-by-vc-root)
    (unless (eq ibuffer-sorting-mode 'alphabetic)
      (ibuffer-do-sort-by-alphabetic))))

#+end_src


** Arborescence du système de fichiers


*** Dired-hacks

#+begin_src emacs-lisp

(require 'dired-filter)

(define-key dired-mode-map (kbd "/") dired-filter-map)

(define-key dired-mode-map (kbd "_") dired-filter-mark-map)

;; (setq dired-filter-group-saved-groups '(("defaut"
;;   ("Org" (extension . "org"))
;;   ("Lisp" (extension . "el"))
;;   ("LaTeX" (extension "tex" "bib"))
;;   ("PDF" (extension . "pdf"))
;;   ("Archives" (extension "zip" "rar" "gz" "bz2" "tar")))))

(define-key dired-mode-map (kbd "_ _") dired-filter-group-mode)

#+end_src


** Fenêtres

#+begin_src emacs-lisp

(setq switch-window-input-style 'minibuffer)
(setq switch-window-increase 4)
(setq switch-window-threshold 2)
(setq switch-window-shortcut-style 'qwerty)
(setq switch-window-qwerty-shortcuts
    '("0" "1" "2" "3" "4" "5" "6" "7" "8" "9"))

(define-key global-map [remap other-window] 'switch-window)

#+end_src

** Recherche


*** Wgrep

#+begin_src emacs-lisp

(require 'wgrep)

(setq wgrep-auto-save-buffer t)

(setq wgrep-enable-key "e")

#+end_src


*** Iy-go-to-char

#+begin_src emacs-lisp

(global-set-key (kbd "s-;") 'iy-go-to-char)
(global-set-key (kbd "s-,") 'iy-go-to-char-backward)

(global-set-key (kbd "C-c s-;") 'iy-go-to-or-up-to-continue)
(global-set-key (kbd "C-c s-,") 'iy-go-to-or-up-to-continue-backward)

#+end_src


** Annulation


*** Undo-tree

Voir aussi key-chord & hydra dans la configuration des paquets

#+begin_src emacs-lisp

(setq undo-tree-auto-save-history t)

;;(setq undo-tree-visualizer-timestamps t)

(setq undo-tree-history-directory-alist '((".*" . "~/racine/varia/undo/")))

(global-undo-tree-mode 1)

(global-set-key (kbd "<f12> u") 'global-undo-tree-mode)

#+end_src


**** Keep region when undoing in region

#+begin_src emacs-lisp

;; (defadvice undo-tree-undo (around keep-region activate)
;;   (if (use-region-p)
;;       (let ((m (set-marker (make-marker) (mark)))
;;             (p (set-marker (make-marker) (point))))
;;         ad-do-it
;;         (goto-char p)
;;         (set-mark m)
;;         (set-marker p nil)
;;         (set-marker m nil))
;;     ad-do-it))

#+end_src


** Registres


*** Register list

#+begin_src emacs-lisp

;;(require 'register-list)

(global-set-key (kbd "C-x r L") 'register-list)

#+end_src


** Complétion


*** Company

#+begin_src emacs-lisp

(setq company-idle-delay 0)
(setq company-minimum-prefix-length 3)

(with-eval-after-load 'company
;;  (define-key company-active-map (kbd "M-n") nil)
;;  (define-key company-active-map (kbd "M-p") nil)
  (define-key company-active-map (kbd "C-n") #'company-select-next)
  (define-key company-active-map (kbd "C-p") #'company-select-previous)
  (define-key company-active-map (kbd "SPC") #'company-abort))

(add-hook 'emacs-lisp-mode-hook 'company-mode)

#+end_src


*** Yasnippet

#+begin_src emacs-lisp

(require 'yasnippet)

(yas-reload-all)

(add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)

#+end_src


*** Auto-yasnippet

#+begin_src emacs-lisp
  (require 'auto-yasnippet)

  (global-set-key (kbd "C-(") 'aya-create)
  (global-set-key (kbd "C-)") 'aya-expand)
#+end_src


** Contrôle de version


*** Magit

Activer ou désactiver magit-auto-revert-mode ?

#+begin_src emacs-lisp
  (require 'magit)
  (global-set-key (kbd "C-x g") 'magit-status)
#+end_src


** Read Eval Print Loops


*** Eval in REPL

#+begin_src emacs-lisp

;; require the main file containing common functions
(require 'eval-in-repl)

;; Uncomment if no need to jump after evaluating current line
;; (setq eir-jump-after-eval nil)

;; Uncomment if you want to always split the script window into two.
;; This will just split the current script window into two without
;; disturbing other windows.
;; (setq eir-always-split-script-window t)

;; Uncomment if you always prefer the two-window layout.
;; (setq eir-delete-other-windows t)

;; Place REPL on the left/right/top/bottom of the script window when splitting.
(setq eir-repl-placement 'bottom)

;;; ielm support (for emacs lisp)
(require 'eval-in-repl-ielm)
;; Evaluate expression in the current buffer.
(setq eir-ielm-eval-in-current-buffer t)
;; for .el files
(define-key emacs-lisp-mode-map (kbd "<C-return>") 'eir-eval-in-ielm)
;; for *scratch*
(define-key lisp-interaction-mode-map (kbd "<C-return>") 'eir-eval-in-ielm)

;;; Python support
(require 'python) ; if not done elsewhere
(require 'eval-in-repl-python)
(add-hook 'python-mode-hook
          '(lambda ()
             (local-set-key (kbd "<C-return>") 'eir-eval-in-python)))

;;; Ruby support
(require 'ruby-mode) ; if not done elsewhere
(require 'inf-ruby)  ; if not done elsewhere
(require 'eval-in-repl-ruby)
(define-key ruby-mode-map (kbd "<C-return>") 'eir-eval-in-ruby)

;; Shell support
(require 'eval-in-repl-shell)
(add-hook 'sh-mode-hook
          '(lambda()
             (local-set-key (kbd "C-<return>") 'eir-eval-in-shell)))
;; Version with opposite behavior to eir-jump-after-eval configuration
(defun eir-eval-in-shell2 ()
  "eval-in-repl for shell script (opposite behavior)

This version has the opposite behavior to the eir-jump-after-eval
configuration when invoked to evaluate a line."
  (interactive)
  (let ((eir-jump-after-eval (not eir-jump-after-eval)))
       (eir-eval-in-shell)))
(add-hook 'sh-mode-hook
          '(lambda()
             (local-set-key (kbd "C-M-<return>") 'eir-eval-in-shell2)))

#+end_src


** Sélection


*** Expand-region

#+begin_src emacs-lisp

(global-set-key (kbd "s-e") 'er/expand-region)

#+end_src


*** Multiple cursors (mc)

#+begin_src emacs-lisp

(define-key region-bindings-mode-map (kbd "s-n") 'mc/mark-next-like-this)
(define-key region-bindings-mode-map (kbd "s-SPC") 'mc/mark-more-like-this-extended)
(define-key region-bindings-mode-map (kbd "s-=") 'mc/edit-lines)

#+end_src


** Parenthèses


*** Smartparens

#+begin_src emacs-lisp

(require 'smartparens)

(smartparens-global-mode nil)

(show-smartparens-global-mode nil)

;;(require 'smartparens-config)

(add-hook 'lisp-mode #'smartparens-strict-mode)

(sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)

#+end_src


**** Bindings

#+begin_src emacs-lisp

(global-set-key (kbd "<f12> p") 'smartparens-global-mode)

#+end_src


** Encodage


*** Ucs-cmds

#+begin_src emacs-lisp

;; (require 'ucs)

;; (set-frame-font "DejaVu Sans Mono-10")
;; (set-frame-font "DejaVu Sans 10")
;; (set-frame-font "Arial Unicode MS")

;; (ucsc-make-commands "^math")
;; (ucsc-make-commands "latin")
;; (ucsc-make-commands "arabic")
;; (ucsc-make-commands "^cjk")
;; (ucsc-make-commands "^box drawings ")
;; (ucsc-make-commands "^greek [a-z]+ letter")
;; (ucsc-make-commands "\\(^hangul\\|^circled hangul\\|^parenthesized hangul\\)")

#+end_src


** Async

#+begin_src emacs-lisp

(autoload 'dired-async-mode "dired-async.el" nil t)

(dired-async-mode 1)

(async-bytecomp-package-mode 1)

#+end_src


** Présentation


*** Powerline

#+begin_src emacs-lisp

;; (powerline-vim-theme)
(powerline-evil-vim-theme)
;; (powerline-nano-theme)
;; (powerline-center-theme)
;; (powerline-center-evil-theme)
;; (powerline-default-theme)

#+end_src


*** Pretty mode

#+begin_src emacs-lisp

(global-pretty-mode t)

#+end_src

** Bindings


*** Key-chord

Ralentit la frappe : activer seulement lorsque nécessaire

#+begin_src emacs-lisp

;;(key-chord-mode 1)

(setq key-chord-two-keys-delay 0.12)
(setq key-chord-one-key-delay 0.12)

(global-set-key (kbd "<f12> c") 'key-chord-mode)

#+end_src


**** Helm

#+begin_src emacs-lisp

(key-chord-define-global "xc" 'helm-M-x)

(key-chord-define-global "bn" 'helm-mini)

(key-chord-define-global "df" 'helm-find-files)

#+end_src


**** Undo

#+begin_src emacs-lisp

(key-chord-define-global "yz" 'undo-tree-visualize)

#+end_src


**** Fenêtres

#+begin_src emacs-lisp

(key-chord-define-global "wz" 'delete-other-windows)
(key-chord-define-global "ws" 'split-window-below)
(key-chord-define-global "wq" 'split-window-right)

(key-chord-define-global "wx" '(lambda () (interactive) (shrink-window-horizontally 5)))
(key-chord-define-global "wc" '(lambda () (interactive) (shrink-window 5)))
(key-chord-define-global "wv" '(lambda () (interactive) (enlarge-window 5)))
(key-chord-define-global "wb" '(lambda () (interactive) (enlarge-window-horizontally 5)))

#+end_src


**** MTorus

#+begin_src emacs-lisp

(key-chord-define-global "=c" 'mtorus-new-ring)
(key-chord-define-global "=m" 'mtorus-rename-ring)
(key-chord-define-global "=x" 'mtorus-delete-ring)

(key-chord-define-global "=a" 'mtorus-add-current-pos-to-current-ring)
(key-chord-define-global "=u" 'mtorus-update-current-marker)
(key-chord-define-global "=d" 'mtorus-delete-current-marker-from-current-ring)

(key-chord-define-global "=l" 'mtorus-describe-current-ring)

(key-chord-define-global "=n" 'mtorus-cycle-marker-next)
(key-chord-define-global "=p" 'mtorus-cycle-marker-previous)

(key-chord-define-global "=j" 'mtorus-cycle-ring-next)
(key-chord-define-global "=k" 'mtorus-cycle-ring-previous)

(key-chord-define-global "=g" 'mtorus-switch-to-ring)

(key-chord-define-global "=s" 'mtorus-save-torus)
(key-chord-define-global "=r" 'mtorus-read-torus)

#+end_src


**** Caractères

#+begin_src emacs-lisp

(key-chord-define-global "a^" (lambda () (interactive) (insert "â")))
(key-chord-define-global "e^" (lambda () (interactive) (insert "ê")))
(key-chord-define-global "i^" (lambda () (interactive) (insert "î")))
(key-chord-define-global "o^" (lambda () (interactive) (insert "ô")))
(key-chord-define-global "u^" (lambda () (interactive) (insert "û")))

#+end_src


*** Hydra

Mouvements

#+begin_src emacs-lisp

(defhydra hydra-move ()
   "move"
   ;; ("n" next-line)
   ;; ("p" previous-line)
   ;; ("f" forward-char)
   ;; ("b" backward-char)
   ;; ("a" beginning-of-line)
   ;; ("e" move-end-of-line)
   ;; ("F" forward-word)
   ;; ("B" backward-word)
   ;; ("A" backward-sentence)
   ;; ("E" forward-sentence)
   ;; ("v" scroll-up-command)
   ;; ("V" scroll-down-command)
   ("<kp-6>" forward-word)
   ("<kp-4>" backward-word)
   ("<kp-7>" backward-sentence)
   ("<kp-1>" forward-sentence)
   ("<kp-8>" backward-paragraph)
   ("<kp-2>" forward-paragraph)
   ("<kp-9>" scroll-down-command)
   ("<kp-3>" scroll-up-command)
   ;; ("r" move-to-window-line-top-bottom)
   ;; ("l" recenter-top-bottom)
   ("<kp-5>" nil "quit")
   ("q" nil "quit"))

;; (global-set-key (kbd "C-f") #'hydra-move/forward-char)
;; (global-set-key (kbd "C-b") #'hydra-move/backward-char)

;; (global-set-key (kbd "M-f") #'hydra-move/forward-word)
;; (global-set-key (kbd "M-b") #'hydra-move/backward-word)

(global-set-key (kbd "<C-up>") #'hydra-move/backward-paragraph)
(global-set-key (kbd "<C-down>") #'hydra-move/forward-paragraph)

;; (global-set-key (kbd "C-n") #'hydra-move/next-line)
;; (global-set-key (kbd "C-p") #'hydra-move/previous-line)
;; (global-set-key (kbd "C-f") #'hydra-move/forward-char)
;; (global-set-key (kbd "C-b") #'hydra-move/backward-char)
;; (global-set-key (kbd "M-f") #'hydra-move/forward-word)
;; (global-set-key (kbd "M-b") #'hydra-move/backward-word)
;; (global-set-key (kbd "C-a") #'hydra-move/beginning-of-line)
;; (global-set-key (kbd "C-e") #'hydra-move/move-end-of-line)
;; (global-set-key (kbd "M-a") #'hydra-move/backward-sentence)
;; (global-set-key (kbd "M-e") #'hydra-move/forward-sentence)
;; (global-set-key (kbd "<C-up>") #'hydra-move/backward-paragraph)
;; (global-set-key (kbd "<C-down>") #'hydra-move/forward-paragraph)
;; (global-set-key (kbd "C-v") #'hydra-move/scroll-up-command)
;; (global-set-key (kbd "M-v") #'hydra-move/scroll-down-command)

;; (global-set-key (kbd "<prior>") #'hydra-move/scroll-down-command)
;; (global-set-key (kbd "<next>") #'hydra-move/scroll-up-command)

#+end_src

Copier & Coller

#+begin_src emacs-lisp

(defhydra hydra-yank-pop ()
  "yank"
  ("C-y" yank nil)
  ("M-y" yank-pop nil)
  ("y" (yank-pop 1) "next")
  ("Y" (yank-pop -1) "prev")
  ("l" helm-show-kill-ring "list" :color red))   ; or browse-kill-ring

(global-set-key (kbd "M-y") #'hydra-yank-pop/yank-pop)
(global-set-key (kbd "C-y") #'hydra-yank-pop/yank)

#+end_src

Transposition (échange de caractères, mots, ...)

#+begin_src emacs-lisp

(global-set-key (kbd "C-c t")
    (defhydra hydra-transpose (:color red)
    "Transpose"
     ("c" transpose-chars "characters")
     ("w" transpose-words "words")
     ("o" org-transpose-words "Org mode words")
     ("l" transpose-lines "lines")
     ("s" transpose-sentences "sentences")
     ("e" org-transpose-elements "Org mode elements")
     ("p" transpose-paragraphs "paragraphs")
     ("t" org-table-transpose-table-at-point "Org mode table")
     ("q" nil "cancel" :color blue)))

#+end_src

Fenêtres

#+begin_src emacs-lisp

;; (when (fboundp 'windmove-default-keybindings) (windmove-default-keybindings))

;; (defhydra hydra-windmove ()
;;    "windmove"
;;    ("k" windmove-up)
;;    ("j" windmove-down)
;;    ("h" windmove-left)
;;    ("l" windmove-right)
;;    ("0" delete-window)
;;    ("1" delete-other-windows)
;;    ("2" split-window-below)
;;    ("3" split-window-right)
;;    ("<kp-0>" delete-window)
;;    ("<kp-1>" delete-other-windows)
;;    ("<kp-2>" split-window-below)
;;    ("<kp-3>" split-window-right)
;;    ("o" other-window))

;; (global-set-key (kbd "C-x o") #'hydra-windmove/other-window)
;; (global-set-key (kbd "C-x 2") #'hydra-windmove/split-window-below)
;; (global-set-key (kbd "C-x 3") #'hydra-windmove/split-window-right)

#+end_src

Ajuster les fenêtres

#+begin_src emacs-lisp

(require 'hydra-examples)

(defhydra hydra-splitter (global-map "s-<")
  "splitter"
  ("h" hydra-move-splitter-left)
  ("j" hydra-move-splitter-down)
  ("k" hydra-move-splitter-up)
  ("l" hydra-move-splitter-right))

#+end_src


*** Region-bindings-mode

#+begin_src emacs-lisp

(region-bindings-mode-enable)

(setq region-bindings-mode-disable-predicates ((lambda () buffer-read-only)))

(define-key region-bindings-mode-map (kbd "C-w") 'kill-region)

(global-set-key (kbd "C-w") 'backward-kill-word)

#+end_src


*** Evil

#+begin_src emacs-lisp

(global-set-key (kbd "<f12> v") 'evil-mode)

;(evil-mode 1)

;(define-key evil-normal-state-map (kbd "<s-z>") 'evil-emacs-state)
;(define-key evil-emacs-state-map (kbd "<s-z>") 'evil-normal-state)

#+end_src


*** Xah-math-input

#+begin_src emacs-lisp

(require 'xah-math-input)

(global-set-key (kbd "<f12> x") 'xah-math-input-mode)

#+end_src


*** Which-key

#+begin_src emacs-lisp

(require 'which-key)

(which-key-mode)

(setq which-key-idle-delay 2.0)

#+end_src


* Fin

Nécessaire pour éviter un stack overflow lors du chargement du fichier.
