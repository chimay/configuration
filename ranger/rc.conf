# vim: set filetype=conf:

# Documentation {{{1

# ===================================================================
# This file contains the default startup commands for ranger.
# To change them, it is recommended to create the file
# ~/.config/ranger/rc.conf and add your custom commands there.
#
# If you copy this whole file there, you may want to set the environment
# variable RANGER_LOAD_DEFAULT_RC to FALSE to avoid loading it twice.
#
# The purpose of this file is mainly to define keybindings and settings.
# For running more complex python code, please create a plugin in "plugins/" or
# a command in "commands.py".
#
# Each line is a command that will be run before the user interface
# is initialized.  As a result, you can not use commands which rely
# on the UI such as :delete or :mark.
# ===================================================================

# }}}1

# Options {{{1

# How many columns are there, and what are their relative widths?
set column_ratios 1,3,4

# Which files should be hidden? (regular expression)
set hidden_filter ^\.|\.(?:pyc|pyo|bak|swp)$|^lost\+found$|^__(py)?cache__$

# Show hidden files? You can toggle this by typing 'zh'
set show_hidden false

# Ask for a confirmation when running the "delete" command?
# Valid values are "always", "never", "multiple" (default)
# With "multiple", ranger will ask only if you delete multiple files at once.
set confirm_on_delete multiple

# Which script is used to generate file previews?
# ranger ships with scope.sh, a script that calls external programs (see
# README.md for dependencies) to preview images, archives, etc.
set preview_script ~/.config/ranger/scope.sh

# Use the external preview script or display simple plain text or image previews?
set use_preview_script true

# Automatically count files in the directory, even before entering them?
set automatically_count_files true

# Open all images in this directory when running certain image viewers
# like feh or sxiv?  You can still open selected files by marking them.
set open_all_images true

# Be aware of version control systems and display information.
set vcs_aware false

# State of the three backends git, hg, bzr. The possible states are
# disabled, local (only show local info), enabled (show local and remote
# information).
set vcs_backend_git enabled
set vcs_backend_bzr enabled
set vcs_backend_hg disabled

# Use one of the supported image preview protocols
set preview_images true

# Set the preview image method. Supported methods:
#
# * w3m (default):
#   Preview images in full color with the external command "w3mimgpreview"?
#   This requires the console web browser "w3m" and a supported terminal.
#   It has been successfully tested with "xterm" and "urxvt" without tmux.
#
# * iterm2:
#   Preview images in full color using iTerm2 image previews
#   (http://iterm2.com/images.html). This requires using iTerm2 compiled
#   with image preview support.
set preview_images_method w3m

# Use a unicode "..." character to mark cut-off filenames?
set unicode_ellipsis false

# Show dotfiles in the bookmark preview box?
set show_hidden_bookmarks true

# Which colorscheme to use?  These colorschemes are available by default:
# default, jungle, snow, solarized

set colorscheme personnel

# Preview files on the rightmost column?
# And collapse (shrink) the last column if there is nothing to preview?
set preview_files true
set preview_directories true
set collapse_preview true

# Save the console history on exit?
set save_console_history true

# Draw the status bar on top of the browser window (default: bottom)
set status_bar_on_top false

# Draw a progress bar in the status bar which displays the average state of all
# currently running tasks which support progress bars?
set draw_progress_bar_in_status_bar true

# Draw borders around columns?
set draw_borders true

# Display the directory name in tabs?
set dirname_in_tabs true

# Enable the mouse support?
set mouse_enabled true

# Display the file size in the main column or status bar?
set display_size_in_main_column true
set display_size_in_status_bar true

# Display files tags in all columns or only in main column?
set display_tags_in_all_columns true

# Set a title for the window?
set update_title false

# Set the title to "ranger" in the tmux program?
set update_tmux_title false

# Shorten the title if it gets long?  The number defines how many
# directories are displayed at once, 0 turns off this feature.
set shorten_title 3

# Abbreviate $HOME with ~ in the titlebar (first line) of ranger?
set tilde_in_titlebar true

# How many directory-changes or console-commands should be kept in history?
set max_history_size 300
set max_console_history_size 300

# Try to keep so much space between the top/bottom border when scrolling:
set scroll_offset 8

# Flush the input after each key hit?  (Noticable when ranger lags)
set flushinput true

# Padding on the right when there's no preview?
# This allows you to click into the space to run the file.
set padding_right true

# Save bookmarks (used with mX and `X) instantly?
# This helps to synchronize bookmarks between multiple ranger
# instances but leads to *slight* performance loss.
# When false, bookmarks are saved when ranger is exited.
set autosave_bookmarks true

# You can display the "real" cumulative size of directories by using the
# command :get_cumulative_size or typing "dc".  The size is expensive to
# calculate and will not be updated automatically.  You can choose
# to update it automatically though by turning on this option:
set autoupdate_cumulative_size false

# Turning this on makes sense for screen readers:
set show_cursor false

# One of: size, natural, basename, atime, ctime, mtime, type, random
set sort natural

# Additional sorting options
set sort_reverse false
set sort_case_insensitive true
set sort_directories_first true
set sort_unicode false

# Enable this if key combinations with the Alt Key don't work for you.
# (Especially on xterm)

# Il faut le désactiver pour faire fonctionner
# ù µ é è etc
set xterm_alt_key false

# Whether to include bookmarks in cd command
set cd_bookmarks true

# Avoid previewing files larger than this size, in bytes.  Use a value of 0 to
# disable this feature.
set preview_max_size 0

# Add the highlighted file to the path in the titlebar
set show_selection_in_titlebar true

# The delay that ranger idly waits for user input, in milliseconds, with a
# resolution of 100ms.  Lower delay reduces lag between directory updates but
# increases CPU load.
set idle_delay 2000

# When the metadata manager module looks for metadata, should it only look for
# a ".metadata.json" file in the current directory, or do a deep search and
# check all directories above the current one as well?
set metadata_deep_search false

# }}}1

# Options locales {{{1

# You can set local options that only affect a single directory.

# Examples:
# setlocal path=~/downloads sort mtime

# }}}1

# Aliases {{{1

alias h    help

alias q    quit
alias q!   quitall
alias qa   quitall
alias qall quitall

alias d    display_file
alias e    edit

alias s scout

alias filter     scout -prt
alias find       scout -aeit
alias mark       scout -mr
alias unmark     scout -Mr
alias search     scout -rs
alias search_inc scout -rts
alias travel     scout -aefiklst

alias setl setlocal

# }}}1

# Mappings pour le browser {{{1

# Aide {{{2

map ? help

# }}}2

# Quitter, annuler {{{2

map     ZQ quitall!
map     ZZ quitall

map <C-c> abort

# }}}2

# Recharger {{{2

map R     reload_cwd

map <C-r> reset
map <C-l> redraw_window

map @ chain shell vim -p ~/.config/ranger/rc.conf %rangerdir/config/rc.conf ; source ~/.config/ranger/rc.conf

# }}}2

# Modes {{{2

map :  console
map <esc> change_mode normal

# }}}2

# Présentation {{{2

map é set viewmode!

map zp    toggle_option preview_files
map zP    toggle_option preview_directories
map zv    toggle_option use_preview_script
map zc    toggle_option collapse_preview

map dc    get_cumulative_size
map zu    toggle_option autoupdate_cumulative_size

# Format des méta données

map Mf linemode filename
map Mi linemode fileinfo
map Mp linemode permissions
map Mt linemode metatitle

# }}}2

# Mouvements {{{2

# Concept
#
# Left ou h : répertoire parent
# Down ou j : fichier suivant
# Up ou j : fichier précédent
# Right ou l : on entre dans le répertoire, ou on visualise le fichier

copymap <UP>       k
copymap <DOWN>     j
copymap <LEFT>     h
copymap <RIGHT>    l

map <C-D>  move down=0.5  pages=True
map <C-U>  move up=0.5    pages=True

copymap <PAGEDOWN> <C-F>
copymap <PAGEUP>   <C-B>

copymap <HOME>     gg
copymap <END>      G

# In case you work on a keyboard with dvorak layout
map <UP>       move up=1
map <DOWN>     move down=1
map <LEFT>     move left=1
map <RIGHT>    move right=1
map <CR>       move right=1

map <PAGEDOWN> move down=1   pages=True
map <PAGEUP>   move up=1     pages=True

map <HOME>     move to=0
map <END>      move to=-1

# }}}2

# Sélectionner, tags {{{2

map <Space> mark_files toggle=True
map v       toggle_visual_mode
map uv      mark_files all=True val=False
map V       mark_files all=True toggle=True
map <C-V>   toggle_visual_mode reverse=True

map T       tag_toggle
map ut      tag_remove

map "<any>  tag_toggle tag=%any

# }}}2

# Recherche {{{2

map /  console search_inc%space
map n  search_next
map N  search_next forward=False

map ;t search_next order=tag
map ;s search_next order=size
map ;i search_next order=mimetype
map ;c search_next order=ctime
map ;m search_next order=mtime
map ;a search_next order=atime

map § console flat%space

map f  console find%space

map * fzf_select

# }}}2

# Tri {{{2

map or toggle_option sort_reverse
map oz set sort=random
map os chain set sort=size;      set sort_reverse=False
map ob chain set sort=basename;  set sort_reverse=False
map on chain set sort=natural;   set sort_reverse=False
map om chain set sort=mtime;     set sort_reverse=False
map oc chain set sort=ctime;     set sort_reverse=False
map oa chain set sort=atime;     set sort_reverse=False
map ot chain set sort=type;      set sort_reverse=False
map oe chain set sort=extension; set sort_reverse=False

map oS chain set sort=size;      set sort_reverse=True
map oB chain set sort=basename;  set sort_reverse=True
map oN chain set sort=natural;   set sort_reverse=True
map oM chain set sort=mtime;     set sort_reverse=True
map oC chain set sort=ctime;     set sort_reverse=True
map oA chain set sort=atime;     set sort_reverse=True
map oT chain set sort=type;      set sort_reverse=True
map oE chain set sort=extension; set sort_reverse=True

map zd    toggle_option sort_directories_first
map zs    toggle_option sort_case_insensitive

# }}}2

# Filtres {{{2

map za    toggle_option show_hidden
map zh    toggle_option show_hidden

map zf    console filter%space

# }}}2

# Visualiser, Éditer {{{2

map ù display_file
map µ edit

map ,p open_with pager
map ,e open_with editor
map ,e open_with extracteur

map £  chain draw_possible_programs; console open_with%space

map q taskview_open

map <F2> display_log

map <F5> eval import shlex; fm.run("tmux splitw -v rifle " + shlex.quote(fm.thisfile.basename))
map <F6> eval import shlex; fm.run("tmux splitw -h rifle " + shlex.quote(fm.thisfile.basename))

# }}}2

# Répertoires {{{2

map cd console cd%space

map ]     move_parent 1
map [     move_parent -1

map }     traverse

# Historique des répertoires

map H     history_go -1
map L     history_go 1

# }}}2

# Signets {{{2

map `<any>  enter_bookmark %any
map '<any>  enter_bookmark %any
map m<any>  set_bookmark %any
map um<any> unset_bookmark %any

map m<bg>   draw_bookmarks
copymap m<bg>  um<bg> `<bg> '<bg>

# }}}2

# Onglets {{{2

map t      tab_new
map x      tab_close
map ux     tab_restore

map <TAB>     tab_move 1
map <S-TAB>   tab_move -1
map <A-Right> tab_move 1
map <A-Left>  tab_move -1
map $         tab_move 1
map ^         tab_move -1
map gt        tab_move 1
map gT        tab_move -1

map <a-1>     tab_open 1
map <a-2>     tab_open 2
map <a-3>     tab_open 3
map <a-4>     tab_open 4
map <a-5>     tab_open 5
map <a-6>     tab_open 6
map <a-7>     tab_open 7
map <a-8>     tab_open 8
map <a-9>     tab_open 9

# }}}2

# Renommer {{{2

map cw eval fm.execute_console("bulkrename") if fm.thisdir.marked_items else fm.open_console("rename ")

map <a-a>  rename_append
map A  eval fm.open_console('rename ' + fm.thisfile.relative_path)
map I  eval fm.open_console('rename ' + fm.thisfile.relative_path, position=7)

# }}}2

# Copier, Coller, Supprimer {{{2

map yy copy
map uy uncut
map ya copy mode=add
map yr copy mode=remove

map pp paste
map po paste overwrite=True
map pP paste append=True
map pO paste overwrite=True append=True
map pl paste_symlink relative=False
map pL paste_symlink relative=True
map phl paste_hardlink
map pht paste_hardlinked_subtree

map dd cut
map ud uncut
map da cut mode=add
map dr cut mode=remove

map <DELETE>   shell trash-put %s
map DD shell trash-put %s
map DR shell trash-restore

map <INSERT> console touch%space
map i console touch%space

map a console mkdir%space

map yp shell -f echo -n %%d/%%f | xsel -i; xsel -o | xsel -i -b
map yf shell -f echo -n %%f     | xsel -i; xsel -o | xsel -i -b
map yd shell -f echo -n %%d     | xsel -i; xsel -o | xsel -i -b

# }}}2

# Autres opérations sur fichiers {{{2

map du shell -p du --max-depth=1 -h --apparent-size
map dU shell -p du --max-depth=1 -h --apparent-size | sort -rh

map cm  chmod

eval for arg in "rwxXst": cmd("map +u{0} shell -f chmod u+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +g{0} shell -f chmod g+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +o{0} shell -f chmod o+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +a{0} shell -f chmod a+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +{0}  shell -f chmod u+{0} %s".format(arg))

eval for arg in "rwxXst": cmd("map -u{0} shell -f chmod u-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -g{0} shell -f chmod g-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -o{0} shell -f chmod o-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -a{0} shell -f chmod a-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -{0}  shell -f chmod u-{0} %s".format(arg))

# }}}2

# Shell {{{2

map !  console shell%space
map °  console -p6 shell  %%s
map <a-$> shell $SHELL

# }}}2

# Modification d’options {{{2

map zi    toggle_option flushinput
map zm    toggle_option mouse_enabled

# }}}2

# Divers {{{2

# Temporary workarounds

map dgg eval fm.cut(dirarg=dict(to=0), narg=quantifier)
map dG  eval fm.cut(dirarg=dict(to=-1), narg=quantifier)
map dj  eval fm.cut(dirarg=dict(down=1), narg=quantifier)
map dk  eval fm.cut(dirarg=dict(up=1), narg=quantifier)
map ygg eval fm.copy(dirarg=dict(to=0), narg=quantifier)
map yG  eval fm.copy(dirarg=dict(to=-1), narg=quantifier)
map yj  eval fm.copy(dirarg=dict(down=1), narg=quantifier)
map yk  eval fm.copy(dirarg=dict(up=1), narg=quantifier)

# }}}2

# }}}1

# Mappings pour la console {{{1

# Note: Unmapped keys are passed directly to the console.

cmap <ESC>   eval fm.ui.console.close()
cmap <CR>    eval fm.ui.console.execute()

copycmap <ESC> <C-c>
copycmap <CR>  <C-j>

cmap <C-l>   redraw_window

cmap <tab>   eval fm.ui.console.tab()
cmap <s-tab> eval fm.ui.console.tab(-1)

cmap <up>    eval fm.ui.console.history_move(-1)
cmap <down>  eval fm.ui.console.history_move(1)

copycmap <a-p> <up>
copycmap <a-n> <down>

cmap <left>  eval fm.ui.console.move(left=1)
cmap <right> eval fm.ui.console.move(right=1)

copycmap <C-B> <left>
copycmap <C-F> <right>

cmap <home>  eval fm.ui.console.move(right=0, absolute=True)
cmap <end>   eval fm.ui.console.move(right=-1, absolute=True)

copycmap <home> <C-A>
copycmap <end> <C-E>

# Line Editing

cmap <backspace>  eval fm.ui.console.delete(-1)
cmap <delete>     eval fm.ui.console.delete(0)

copycmap <backspace> <C-h>
copycmap <delete>    <C-d>

cmap <C-w>        eval fm.ui.console.delete_word()
cmap <A-d>        eval fm.ui.console.delete_word(backward=False)
cmap <C-k>        eval fm.ui.console.delete_rest(1)
cmap <C-u>        eval fm.ui.console.delete_rest(-1)
cmap <C-y>        eval fm.ui.console.paste()

# This special expression allows typing in numerals:

cmap <allow_quantifiers> false

# Note: There are multiple ways to express backspaces.  <backspace> (code 263)
# and <backspace2> (code 127).  To be sure, use both.

copycmap <backspace> <backspace2>

# }}}1

# Mappings pour le pager {{{1

pmap  <down>      pager_move  down=1
pmap  <up>        pager_move  up=1

pmap  <left>      pager_move  left=4
pmap  <right>     pager_move  right=4

pmap  d           pager_move  down=0.5  pages=True
pmap  u           pager_move  up=0.5    pages=True

pmap  <C-f>       pager_move  down=1.0  pages=True
pmap  <C-b>       pager_move  up=1.0    pages=True
pmap  <space>     pager_move  down=1.0  pages=True
pmap  b           pager_move  up=1.0    pages=True
pmap  <pagedown>  pager_move  down=1.0  pages=True
pmap  <pageup>    pager_move  up=1.0    pages=True

pmap  g           pager_move  to=0
pmap  G           pager_move  to=-1
pmap  <home>      pager_move  to=0
pmap  <end>       pager_move  to=-1

copypmap <UP>       k  <C-p>
copypmap <DOWN>     j  <C-n> <CR>
copypmap <LEFT>     h
copypmap <RIGHT>    l
copypmap <HOME>     g
copypmap <END>      G
copypmap <C-d>      d
copypmap <C-u>      u
copypmap <PAGEDOWN> n  f  <C-F>  <Space>
copypmap <PAGEUP>   p  b  <C-B>

pmap     <C-l> redraw_window
pmap     <ESC> pager_close
copypmap <ESC> q Q i <F3>
pmap E      edit_file

# }}}1

# Mappings pour le taskview {{{1

tmap q taskview_close
copytmap q <ESC> <C-c>

tmap <C-l> redraw_window

tmap <up>        taskview_move up=1
tmap <down>      taskview_move down=1
tmap <home>      taskview_move to=0
tmap <end>       taskview_move to=-1
tmap <pagedown>  taskview_move down=1.0  pages=True
tmap <pageup>    taskview_move up=1.0    pages=True
tmap <C-d>       taskview_move down=0.5  pages=True
tmap <C-u>       taskview_move up=0.5    pages=True

copytmap <UP>       k  <C-p>
copytmap <DOWN>     j  <C-n> <CR>
copytmap <HOME>     g
copytmap <END>      G
copytmap <C-u>      u
copytmap <PAGEDOWN> n  f  <C-F>  <Space>
copytmap <PAGEUP>   p  b  <C-B>

# Changing priority and deleting tasks

tmap J          eval -q fm.ui.taskview.task_move(-1)
tmap K          eval -q fm.ui.taskview.task_move(0)
tmap dd         eval -q fm.ui.taskview.task_remove()

tmap <pagedown> eval -q fm.ui.taskview.task_move(-1)
tmap <pageup>   eval -q fm.ui.taskview.task_move(0)
tmap <delete>   eval -q fm.ui.taskview.task_remove()

# }}}1
