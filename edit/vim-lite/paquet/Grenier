" vim: set ft=vim :
" vim: set foldlevel=10 :

" {{{ Processus asynchrones

NeoBundle 'Shougo/vimproc.vim', {
	\ 'build' : {
	\     'windows' : 'make -f make_mingw32.mak',
	\     'cygwin' : 'make -f make_cygwin.mak',
	\     'mac' : 'make -f make_mac.mak',
	\     'unix' : 'make clean ; make -f make_unix.mak',
	\    },
	\ }

" NeoBundle 'pydave/AsyncCommand'
" NeoBundle 'MarcWeber/vim-addon-async'

" NeoBundleLazy 'tpope/vim-dispatch', {
" 	\ 'autoload' : { 'commands' : 'Dispatch' }
" 	\ }

" }}}

"  {{{ Submode (kana/vim-submode)
" ------------------------------------------------------------------------

let g:submode_timeout = 0
"let g:submode_timeout = 12000

call submode#enter_with('undo/redo', 'n', '', 'g-', 'g-')
call submode#enter_with('undo/redo', 'n', '', 'g+', 'g+')
call submode#leave_with('undo/redo', 'n', '', '<Esc>')
call submode#map('undo/redo', 'n', '', '-', 'g-')
call submode#map('undo/redo', 'n', '', '+', 'g+')

call submode#enter_with('change-list', 'n', '', 'g;', 'g;')
call submode#enter_with('change-list', 'n', '', 'g,', 'g,')
call submode#leave_with('change-list', 'n', '', '<Esc>')
call submode#map('change-list', 'n', '', ';', 'g;')
call submode#map('change-list', 'n', '', ',', 'g,')

" }}}

" Pour LineJuggler

NeoBundle 'vim-scripts/ingo-library'


NeoBundle 'vim-scripts/LineJuggler'
NeoBundle 'vim-scripts/LineJugglerCommands'

" {{{ Librairies

" Pour LineJuggler

NeoBundle 'vim-scripts/ingo-library'

" Pour cmdalias

NeoBundle 'coot/CRDispatcher'

" }}}

" {{{ Async

NeoBundle 'Shougo/vimproc.vim', {
	\ 'build' : {
	\     'windows' : 'make -f make_mingw32.mak',
	\     'cygwin' : 'make -f make_cygwin.mak',
	\     'mac' : 'make -f make_mac.mak',
	\     'unix' : 'make clean ; make -f make_unix.mak',
	\    },
	\ }

NeoBundle 'skywind3000/asyncrun.vim'

" }}}

" ------------

" {{{ Plugins

NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'Shougo/neoyank.vim'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'SirVer/ultisnips'
NeoBundle 'coot/cmdalias_vim'
NeoBundle 'drmikehenry/vim-fixkey'
NeoBundle 'jiangmiao/auto-pairs'
NeoBundle 'nishigori/increment-activator'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'sk1418/QFGrep'
NeoBundle 'stefandtw/quickfix-reflector.vim'
NeoBundle 'szw/vim-ctrlspace'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'vim-scripts/DeleteTrailingWhitespace'
NeoBundle 'vim-scripts/LineJuggler'
NeoBundle 'vim-scripts/LineJugglerCommands'

" }}}

	au VimEnter * CmdAlias nbu Unite\ -log\ neobundle/update
	au VimEnter * CmdAlias nbi NeoBundleInstall
	au VimEnter * CmdAlias nbx NeoBundleClean

Plug 'chriskempson/base16-vim'

" Thème {{{1

" Base 16 {{{2

" if filereadable(expand("~/.vimrc_background"))
"   let base16colorspace=256
"   source ~/.vimrc_background
" endif

" }}}2

" }}}1

"  {{{ Submode (kana/vim-submode)
" ------------------------------------------------------------------------

let g:submode_timeout = 0
let g:submode_timeoutlen = 10000

call submode#enter_with('undo/redo', 'n', '', 'g-', 'g-')
call submode#enter_with('undo/redo', 'n', '', 'g+', 'g+')
call submode#leave_with('undo/redo', 'n', '', '<Esc>')
call submode#map('undo/redo', 'n', '', '-', 'g-')
call submode#map('undo/redo', 'n', '', '+', 'g+')

call submode#enter_with('change-list', 'n', '', 'g;', 'g;')
call submode#enter_with('change-list', 'n', '', 'g,', 'g,')
call submode#leave_with('change-list', 'n', '', '<Esc>')
call submode#map('change-list', 'n', '', ';', 'g;')
call submode#map('change-list', 'n', '', ',', 'g,')

" }}}

" Sneak (justinmk/vim-sneak) {{{2

" 2-character Sneak (default)

nmap <D-;> <Plug>Sneak_s
nmap <D-,> <Plug>Sneak_S

" visual-mode

xmap <D-;> <Plug>Sneak_s
xmap <D-,> <Plug>Sneak_S

" operator-pending-mode

omap <D-;> <Plug>Sneak_s
omap <D-,> <Plug>Sneak_S

" explicit repeat (as opposed to implicit 'clever-s' repeat)

"map s <Plug>SneakNext
"map S <Plug>SneakPrevious

" 1-character enhanced 'f'

" nmap <expr> ; sneak#is_sneaking() ? '<Plug>SneakNext' : '<Plug>Sneak_s'
" nmap <expr> , sneak#is_sneaking() ? '<Plug>SneakPrevious' : '<Plug>Sneak_S'

" visual-mode

" xmap <expr> ; sneak#is_sneaking() ? '<Plug>SneakNext' : '<Plug>Sneak_s'
" xmap <expr> , sneak#is_sneaking() ? '<Plug>SneakPrevious' : '<Plug>Sneak_S'

" operator-pending-mode

" omap <expr> ; sneak#is_sneaking() ? '<Plug>SneakNext' : '<Plug>Sneak_s'
" omap <expr> , sneak#is_sneaking() ? '<Plug>SneakPrevious' : '<Plug>Sneak_S'

nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F

xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F

omap f <Plug>Sneak_f
omap F <Plug>Sneak_F

" 1-character enhanced 't'

nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T

" visual-mode

xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T

" operator-pending-mode

omap t <Plug>Sneak_t
omap T <Plug>Sneak_T

" force streak-mode always

"nmap <D-;> <Plug>(SneakStreak)
"nmap <D-,> <Plug>(SneakStreakBackward)

nmap <expr> ; sneak#is_sneaking() ? '<Plug>SneakNext' : ';'
nmap <expr> , sneak#is_sneaking() ? '<Plug>SneakPrevious' : ','

let g:sneak#prompt = 'sneak [char-char] > '

let g:sneak#f_reset      = 0
let g:sneak#s_next       = 1
let g:sneak#absolute_dir = 0
let g:sneak#textobject_z = 1
let g:sneak#use_ic_scs   = 1

let g:sneak#map_netrw    = 1

let g:sneak#streak       = 1
let g:sneak#streak_esc = "\<space>"

" }}}2

command! PackUpdate packadd minpac | source ~/racine/config/edit/vim/paquet/minpac.vim | call minpac#update()
command! PackClean  packadd minpac | source ~/racine/config/edit/vim/paquet/minpac.vim | call minpac#clean()

" Denite {{{2

" Mappings {{{3

nnoremap é          :<c-u>Denite line<cr>

nnoremap §          :<c-u>Denite unite:outline:folding<cr>

nnoremap °          :<c-u>Denite -mode=normal buffer<cr>

nnoremap è          :<c-u>Denite -mode=normal jump<cr>

nnoremap ù          :<c-u>Denite file_mru<cr>

nnoremap µ          :<c-u>Denite -root-markers=.racine-projet file_rec<cr>
nnoremap <s-µ>      :<c-u>Denite -root-markers=.racine-projet file_rec<cr>

" nnoremap µ          :<c-u>DeniteProjectDir -root-markers=.racine-projet file_rec<cr>
" nnoremap <s-µ>      :<c-u>DeniteProjectDir -root-markers=.racine-projet file_rec<cr>

" nnoremap µ          :<c-u>DeniteBufferDir file_rec<cr>
" nnoremap <s-µ>      :<c-u>DeniteBufferDir file_rec<cr>

nnoremap £          :<c-u>Denite tag<cr>

" }}}3

" Mappings en mode normal dans denite {{{3

call denite#custom#map(
	  \ 'normal',
	  \ '<Esc>',
	  \ '<denite:enter_mode:normal>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal',
	  \ 'i',
	  \ '<denite:enter_mode:insert>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal',
	  \ '<Insert>',
	  \ '<denite:enter_mode:insert>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal',
	  \ '<Up>',
	  \ '<denite:move_to_previous_line>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal',
	  \ '<Down>',
	  \ '<denite:move_to_next_line>',
	  \ 'noremap'
	  \)

" }}}3

" Mappings en mode insertion dans denite {{{3

call denite#custom#map(
	  \ 'insert',
	  \ '<Esc>',
	  \ '<denite:enter_mode:normal>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<Insert>',
	  \ '<denite:enter_mode:insert>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<Up>',
	  \ '<denite:move_to_previous_line>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<Down>',
	  \ '<denite:move_to_next_line>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<C-P>',
	  \ '<denite:move_to_previous_line>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<C-N>',
	  \ '<denite:move_to_next_line>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<M-p>',
	  \ '<denite:assign_previous_matched_text>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<M-n>',
	  \ '<denite:assign_next_matched_text>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<S-Up>',
	  \ '<denite:assign_previous_text>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<S-Down>',
	  \ '<denite:assign_next_text>',
	  \ 'noremap'
	  \)

" }}}3

" Options {{{3

call denite#custom#option('default', {
	  \ 'highlight_mode_normal' : 'Visual',
	  \ 'highlight_mode_insert' : 'Visual',
	  \ 'highlight_matched_char' : 'false',
	  \ 'highlight_matched_range' : 'false',
	  \ })

call denite#custom#source(
\ 'file_mru', 'matchers', ['matcher_substring'])

" }}}3

" }}}2

" Easy align (junegunn/vim-easy-align) {{{2

" Start interactive EasyAlign in visual mode (e.g. vipga)

xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)

nmap ga <Plug>(EasyAlign)

" Options

let g:easy_align_ignores = ['Comment', 'String']

" }}}2

" Tabular (godlygeek/tabular) {{{2

nnoremap <s-tab> :Tabularize /
vnoremap <s-tab> :Tabularize /

" }}}2

" Table-mode (dhruvasagar/vim-table-mode) {{{2

let g:table_mode_always_active = 0

let g:table_mode_border = 1

" Mappings {{{3

nnoremap <bar> :TableModeToggle<cr>

let g:table_mode_map_prefix = '<C-F11><bar>'

nnoremap <C-F11><bar>S :TableSort<cr>

let g:table_mode_realign_map = '<C-F11><bar>r'
let g:table_mode_delete_row_map = '<C-F11><bar>dd'
let g:table_mode_delete_column_map = '<C-F11><bar>dc'
let g:table_mode_add_formula_map = '<C-F11><bar>fa'
let g:table_mode_eval_formula_map = '<C-F11><bar>fe'
let g:table_mode_echo_cell_map = '<C-F11><bar>?'
let g:table_mode_sort_map = '<C-F11><bar>s'

let g:table_mode_motion_up_map = '{<Bar>'
let g:table_mode_motion_down_map = '}<Bar>'
let g:table_mode_motion_left_map = '[<Bar>'
let g:table_mode_motion_right_map = ']<Bar>'
let g:table_mode_cell_text_object_a_map = 'a<Bar>'
let g:table_mode_cell_text_object_i_map = 'i<Bar>'

" }}}3

" Caractères {{{3

let g:table_mode_separator     = '|'
let g:table_mode_corner        = '+'
let g:table_mode_corner_corner = '|'
let g:table_mode_fillchar      = '-'
let g:table_mode_delimiter     = ','
let g:table_mode_align_char    = ':'

" }}}3

" }}}2

" Submode {{{2

let g:submode_timeout = 0
"let g:submode_timeout = 12000

" }}}2

"  Submode (kana/vim-submode) {{{2

call submode#enter_with('undo/redo', 'n', '', 'g-', 'g-')
call submode#enter_with('undo/redo', 'n', '', 'g+', 'g+')
call submode#leave_with('undo/redo', 'n', '', '<Esc>')
call submode#map('undo/redo', 'n', '', '-', 'g-')
call submode#map('undo/redo', 'n', '', '+', 'g+')

call submode#enter_with('change-list', 'n', '', 'g;', 'g;')
call submode#enter_with('change-list', 'n', '', 'g,', 'g,')
call submode#leave_with('change-list', 'n', '', '<Esc>')
call submode#map('change-list', 'n', '', ';', 'g;')
call submode#map('change-list', 'n', '', ',', 'g,')

" }}}2

" Exchange (tommcdo/vim-exchange) {{{2

let g:exchange_no_mappings=1

nmap cx <Plug>(Exchange)
vmap X <Plug>(Exchange)
nmap cxc <Plug>(ExchangeClear)
nmap cxx <Plug>(ExchangeLine)

" }}}2

" Complétion {{{1

" Deoplete {{{2

call deoplete#enable()

" }}}2

" }}}1

" Mappings pour tous les modes {{{3

call denite#custom#map(
	  \ '_',
	  \ '<C-M>',
	  \ '<denite:do_action:default>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<CR>',
	  \ '<denite:do_action:default>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<C-L>',
	  \ '<denite:redraw>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<C-Z>',
	  \ '<denite:suspend>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<Tab>',
	  \ '<denite:choose_action>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<Left>',
	  \ '<denite:jump_to_previous_source>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<Right>',
	  \ '<denite:jump_to_next_source>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<M-p>',
	  \ '<denite:assign_previous_matched_text>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<M-n>',
	  \ '<denite:assign_next_matched_text>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<S-Up>',
	  \ '<denite:assign_previous_text>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<S-Down>',
	  \ '<denite:assign_next_text>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<Home>',
	  \ '<denite:move_to_first_line>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<End>',
	  \ '<denite:move_to_last_line>',
	  \ 'noremap'
	  \)

" }}}3

" Mappings multi-modes {{{3

call denite#custom#map(
	  \ 'normal,insert',
	  \ '<Up>',
	  \ '<denite:move_to_previous_line>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal,insert',
	  \ '<Down>',
	  \ '<denite:move_to_next_line>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal,insert',
	  \ '<PageUp>',
	  \ '<denite:scroll_page_backwards>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal,insert',
	  \ '<PageDown>',
	  \ '<denite:scroll_page_forwards>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal,insert',
	  \ '<C-P>',
	  \ '<denite:move_to_previous_line>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal,insert',
	  \ '<C-N>',
	  \ '<denite:move_to_next_line>',
	  \ 'noremap'
	  \)

" }}}3

" Mappings en mode normal dans denite {{{3

call denite#custom#map(
	  \ 'normal',
	  \ '<C-R>',
	  \ '<denite:restart>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal',
	  \ '<Esc>',
	  \ '<denite:enter_mode:normal>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal',
	  \ 'i',
	  \ '<denite:enter_mode:insert>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal',
	  \ '<Insert>',
	  \ '<denite:enter_mode:insert>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal',
	  \ '<Space>',
	  \ '<denite:toggle_select_down>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal',
	  \ '<BackSpace>',
	  \ '<denite:change_path>',
	  \ 'noremap'
	  \)

" call denite#custom#map(
" 	  \ 'normal',
" 	  \ '<BackSpace>',
" 	  \ '<denite:move_up_path>',
" 	  \ 'noremap'
" 	  \)

call denite#custom#map(
	  \ 'normal',
	  \ 'h',
	  \ '<denite:jump_to_previous_source>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal',
	  \ 'l',
	  \ '<denite:jump_to_next_source>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal',
	  \ 'm',
	  \ '<denite:quick_move>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal',
	  \ 's',
	  \ '<denite:do_action:split>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal',
	  \ 'v',
	  \ '<denite:do_action:vsplit>',
	  \ 'noremap'
	  \)

" }}}3

" Mappings en mode insertion dans denite {{{3

call denite#custom#map(
	  \ 'insert',
	  \ '<C-J>',
	  \ '<denite:input_command_line>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<Esc>',
	  \ '<denite:enter_mode:normal>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<Insert>',
	  \ '<denite:enter_mode:insert>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<Left>',
	  \ '<denite:jump_to_previous_source>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<Right>',
	  \ '<denite:jump_to_next_source>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<S-Space>',
	  \ '<denite:toggle_select_down>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<S-BackSpace>',
	  \ '<denite:move_up_path>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<M-f>',
	  \ '<denite:move_caret_to_one_word_right>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<M-b>',
	  \ '<denite:move_caret_to_one_word_left>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<C-A>',
	  \ '<denite:move_caret_to_head>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<C-E>',
	  \ '<denite:move_caret_to_tail>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<C-D>',
	  \ '<denite:delete_char_under_caret>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<C-H>',
	  \ '<denite:delete_char_before_caret>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<C-W>',
	  \ '<denite:delete_word_before_caret>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<M-d>',
	  \ '<denite:delete_word_after_caret>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<C-U>',
	  \ '<denite:delete_entire_text>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<M-s>',
	  \ '<denite:do_action:split>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<M-v>',
	  \ '<denite:do_action:vsplit>',
	  \ 'noremap'
	  \)

" }}}3

"  YankRing (YankRing.vim) {{{2

" Mappings {{{3

" Map exceptionnel

nnoremap <silent> ç :<C-U>YRShow<cr>

" Maps ordinaires

nnoremap <silent> <C-F11>y :<C-U>YRSearch<cr>

nnoremap <silent> <C-F11><C-F11>y :YRToggle<cr>

let g:yankring_replace_n_pkey = '<C-p>'
let g:yankring_replace_n_nkey = '<C-n>'

" let g:yankring_replace_n_pkey = '<m-y>'
" let g:yankring_replace_n_nkey = '<m-s-y>'

" Y, pour compléter C et D

function! YRRunAfterMaps()
	nnoremap Y   :<C-U>YRYankCount 'y$'<CR>
endfunction

" }}}3

" Options {{{3

let g:yankring_max_history = 420

let g:yankring_min_element_length = 2
let g:yankring_max_element_length = 90000

let g:yankring_warn_on_truncate = 1

let g:yankring_window_use_separate = 1
let g:yankring_window_auto_close   = 1
let g:yankring_window_use_horiz    = 1
let g:yankring_window_use_bottom = 1
let g:yankring_window_height = 25

let g:yankring_max_display = 120

" Pas besoin du menu graphique de gvim
let g:yankring_default_menu_mode = 0

let g:yankring_persist = 1
let g:yankring_share_between_instances = 1

let g:yankring_history_dir = $HOME . '/racine/plugin/data/yankring-vim'
let g:yankring_history_file = 'yankring-hist'

let g:yankring_ignore_duplicate = 1

let g:yankring_ignore_operator = 'g~ gu gU ! = gq g? > < zf g@ @'
let g:yankring_map_dot = 0
let g:yankring_dot_repeat_yank = 0
let g:yankring_paste_using_g = 1

" Pris en charge par PrevInsertComplete
let g:yankring_record_insert = 0

" Désactivé car ralentit x,X, etc
let g:yankring_manage_numbered_reg = 0

let g:yankring_paste_check_default_buffer = 1
let g:yankring_clipboard_monitor = 1
let g:yankring_manual_clipboard_check = 1
let g:yankring_paste_check_default_register = 1

" }}}3

" }}}2

" Cmdalias (coot/cmdalias_vim) {{{2

augroup Cmdalias

	au!

	au VimEnter * CmdAlias ali\%[as] CmdAlias

	au VimEnter * CmdAlias h\%[elp] tab\ help

augroup END

" }}}2

" Multiple cursors {{{2

let g:multi_cursor_use_default_mapping=0

let g:multi_cursor_start_word_key      = '<D-n>'
let g:multi_cursor_select_all_word_key = '<S-D-n>'
let g:multi_cursor_start_key           = 'g<D-n>'
let g:multi_cursor_select_all_key      = 'g<S-D-n>'
let g:multi_cursor_next_key            = '<D-n>'
let g:multi_cursor_prev_key            = '<D-p>'
let g:multi_cursor_skip_key            = '<D-x>'
let g:multi_cursor_quit_key            = '<Esc>'

let g:multi_cursor_exit_from_visual_mode = 0
let g:multi_cursor_exit_from_insert_mode = 0

" }}}2

" Neoyank (Shougo/neoyank.vim) {{{2

nnoremap ç :<c-u>Denite neoyank<cr>

let g:neoyank#limit = 4200
let g:neoyank#length = 10000

let g:neoyank#save_registers = [
			\'"',
			\'+',
			\'*',
			\'-',
			\'.',
			\':',
			\'/',
			\'%',
			\'0',
			\'1',
			\'2',
			\'3',
			\'4',
			\'5',
			\'6',
			\'7',
			\'8',
			\'9',
			\]

let g:neoyank#file = $HOME . '/racine/plugin/data/unite/neoyank/history-neovim'

autocmd BufWinEnter \(*.asc\|*.gpg\) let g:neoyank_disable_write = 1

" }}}2

" {{{ Unite

augroup ExtensionUnite

	au!

	au FileType unite nmap <buffer> <kenter> <Plug>(unite_do_default_action)
	au FileType unite imap <buffer> <kenter> <Plug>(unite_do_default_action)

	au FileType unite nmap <buffer> <C-z>    <Plug>(unite_toggle_transpose_window)
	au FileType unite imap <buffer> <C-z>    <Plug>(unite_toggle_transpose_window)

" 	au FileType unite nmap <buffer> <PageUp>     <Plug>(unite_narrowing_input_history)
" 	au FileType unite imap <buffer> <PageUp>     <Plug>(unite_narrowing_input_history)
"
" 	au FileType unite nmap <buffer> <PageDown>     <Plug>(unite_narrowing_input_history)
" 	au FileType unite imap <buffer> <PageDown>     <Plug>(unite_narrowing_input_history)

augroup END

" }}}

" Unite {{{2

" Données {{{3

let g:unite_data_directory = $HOME . '/racine/plugin/data/unite'

let g:unite_source_file_mru_long_limit = 12743
let g:unite_source_mru_update_interval = 900

let g:unite_source_directory_mru_long_limit = 3600

" }}}3

" Répertoires {{{3

let g:unite_kind_openable_cd_command = 'cd'
let g:unite_kind_openable_lcd_command = 'lcd'

" }}}3

" Présentation {{{3

let g:unite_split_rule = 'dynamicbottom'

let g:unite_enable_split_vertically = 0

let g:unite_prompt = 'unite> '

" }}}3

" Copie & Collage {{{3

let g:unite_source_history_yank_enable = 1
let g:unite_source_history_yank_save_clipboard = 1

let g:unite_source_history_yank_limit = 543

" }}}3

" Recherche grep {{{3

let g:unite_source_grep_max_candidates = 570

let g:unite_source_grep_command = 'grep'
let g:unite_source_grep_default_opts = '--ignore-case --with-filename --line-number --context=0'
let g:unite_source_grep_recursive_opt = '-r'

" let g:unite_source_grep_command = 'ack'
" let g:unite_source_grep_default_opts = '--no-heading --no-color --ignore-case --all --with-filename --context=0'
" let g:unite_source_grep_recursive_opt = ''

" let g:unite_source_grep_command = 'ag'
" let g:unite_source_grep_default_opts = '--nocolor --nogroup --hidden --ignore-case -C 2'
" let g:unite_source_grep_recursive_opt = ''

let g:unite_source_find_max_candidates = 570

" }}}3

" }}}2

" Unite & UltiSnips {{{4

function! UltiSnipsCallUnite()
	Unite -start-insert -winheight=100 -immediately -no-empty ultisnips
	return ''
endfunction

inoremap <silent> <tab> <C-R>=(pumvisible()? "\<LT>C-E>":"")<CR><C-R>=UltiSnipsCallUnite()<CR>

"nnoremap <silent> ... a<C-R>=(pumvisible()? "\<LT>C-E>":"")<CR><C-R>=UltiSnipsCallUnite()<CR>

" }}}4

" Unite-outline (Shougo/unite-outline) {{{2

" Pour compatibilité, variable dépréciée dans unite
" Réglé
"let g:unite_abbr_highlight = 'Normal'

" }}}2

" FZF (junegunn/fzf.vim) {{{2

" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
let g:fzf_layout = { 'down': '~40%' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/racine/hist/fzf'

function! s:fzf_statusline()
  " Override statusline as you like
  highlight fzf1 ctermfg=0 ctermbg=3
  highlight fzf2 ctermfg=0 ctermbg=3
  highlight fzf3 ctermfg=0 ctermbg=3
  setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
endfunction

autocmd! User FzfStatusLine call <SID>fzf_statusline()

" }}}2

" CtrlSpace (szw/vim-ctrlspace) {{{2

" Mappings {{{3

let g:CtrlSpaceSetDefaultMapping = 1

let g:CtrlSpaceDefaultMappingKey = "<C-Space>"

let g:CtrlSpaceUseMouseAndArrowsInTerm = 1

let g:CtrlSpaceUseUnicode = 0

nnoremap <c-space> :CtrlSpace<cr>

" Ne marche pas
" nnoremap <s-pageUp> :CtrlSpaceGoUp<cr>
" nnoremap <s-pageDown> :CtrlSpaceGoDown<cr>

" }}}3

" Données {{{3

let g:CtrlSpaceCacheDir = $HOME . '/racine/plugin/data/ctrlspace'

let g:CtrlSpaceProjectRootMarkers = ['.racine-projet']

let g:CtrlSpaceIgnoredFiles = '\v(tmp|temp)[\/]'

let g:CtrlSpaceSearchResonators = ['.', '/', '\', '_', '-']

" }}}3

" Limites {{{3

let g:CtrlSpaceMaxFiles = 500
let g:CtrlSpaceMaxSearchResults = 200

let g:CtrlSpaceSearchTiming = [50, 500]

" }}}3

" Recherche de fichiers {{{3

let g:CtrlSpaceFileEngine = "auto"

if executable("ag")
    let g:CtrlSpaceGlobCommand = 'ag -l --nocolor -g ""'
endif

" }}}3

" Présentation {{{3

let g:CtrlSpaceUseHorizontalSplits = 1

let g:CtrlSpaceHeight = 1
let g:CtrlSpaceMaxHeight = 0

let g:CtrlSpaceShowUnnamed = 2

let g:CtrlSpaceUseTabline = 0

let g:CtrlSpaceUnicodeFont = 1

" }}}3

" Workspaces {{{3

let g:CtrlSpaceSaveWorkspaceOnExit = 0

let g:CtrlSpaceSaveWorkspaceOnSwitch = 0

let g:CtrlSpaceLoadLastWorkspaceOnStart = 0

" }}}3

" Options {{{3

let g:CtrlSpaceSaveWorkspaceOnExit = 0
let g:CtrlSpaceLoadLastWorkspaceOnStart = 0

let g:CtrlSpaceCyclicList = 2
let g:CtrlSpaceMaxJumps = 120
let g:CtrlSpaceMaxSearches = 120
let g:CtrlSpaceDefaultSortOrder = 1
let g:CtrlSpaceUseMouseAndArrows = 1

" }}}3

" }}}2

" Wheel {{{2

" Init
let g:wheel_config={}
" Auto read torus file on startup if > 0
let g:wheel_config.autoread = 1
" Auto write torus file on exit if > 0
let g:wheel_config.autowrite = 1
" The file where toruses and circles will be stored and read
let g:wheel_config.file = '~/racine/plugin/data/wheel/roue.vim'
" Number of backups for the wheel file
let g:wheel_config.backups = 7
" The bigger it is, the more mappings available
let g:wheel_config.mappings = 10
" Prefix for mappings
let g:wheel_config.prefix = '<m-w>'
" Auto cd to project root if > 0
let g:wheel_config.cd_project = 1
" Marker of project root
"let g:wheel_config.project_markers = '.git'
"let g:wheel_config.project_markers = '.racine-projet'
" List of markers
" The project dir is found as soon as one marker is found in it
let g:wheel_config.project_markers = ['.git', '.racine-projet']
" Maximum number of elements in history
let g:wheel_config.max_history = 70

"let g:wheel_config.debug = 1

nnoremap <D-µ> :call wheel#vortex#switch_torus()<cr>

" Executed after jumping to a location
"autocmd User WheelAfterJump norm zMzx

" }}}2

" }}}1

" Filtres {{{1

"  Narrow region (chrisbra/NrrwRgn) {{{2

nnoremap à :NarrowRegion<cr>

vnoremap à :NarrowRegion<cr>

"xmap à <Plug>NrrwrgnDo

nmap _ <Plug>NrrwrgnWinIncr

let g:nrrw_rgn_vert = 0

let g:nrrw_rgn_wdth = 20
let g:nrrw_rgn_incr = 10

let g:nrrw_topbot_leftright = 'aboveleft'
"let g:nrrw_topbot_leftright = 'botright'

let g:nrrw_rgn_nohl = 0

let g:nrrw_rgn_update_orig_win = 1

" }}}2

" }}}1

" Historique d’undo {{{1

" Undotree (mbbill/undotree) {{{2

nnoremap <s-bs> :UndotreeToggle<cr>

" }}}2

" }}}1

" Liens {{{1

"  Utl (utl.vim) {{{2

nnoremap gf :Utl<cr>

let g:utl_cfg_hdl_scm_http = "!qutebrowser '%u#%f' &"

" }}}2

" }}}1

" Ligne de commande (:ex mode) {{{1

" CmdlineComplete (CmdlineComplete) {{{2

cmap <m-right> <Plug>CmdlineCompleteBackward
cmap <m-left> <Plug>CmdlineCompleteForward

cmap <m-s-t> <Plug>CmdlineCompleteBackward
cmap <m-t> <Plug>CmdlineCompleteForward

" }}}2

" }}}1

" Modes {{{1

" Cmdmatch (majkinetor/

unite-cmdmatch) {{{2

cmap <c-o> <Plug>(unite_cmdmatch_complete)

" }}}2

"  Unite (Shougo/unite.vim) {{{2

" Mappings {{{3

nnoremap <F11>u       :<c-u>Unite -prompt-direction=top<space>

nnoremap <S-F11>u    :<c-u>Unite -prompt-direction=top source<cr>

"nnoremap z=         :<c-u>Unite -winheight=15 spell_suggest<cr>

"nnoremap é          :<c-u>Unite -start-insert -prompt-direction=top line<cr>

"nnoremap §          :<c-u>Unite -start-insert -prompt-direction=top outline:folding<cr>

"nnoremap °          :<c-u>Unite -start-insert -prompt-direction=top buffer<cr>

"nnoremap è          :<c-u>Unite -prompt-direction=top jump<cr>

"nnoremap ù          :<c-u>Unite -start-insert -prompt-direction=top neomru/file buffer<cr>
"nnoremap µ          :<c-u>Unite -start-insert -prompt-direction=top file_rec/async<cr>
"nnoremap <s-µ>      :<c-u>Unite -start-insert -prompt-direction=top file_rec/async<cr>

"nnoremap £          :<c-u>Unite -start-insert -prompt-direction=top tag<cr>

" nnoremap <C-F3>b      :<c-u>Unite -prompt-direction=top buffer<cr>
" nnoremap <C-F3>B      :<c-u>Unite -prompt-direction=top bookmark<cr>
" nnoremap <C-F3>c      :<c-u>Unite -prompt-direction=top command<cr>
" nnoremap <C-F3>d      :<c-u>Unite -prompt-direction=top directory<cr>
" nnoremap <C-F3>f      :<c-u>Unite -prompt-direction=top file_rec/async<cr>
" nnoremap <C-F3>g      :<c-u>Unite -prompt-direction=top grep<cr>
" nnoremap <C-F3>m      :<c-u>Unite -prompt-direction=top mapping<cr>
" nnoremap <C-F3>M      :<c-u>Unite -no-split output:message<cr>
" nnoremap <C-F3>h      :<c-u>Unite -prompt-direction=top help<cr>
" nnoremap <C-F3>l      :<c-u>Unite -prompt-direction=top line<cr>
" nnoremap <C-F3>q      :<c-u>Unite -no-quit -prompt-direction=top quickfix<cr>
" nnoremap <C-F3>r      :<c-u>Unite -prompt-direction=top file_mru<cr>
" nnoremap <C-F3>t      :<c-u>Unite -prompt-direction=top tag<cr>
" nnoremap <C-F3>T      :<c-u>Unite -prompt-direction=top gtags/grep<cr>
" nnoremap <C-F3>o      :<c-u>Unite -prompt-direction=top outline<cr>
" nnoremap <C-F3>z      :<c-u>Unite -prompt-direction=top outline:folding<cr>
" nnoremap <C-F3>'      :<c-u>Unite -prompt-direction=top mark<cr>
" nnoremap <C-F3>"      :<c-u>Unite -prompt-direction=top register<cr>
" nnoremap <C-F3>!      :<c-u>Unite -prompt-direction=top launcher<cr>
" nnoremap <C-F3>:      :<c-u>Unite -prompt-direction=top history/command<cr>
" nnoremap <C-F3>/      :<c-u>Unite -prompt-direction=top history/search<cr>
" nnoremap <C-F3>y      :<c-u>Unite -prompt-direction=top history/yank<cr>
" nnoremap <C-F3>j      :<c-u>Unite -prompt-direction=top jump<cr>
" nnoremap <C-F3><tab>  :<c-u>Unite -prompt-direction=top jump<cr>
" nnoremap <C-F3><bs>   :<c-u>Unite -prompt-direction=top change<cr>

"nnoremap <C-F3>a      :<c-u>UniteBookmarkAdd<cr>

"nnoremap <C-F3>s      :<c-u>Unite junkfile<cr>

" }}}3

" Ignore {{{3

call unite#custom#source('file_rec', 'ignore_globs',
	\ split(&wildignore, ','))

" }}}3

" Motifs flous {{{3

" call unite#filters#matcher_default#use(['matcher_fuzzy'])

" }}}3

" Présentation {{{3

call unite#custom#profile('default', 'context', {
\   'direction' : 'dynamicbottom'
\ })

call unite#custom#profile('default', 'context', {
\   'winheight' : 20
\ })

call unite#custom#profile('default', 'context', {
\   'winwidth' : 20
\ })

" }}}3

" Autocommandes {{{3

autocmd FileType unite call s:unite_my_settings()

function! s:unite_my_settings()
	imap <silent><buffer><expr> <C-s>     unite#do_action('split')
endfunction

" }}}3

" }}}2

" Neomru (Shougo/neomru.vim) {{{2

call unite#custom#source('neomru/file', 'ignore_globs',
			\ [
			\ '/home/*/racine/plugin/manager/**/doc/*.txt',
			\ 'term://*'
			\ ])

" }}}2

" Crunch (arecarn/crunch.vim {{{2

"nnoremap <D-=> :Crunch<cr>

" }}}2

" Crunch (arecarn/crunch.vim {{{2

"nnoremap <D-=> :Crunch<cr>

" }}}2

"  {{{ MRU
" ------------------------------------------------------------------------

augroup ExtensionMRU

	au!

	au BufEnter __MRU_Files__ nmap <buffer> <kEnter> <Enter>

augroup END

" }}}

" {{{ Tweetvim

" augroup ExtensionTweetvim
"
" 	au!
"
" 	au FileType tweetvim setlocal nowrap
"
" 	au FileType tweetvim nmap <buffer> u         <Plug>(tweetvim_action_user_timeline)
" 	au FileType tweetvim nmap <buffer> <up>      <Plug>(tweetvim_action_cursor_up)
" 	au FileType tweetvim nmap <buffer> <down>    <Plug>(tweetvim_action_cursor_down)
" 	au FileType tweetvim nmap <buffer> n         <Plug>(tweetvim_action_page_next)
" 	au FileType tweetvim nmap <buffer> p         <Plug>(tweetvim_action_page_previous)
" 	au FileType tweetvim nmap <buffer> f         <Plug>(tweetvim_action_buffer_next)
" 	au FileType tweetvim nmap <buffer> b         <Plug>(tweetvim_action_buffer_previous)
" 	au FileType tweetvim nmap <buffer> <cr>      <Plug>(tweetvim_action_enter)
" 	au FileType tweetvim nmap <buffer> /         <Plug>(tweetvim_action_search)
" 	au FileType tweetvim nmap <buffer> r         <Plug>(tweetvim_action_reload)
" 	au FileType tweetvim nmap <buffer> R         <Plug>(tweetvim_action_reply)
" 	au FileType tweetvim nmap <buffer> <m-r>     <Plug>(tweetvim_action_retweet)
" 	au FileType tweetvim nmap <buffer> m         <Plug>(tweetvim_action_favorite)
" 	au FileType tweetvim nmap <buffer> *         <Plug>(tweetvim_action_favstar)
" 	au FileType tweetvim nmap <buffer> t         <Plug>(tweetvim_action_in_reply_to)
" 	au FileType tweetvim nmap <buffer> w         <Plug>(tweetvim_action_open_links)
" 	au FileType tweetvim nmap <buffer> W         <Plug>(tweetvim_action_expand_url)
" 	au FileType tweetvim nmap <buffer> x         <Plug>(tweetvim_action_remove_favorite)
"
" " 	au FileType tweetvim nmap <buffer> ...       <Plug> (tweetvim_action_favstar_browser)
" " 	au FileType tweetvim nmap <buffer> ...       <Plug> (tweetvim_action_remove_status)
" " 	au FileType tweetvim nmap <buffer> ...       <Plug>(tweetvim_action_qt)
"
" augroup END

" }}}

" {{{ TwitVim

" augroup ExtensionTwitVim
"
" 	au!
"
" 	au FileType twitvim nnoremap <buffer> @       :FriendsTwitter<cr>
" 	au FileType twitvim nnoremap <buffer> u       :UserTwitter<Space>
"
" 	au FileType twitvim nnoremap <buffer> r       :RefreshTwitter<cr>
"
" 	au FileType twitvim nnoremap <buffer> n       :NextTwitter<cr>
" 	au FileType twitvim nnoremap <buffer> p       :PreviousTwitter<cr>
"
" 	au FileType twitvim nnoremap <buffer> <tab>   :ForwardTwitter<cr>
" 	au FileType twitvim nnoremap <buffer> <bs>    :BackTwitter<cr>
"
" 	au FileType twitvim nnoremap <buffer> s       :SearchTwitter<Space>
"
" 	au FileType twitvim nnoremap <buffer> m       :FavTwitter<cr>
"
" 	au FileType twitvim nnoremap <buffer> P       :PosttoTwitter<cr>
"
" 	au FileType twitvim nnoremap <buffer> af      :FollowTwitter<Space>
" 	au FileType twitvim nnoremap <buffer> xf      :UnfollowTwitter<Space>
"
" 	au FileType twitvim nnoremap <buffer> f       :FollowingTwitter<space>
" 	au FileType twitvim nnoremap <buffer> F       :FollowersTwitter<space>
"
" 	au FileType twitvim nnoremap <buffer> l       :ListTwitter<Space>
" 	au FileType twitvim nnoremap <buffer> L       :OwnedListsTwitter<space>
"
" 	au FileType twitvim nnoremap <buffer> al      :AddToListTwitter<Space>
" 	au FileType twitvim nnoremap <buffer> xl      :RemoveFromListTwitter<Space>
"
" 	au FileType twitvim nnoremap <buffer> il      :ListInfoTwitter<Space>
" 	au FileType twitvim nnoremap <buffer> <m-l>m  :MembersOfListTwitter<Space>
"
" 	au FileType twitvim nnoremap <buffer> <m-l>f  :FollowListTwitter<Space>
" 	au FileType twitvim nnoremap <buffer> <m-l>xf :UnfollowListTwitter<Space>
"
" augroup END

" }}}

"  {{{ VimCalc
" ------------------------------------------------------------------------

augroup ExtensionVimCalc

	au!

	au BufEnter __VCALC__ imap <buffer> <kEnter> <Enter>
	au BufEnter __VCALC__ imap <buffer> <kPlus> +
	au BufEnter __VCALC__ imap <buffer> <kMinus> -
	au BufEnter __VCALC__ imap <buffer> <kMultiply> *
	au BufEnter __VCALC__ imap <buffer> <kDivide> /

augroup END

" }}}

"  {{{ Yankring
" ------------------------------------------------------------------------

augroup ExtensionYankring

	au!

	au FileType yankring set nofoldenable

	" {{{ Keypad

	au FileType yankring nmap <buffer> <kEnter> <Enter>

" 	au BufEnter \[YankRing] nnoremap <buffer> <silent> <k1> :call <SID>YRWindowAction ('q' ,'n')<CR>:call <SID>YRGetElem(1)<CR>
" 	au BufEnter \[YankRing] nnoremap <buffer> <silent> <k2> :call <SID>YRWindowAction ('q' ,'n')<CR>:call <SID>YRGetElem(2)<CR>
" 	au BufEnter \[YankRing] nnoremap <buffer> <silent> <k3> :call <SID>YRWindowAction ('q' ,'n')<CR>:call <SID>YRGetElem(3)<CR>
" 	au BufEnter \[YankRing] nnoremap <buffer> <silent> <k4> :call <SID>YRWindowAction ('q' ,'n')<CR>:call <SID>YRGetElem(4)<CR>
" 	au BufEnter \[YankRing] nnoremap <buffer> <silent> <k5> :call <SID>YRWindowAction ('q' ,'n')<CR>:call <SID>YRGetElem(5)<CR>
" 	au BufEnter \[YankRing] nnoremap <buffer> <silent> <k6> :call <SID>YRWindowAction ('q' ,'n')<CR>:call <SID>YRGetElem(6)<CR>
" 	au BufEnter \[YankRing] nnoremap <buffer> <silent> <k7> :call <SID>YRWindowAction ('q' ,'n')<CR>:call <SID>YRGetElem(7)<CR>
" 	au BufEnter \[YankRing] nnoremap <buffer> <silent> <k8> :call <SID>YRWindowAction ('q' ,'n')<CR>:call <SID>YRGetElem(8)<CR>
" 	au BufEnter \[YankRing] nnoremap <buffer> <silent> <k9> :call <SID>YRWindowAction ('q' ,'n')<CR>:call <SID>YRGetElem(9)<CR>

	" Plus nécessaire, car :

	" nmap 0 --> keypad 0
	" nmap 1 --> keypad 1
	" nmap 2 --> keypad 2
	" nmap 3 --> keypad 3
	" nmap 4 --> keypad 4
	" nmap 5 --> keypad 5
	" nmap 6 --> keypad 6
	" nmap 7 --> keypad 7
	" nmap 8 --> keypad 8
	" nmap 9 --> keypad 9

	" dans maps.vim

	" }}}

augroup END

" }}}

" {{{ Yate

augroup ExtensionYate

	au!

	au BufReadPost YATE setfiletype conf

	au BufEnter YATE startinsert
	au BufLeave YATE stopinsert

augroup END

" }}}

"  {{{ Startify
" ------------------------------------------------------------------------

augroup ExtensionStartify

	au!

	au FileType startify nmap <buffer> <kEnter> <Enter>

augroup END

" }}}

" {{{ Tskeleton

augroup ModelesTSkeleton

	au!

" 	au BufNewFile *.sh                 TSkeletonSetup template/template.sh
" 	au BufNewFile *.zsh                TSkeletonSetup template/template.zsh
" 	au BufNewFile *.bash               TSkeletonSetup template/template.bash

" 	au BufNewFile *.sed                TSkeletonSetup template/template.sed
" 	au BufNewFile *.awk                TSkeletonSetup template/template.awk

" 	au BufNewFile *.py                 TSkeletonSetup template/template.py
" 	au BufNewFile *.pl                 TSkeletonSetup template/template.pl

" 	au BufNewFile *.vim                TSkeletonSetup template/template.vim

" 	au BufNewFile *.htm,*.html         TSkeletonSetup template/template.html
" 	au BufNewFile *.php,*.phtm,*.phtml TSkeletonSetup template/template.php
" 	au BufNewFile *.js                 TSkeletonSetup template/template.js

augroup END

" }}}

"  {{{ Gundo
" ------------------------------------------------------------------------

augroup ExtensionGundo

	au!

	au FileType gundo nmap <buffer> <kEnter> <Enter>

augroup END

" }}}

" Neomru {{{2

let g:neomru#file_mru_path = $HOME . '/racine/plugin/data/unite/neomru/file-vim'

let g:neomru#file_mru_limit = 900

let g:neomru#directory_mru_path = $HOME . '/racine/plugin/data/unite/neomru/directory-vim'

let g:neomru#directory_mru_limit = 300

let g:neomru#do_validate = 0

" }}}2

"  {{{ QFGrep
" ------------------------------------------------------------------------

" augroup ExtensionQFGrep
"
" 	au!
"
" 	au BufReadPost quickfix nmap <buffer> / <Plug>QFGrep
" 	au BufReadPost quickfix nmap <buffer> ? <Plug>QFGrepV
" 	au BufReadPost quickfix nmap <buffer> = <Plug>QFRestore
"
" augroup END

" }}}


" Exploration multiple {{{1

" Denite {{{2

" Mappings {{{3

nnoremap <F1>   :<c-u>Denite help<cr>
nnoremap <S-F1> :<c-u>Denite<space>
nnoremap <C-F1> :<c-u>Denite source<cr>

" }}}3

" Options {{{3

call denite#custom#option('default', {
	  \ 'highlight_mode_normal' : 'Visual',
	  \ 'highlight_mode_insert' : 'Visual',
	  \ 'highlight_matched_char' : 'false',
	  \ 'highlight_matched_range' : 'false',
	  \ })

call denite#custom#source(
\ 'file_mru', 'matchers', ['matcher_substring'])

" }}}3

" }}}2

" }}}1

" Denite {{{1

autocmd FileType denite call s:denite_my_settings()

function! s:denite_my_settings() abort
	nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
	nnoremap <silent><buffer><expr> <Tab> denite#do_map('choose_action')

	nnoremap <silent><buffer><expr> s denite#do_map('do_action', 'splitswitch')
	nnoremap <silent><buffer><expr> v denite#do_map('do_action', 'vsplitswitch')
	nnoremap <silent><buffer><expr> t denite#do_map('do_action', 'tabswitch')

	nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
	nnoremap <silent><buffer><expr> & denite#do_map('filter', '.vim')

	nnoremap <silent><buffer><expr> u denite#do_map('move_up_path')

	nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
	nnoremap <silent><buffer><expr> <C-A> denite#do_map('select_all')

	nnoremap <silent><buffer><expr> d denite#do_map('do_action', 'delete')
	nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')

	nnoremap <silent><buffer><expr> <C-L> denite#do_map('redraw')
	nnoremap <silent><buffer><expr> <C-R> denite#do_map('restart')

	nnoremap <silent><buffer><expr> ù denite#do_map('restore_sources')
	nnoremap <silent><buffer><expr> µ denite#do_map('restore_sources')

	nnoremap <silent><buffer><expr> q denite#do_map('quit')
	nnoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
	inoremap <silent><buffer><expr> <C-c> denite#do_map('quit')

	inoremap <silent><buffer><expr> <bs> denite#do_map('i_<Plug>(denite_filter_backspace)')
	inoremap <silent><buffer><expr> <cr> denite#do_map('i_<Plug>(denite_filter_update)')
endfunction

" }}}1

" Commented maps does not work

nmap § <plug>(wheel-navigation-tree)
nmap é <plug>(wheel-navigation-grep)
"nmap è <plug>(wheel-navigation-outline)
"nmap ù <plug>(wheel-navigation-mru)
nmap £ <plug>(wheel-navigation-locate)
nmap µ <plug>(wheel-navigation-tags)
"nmap ç <plug>(wheel-yank-list)
nmap ° <plug>(wheel-yank-plain)

" Exploration de l’arborescence du système de fichiers {{{1

"  Netrw (plugin standard) {{{2

"let g:loaded_netrw       = 0
"let g:loaded_netrwPlugin = 0

let g:netrw_home           = $HOME . '/racine/plugin/data/netrw'

let g:netrw_menu           = 1

let g:netrw_dirhistmax     = 712

let g:netrw_keepdir        = 0

let g:netrw_liststyle      = 1
let g:netrw_special_syntax = 1
let g:netrw_banner         = 1
let g:netrw_browse_split   = 0
let g:netrw_preview        = 0
let g:netrw_fastbrowse     = 1
let g:netrw_silent         = 1

let g:netrw_ctags          = 'ctags'
let g:netrw_ssh_cmd        = 'ssh'
let g:netrw_browsex_viewer = "kfmclient exec"

" Tri {{{3

let g:netrw_sort_by = 'name'
let g:netrw_sort_direction = 'normal'
"let g:netrw_sort_options='i'

let g:netrw_sort_sequence ='[\/]$,\<core\%(\.\d\+\)\=\>'
let g:netrw_sort_sequence .='\.otl$'
let g:netrw_sort_sequence .=',\.p\?html\?$,\.php$,\.css$,\.js$'
let g:netrw_sort_sequence .=',\.h$,\.c$,\.cpp$'
let g:netrw_sort_sequence .=',\.py$,\.pyx$'
let g:netrw_sort_sequence .='*,\~$'

" }}}3

" Masque {{{3

let g:netrw_list_hide = '\.un\~$,\.renduHtml$,\.sessionvim$'
let g:netrw_list_hide .= ',^tags$,^TAGS$,^cscope\.'

let g:netrw_list_hide .= ',^\.tarexclude$,^\.directory$'

let g:netrw_list_hide .= ',\.o$,\.so$'
let g:netrw_list_hide .= ',\.pyc$,\.elc$,\.zwc$'
let g:netrw_list_hide .= ',\.dll$,\.obj$,\.bak$,\.exe$'

let g:netrw_list_hide .= ',^RCS[\/]$,^CVS[\/]$,^\.hg[\/]$,^\.bzr[\/]$,^\.git[\/]$,\.mtn$,^_darcs[\/]$'
let g:netrw_list_hide .= ',^.hgignore$,^.bzrignore$,^.hgtags$'

let g:netrw_list_hide .= ',\.aux$,,\.log$,\.maf$,\.toc$,\.ptc$,\.mtc$'

let g:netrw_hide = 1

" }}}3

" }}}2

" Dirvish {{{2

"nnoremap <D-f> :Dirvish<cr>

" }}}2

" Vifm {{{2

let g:vifm_term = 'urxvtc -e'

" }}}2

" }}}1

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

function! s:fzf_statusline()
  " Override statusline as you like
  highlight fzf1 ctermfg=0 ctermbg=3
  highlight fzf2 ctermfg=0 ctermbg=3
  highlight fzf3 ctermfg=0 ctermbg=3
  setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
endfunction

" FZF {{{1

autocmd! User FzfStatusLine call <SID>fzf_statusline()

" }}}1

" Mouvement {{{1

" Sneak (justinmk/vim-sneak) {{{2

" Mappings {{{3

" 2-character Sneak (default)

nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F

xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F

omap f <Plug>Sneak_f
omap F <Plug>Sneak_F

" 1-character enhanced 'f'

nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F

" visual-mode

xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F

" operator-pending-mode

omap f <Plug>Sneak_f
omap F <Plug>Sneak_F

" 1-character enhanced 't'

nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T

" visual-mode

xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T

" operator-pending-mode

omap t <Plug>Sneak_t
omap T <Plug>Sneak_T

" }}}3

" Options {{{3

let g:sneak#label = 0
let g:sneak#label_esc = "\<space>"
let g:sneak#target_labels = "ù*$àç&é§è!µ£~@#bwefthjklnu"
let g:sneak#prompt = 'sneak > '
let g:sneak#f_reset      = 0
let g:sneak#s_next       = 0
let g:sneak#absolute_dir = 1
let g:sneak#textobject_z = 1
let g:sneak#use_ic_scs   = 1
let g:sneak#map_netrw    = 1

highlight Sneak guibg=black guifg=#7b3c11 gui=bold,underline,italic
highlight SneakScope guibg=#7b3c11 guifg=black gui=bold,underline,italic

highlight Sneak cterm=reverse
highlight SneakScope cterm=reverse

" highlight link Sneak None
" " Needed if a plugin sets the colorscheme dynamically:
" autocmd User SneakLeave highlight clear Sneak

" }}}3

" }}}2

" }}}1

map \cc <plug>NERDCommenterToggle
map \c<space> <plug>NERDCommenterComment
map \cn <plug>NERDCommenterNest
map \cm <plug>NERDCommenterMinimal
map \ci <plug>NERDCommenterInvert
map \cs <plug>NERDCommenterSexy
map \cy <plug>NERDCommenterYank
map \c$ <plug>NERDCommenterToEOL
map \cA <plug>NERDCommenterAppend
map \cI <plug>NERDCommenterInsert
map \ca <plug>NERDCommenterAltDelims
map \cl <plug>NERDCommenterAlignLeft
map \cb <plug>NERDCommenterAlignBoth
map \cu <plug>NERDCommenterUncommentLine

"let g:UltiSnipsSnippetsDir = $HOME . '/racine/config/edit/vim/snippet'

