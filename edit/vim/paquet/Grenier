" vim: set filetype=vim:
" vim: set foldlevel=10:

" {{{ Librairies

" Il faut placer les librairies avant les autres plugins
" pour éviter que certains de ceux-ci ne croient à tort
" que la librairie n’est pas installée

NeoBundle 'tomtom/tlib_vim'
NeoBundle 'bitbucket:ns9tks/vim-l9'

NeoBundle 'genutils'                     " 1.0.7 General utility functions
NeoBundle 'multvals.vim'                 " 2.0.2 Array library that uses patterns as separators

NeoBundle 'vim-scripts/ingo-library'     " Vimscript library of common functions.

" Objets texte

NeoBundle 'kana/vim-textobj-user'

" Pour cmdalias

NeoBundle 'coot/CRDispatcher'

" Pour vim-operator-replace

NeoBundle 'kana/vim-operator-user'

" }}}

" Mappings pour tous les modes {{{3

call denite#custom#map(
	  \ '_',
	  \ '<C-M>',
	  \ '<denite:do_action:default>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<CR>',
	  \ '<denite:do_action:default>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<C-L>',
	  \ '<denite:redraw>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<C-Z>',
	  \ '<denite:suspend>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<Tab>',
	  \ '<denite:choose_action>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<Left>',
	  \ '<denite:jump_to_previous_source>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<Right>',
	  \ '<denite:jump_to_next_source>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<M-p>',
	  \ '<denite:assign_previous_matched_text>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<M-n>',
	  \ '<denite:assign_next_matched_text>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<S-Up>',
	  \ '<denite:assign_previous_text>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<S-Down>',
	  \ '<denite:assign_next_text>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<Home>',
	  \ '<denite:move_to_first_line>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ '_',
	  \ '<End>',
	  \ '<denite:move_to_last_line>',
	  \ 'noremap'
	  \)

" }}}3

" Mappings multi-modes {{{3

call denite#custom#map(
	  \ 'normal,insert',
	  \ '<Up>',
	  \ '<denite:move_to_previous_line>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal,insert',
	  \ '<Down>',
	  \ '<denite:move_to_next_line>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal,insert',
	  \ '<PageUp>',
	  \ '<denite:scroll_page_backwards>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal,insert',
	  \ '<PageDown>',
	  \ '<denite:scroll_page_forwards>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal,insert',
	  \ '<C-P>',
	  \ '<denite:move_to_previous_line>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal,insert',
	  \ '<C-N>',
	  \ '<denite:move_to_next_line>',
	  \ 'noremap'
	  \)

" }}}3

" Mappings en mode normal dans denite {{{3

call denite#custom#map(
	  \ 'normal',
	  \ '<C-R>',
	  \ '<denite:restart>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal',
	  \ '<Esc>',
	  \ '<denite:enter_mode:normal>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal',
	  \ 'i',
	  \ '<denite:enter_mode:insert>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal',
	  \ '<Insert>',
	  \ '<denite:enter_mode:insert>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal',
	  \ '<Space>',
	  \ '<denite:toggle_select_down>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal',
	  \ '<BackSpace>',
	  \ '<denite:change_path>',
	  \ 'noremap'
	  \)

" call denite#custom#map(
" 	  \ 'normal',
" 	  \ '<BackSpace>',
" 	  \ '<denite:move_up_path>',
" 	  \ 'noremap'
" 	  \)

call denite#custom#map(
	  \ 'normal',
	  \ 'h',
	  \ '<denite:jump_to_previous_source>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal',
	  \ 'l',
	  \ '<denite:jump_to_next_source>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal',
	  \ 'm',
	  \ '<denite:quick_move>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal',
	  \ 's',
	  \ '<denite:do_action:split>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'normal',
	  \ 'v',
	  \ '<denite:do_action:vsplit>',
	  \ 'noremap'
	  \)

" }}}3

" Mappings en mode insertion dans denite {{{3

call denite#custom#map(
	  \ 'insert',
	  \ '<C-J>',
	  \ '<denite:input_command_line>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<Esc>',
	  \ '<denite:enter_mode:normal>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<Insert>',
	  \ '<denite:enter_mode:insert>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<Left>',
	  \ '<denite:jump_to_previous_source>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<Right>',
	  \ '<denite:jump_to_next_source>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<C-Space>',
	  \ '<denite:toggle_select_down>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<M-Space>',
	  \ '<denite:toggle_select_down>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<S-BackSpace>',
	  \ '<denite:move_up_path>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<M-f>',
	  \ '<denite:move_caret_to_one_word_right>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<M-b>',
	  \ '<denite:move_caret_to_one_word_left>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<C-A>',
	  \ '<denite:move_caret_to_head>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<C-E>',
	  \ '<denite:move_caret_to_tail>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<C-D>',
	  \ '<denite:delete_char_under_caret>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<C-H>',
	  \ '<denite:delete_char_before_caret>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<C-W>',
	  \ '<denite:delete_word_before_caret>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<M-d>',
	  \ '<denite:delete_word_after_caret>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<C-U>',
	  \ '<denite:delete_entire_text>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<M-s>',
	  \ '<denite:do_action:split>',
	  \ 'noremap'
	  \)

call denite#custom#map(
	  \ 'insert',
	  \ '<M-v>',
	  \ '<denite:do_action:vsplit>',
	  \ 'noremap'
	  \)

" }}}3

" let g:QFG_hi_prompt='ctermbg=68 ctermfg=16 guibg=#5f87d7 guifg=black'
" let g:QFG_hi_info = 'ctermbg=113 ctermfg=16 guibg=#87d75f guifg=black'
" let g:QFG_hi_error = 'ctermbg=167 ctermfg=16 guibg=#d75f5f guifg=black'

" let g:QFG_hi_prompt='guifg=brown guibg=black ctermfg=3 ctermbg=NONE'
" let g:QFG_hi_info='guifg=brown guibg=black ctermfg=3 ctermbg=NONE'
" let g:QFG_hi_error='guifg=brown guibg=black ctermfg=3 ctermbg=NONE'

" {{{ Exploration d’étiquettes (tags, cscope, id-utils, global, ...)

" {{{ Surfer (gcmt/surfer.vim)

let g:surfer_smart_case = 1
let g:surfer_root_markers = ['.racine-projet', 'tags']

let g:surfer_buffer_search_modifier = '%'
let g:surfer_project_search_modifier = '#'

let g:surfer_max_results = 23

let g:surfer_prompt = '@ '
let g:surfer_current_line_indicator = ' > '
let g:surfer_line_format = [' @ {file}', ' : {line}']

let g:surfer_tag_file_custom_depth = -1
let g:surfer_tag_file_relative_to_project_root = 1

"let g:surfer_shade_color = 'guifg=NONE  guibg=black  gui=NONE'
let g:surfer_matches_color = 'guifg=#88421D  guibg=black  gui=NONE'

" }}}

"  {{{ Yate (bitbucket:madevgeny/yate.git)
" ------------------------------------------------------------------------

" " Map exceptionnel
"
" nnoremap ... :YATE<cr>
"
" " Maps ordinaire
"
" nnoremap <F9>t :YATE<cr>
"
" let g:YATE_window_height           = 23
" let g:YATE_strip_long_paths        = 1
" let g:YATE_enable_real_time_search = 1
" let g:YATE_min_symbols_to_search   = 4
" let g:YATE_max_matches_to_show     = -1
" let g:YATE_history_size            = 84127
" let g:YATE_clear_search_string     = 1

" }}}

" {{{ Projtags (fishy/projtags-vim)

" Plus nécessaire avec vim-project

" let g:ProjTags = []
"
" let g:ProjTags += [
" \	[
" \		'~/notes',
" \		'~/notes/tags',
" \	],
" \	[
" \		'~/artist',
" \		'~/artist/tags',
" \	],
" \	[
" \		'~/scien',
" \		'~/scien/tags',
" \	]
" \]
"
" let g:ProjTags += [
" \	[
" \		'~/bin',
" \		'~/bin/tags',
" \	],
" \	[
" \		'~/racine/config',
" \		'~/racine/config/tags',
" \	],
" \	[
" \		'~/install',
" \		'~/install/tags',
" \	],
" \	[
" \		'~/racine/extension/cmdline',
" \		'~/racine/extension/cmdline/tags',
" \	]
" \]

" ------------------------------------

" let g:ProjTags += [
" \	[
" \		'~/notes',
" \		'~/notes/tags',
" \		':echom "Projet notes"'
" \	],
" \	[
" \		'~/artist',
" \		'~/artist/tags',
" \		':echom "Projet artist"'
" \	],
" \	[
" \		'~/scien',
" \		'~/scien/tags',
" \		':echom "Projet scien"'
" \	]
" \]

" }}}

" }}}

NeoBundle 'hrsh7th/vim-versions'
NeoBundle 't9md/vim-unite-ack'
NeoBundle 'osyo-manga/unite-filetype'

NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/neosnippet-snippets'

" {{{ Neosnippet

let g:neosnippet#snippets_directory = $HOME . '/racine/data/edit/neovim/addon/neosnippet'

imap <F7>     <Plug>(neosnippet_expand_or_jump)
smap <F7>     <Plug>(neosnippet_expand_or_jump)
xmap <F7>     <Plug>(neosnippet_expand_target)

imap <F8>     <Plug>(neosnippet_start_unite_snippet)
xmap <F8>     <Plug>(neosnippet_start_unite_snippet_target)

" {{{ SuperTab like snippets behavior.

imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
	\ "\<Plug>(neosnippet_expand_or_jump)"
	\: pumvisible() ? "\<C-n>" : "\<TAB>"

smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
	\ "\<Plug>(neosnippet_expand_or_jump)"
	\: "\<TAB>"

" }}}

" }}}

" {{{ Zen coding

NeoBundleLazy 'mattn/emmet-vim', {
	\ 'autoload' : {
	\     'filetypes' : ['html'],
	\    },
	\ }

" }}}

" {{{ Html zen coding

"  {{{ Emmet (mattn/emmet-vim)
" ------------------------------------------------------------------------

let g:user_emmet_leader_key = '<C-y>'

" Simple <tab>

let g:user_emmet_settings = {
	\  'html' : {
	\    'indentation' : '	'
	\  },
	\}

" }}}

"  {{{ Sparkup (chrisgeo/sparkup)
" ------------------------------------------------------------------------

" if ! exists('g:sparkup')
" 	let g:sparkup = {}
" endif
"
" let g:sparkup.lhs_expand = '<C-B>'
" let g:sparkup.lhs_jump_next_empty_tag = '...'

" }}}

" }}}

" {{{ Modèles

"  {{{ TSkeleton (tomtom/tskeleton_vim)
" ------------------------------------------------------------------------

let g:tskelLocalBitsDirs = $HOME . '/racine/data/edit/neovim/addon/tskeleton'

let g:tskelMenuCache = 1

let g:tskelUserName="Name"
let g:tskelUserEmail="your@mail"
let g:tskelWWW="http://web.site"

let g:tskelLicence="GPL3"

let g:tskelDateFormat="%c"
"let g:tskelDateFormat="%A %d %B %Y, %H:%M"

" }}}

" }}}

" {{{ Vimfiler (Shougo/vimfiler.vim)

nnoremap <F4> :VimFiler<space>

let g:vimfiler_as_default_explorer = 0

let g:vimfiler_safe_mode_by_default = 1

" {{{ Mappings

let g:vimfiler_no_default_key_mappings = 0

autocmd FileType vimfiler nmap <buffer> y <Plug>(vimfiler_clipboard_copy_file)
autocmd FileType vimfiler nmap <buffer> d <Plug>(vimfiler_clipboard_move_file)
autocmd FileType vimfiler nmap <buffer> p <Plug>(vimfiler_clipboard_paste)

autocmd FileType vimfiler nmap <buffer> Y <Plug>(vimfiler_yank_full_path)

autocmd FileType vimfiler nmap <buffer> <M-p> <Plug>(vimfiler_pushd)
autocmd FileType vimfiler nmap <buffer> P <Plug>(vimfiler_popd)

" }}}

" {{{ Données

let g:vimfiler_data_directory = $HOME . '/racine/data/edit/neovim/addon/vimfiler'

let g:vimfiler_max_directories_history = 1200

" }}}

" {{{ Présentation

let g:vimfiler_directory_display_top = 1
let g:vimfiler_split_rule = 'topleft'

let g:vimfiler_tree_leaf_icon = ' '
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = '-'
let g:vimfiler_marked_file_icon = '*'

" }}}

" {{{ Comportement

let g:vimfiler_enable_auto_cd = 0

let g:vimfiler_edit_action = 'edit'

" }}}

" {{{ Fichiers cachés

"let g:vimfiler_ignore_pattern = '^\.'

let g:vimfiler_ignore_pattern = ''

" }}}

" {{{ Fichiers « exécutables »

if ! exists('g:vimfiler_execute_file_list')
	let g:vimfiler_execute_file_list = {}
endif

let g:vimfiler_execute_file_list.vim = 'vim'

let g:vimfiler_execute_file_list.zsh = 'zsh'
let g:vimfiler_execute_file_list.bash = 'bash'

let g:vimfiler_execute_file_list.python = 'python'

" }}}

" }}}

" {{{ Ack (mileszs/ack.vim)

let g:ackprg="ack-grep -H --nocolor --nogroup --column"

"}}}

" {{{ Ag : the silver searcher (rking/ag.vim)

let g:agprg="/usr/local/bin/ag --column"

nnoremap <F9>a :Ag<space>

"}}}

" ------------

" {{{ Exploration de fichiers

" {{{ Exploration de l’arborescence du système de fichiers

NeoBundleLazy 'Shougo/vimfiler.vim', {
	\ 'depends' : 'Shougo/unite.vim',
	\ 'augroup' : 'vimfiler',
	\ 'autoload' : {
		\ 'commands' : [
			\ 'VimFiler', 'VimFilerExplorer',
			\ 'Edit', 'Read', 'Source', 'Write'
		\ ],
		\ 'mappings' : [ '<Plug>(vimfiler_switch)' ],
		\ 'explorer' : 1,
	\ },
	\ }

" }}}

" }}}

NeoBundleLazy 'majkinetor/unite-cmdmatch', {
	\ 'depends': 'Shougo/unite.vim',
	\ 'mappings' : [['c', '<Plug>(unite_cmdmatch_complete)']]
\ }

" {{{ Unite

" Non « lazy » pour enregistrer les fichiers récemment utilisés

NeoBundle 'Shougo/unite-build'
NeoBundle 'Shougo/unite-ssh'
NeoBundle 'Shougo/unite-sudo'

NeoBundle 'inside/unite-argument'
call dein#add('kmnk/unite-command')
NeoBundle 'mytoh/unite-highlight'
NeoBundle 'thinca/vim-unite-history'
NeoBundle 'lambdalisue/unite-linephrase'

" }}}

NeoBundleLazy 'Shougo/junkfile.vim', {
	\ 'autoload' : {
	\   'commands' : 'JunkfileOpen',
	\   'unite_sources' : ['junkfile', 'junkfile/new'],
	\ }
	\ }

" {{{ Librairies

" Il faut placer les librairies avant les autres plugins
" pour éviter que certains de ceux-ci ne croient à tort
" que la librairie n’est pas installée

NeoBundle 'bitbucket:ns9tks/vim-l9'

NeoBundle 'genutils'                     " 1.0.7 General utility functions
NeoBundle 'multvals.vim'                 " 2.0.2 Array library that uses patterns as separators

" Pour vim-operator-replace

NeoBundle 'kana/vim-operator-user'

" }}}

" {{{ Idées

" Versions pur neovim des plugins de Shougo :

" Shougo/dein.vim
" Shougo/deoplete.vim
" Shougo/denite.vim

" }}}

" ------------

" {{{ Abréviations

NeoBundleLazy 'tpope/vim-abolish', {
	\ 'autoload' : { 'commands' : 'Abolish' }
	\ }

" }}}

" {{{ Accès admin (root, sudo)

NeoBundle 'sudo.vim'

" }}}

" {{{ Affichage

NeoBundle 'Shougo/echodoc.vim'

" }}}

" {{{ Aléatoire

NeoBundleLazy 'dahu/vim-rng', {
	\ 'autoload' : { 'functions' : [
		\ 'RandomNumber', 'RandomChar', 'RandomChars', 'RandomString',
		\ 'RandomCharsInSet', 'RandomCharFromRegex', 'RandomStringFromRegex'
	\] }
\ }

" }}}

" {{{ Alignement & Tableaux

" {{{ CSV = Comma Separated Values

NeoBundleLazy 'chrisbra/csv.vim', {
	\ 'autoload' : {
	\     'filetypes' : ['csv'],
	\    },
	\ }

" }}}

" }}}

" {{{ Binaires

NeoBundleLazy 'Shougo/vinarise.vim'

" }}}

" {{{ Barre de statut

"NeoBundle 'bling/vim-airline'

" }}}

" {{{ Correspondances de paires { / } etc

NeoBundle 'matchit.zip'

NeoBundle 'tpope/vim-endwise'

NeoBundle 'tpope/vim-surround'

NeoBundle 'matchparenpp'

" }}}

" {{{ Date & Heure, Calendrier

NeoBundle 'tpope/vim-speeddating'

NeoBundleLazy 'mattn/calendar-vim', {
	\ 'autoload' : {
		\ 'commands' : [ 'Calendar', 'CalendarH', 'CalendarT' ]
	\ }
\ }

NeoBundle 'QianChenglong/vim-update-time'

" }}}

" {{{ Diff & Patch

NeoBundleLazy 'patchreview.vim', {
	\ 'autoload' : { 'commands' : ['DiffReview', 'PatchReview', 'ReversePatchReview'] }
	\ }


" }}}

" {{{ Encodage

NeoBundle 'powerman/vim-plugin-AnsiEsc'

NeoBundle 'AutoFenc.vim'

NeoBundle 'tpope/vim-characterize'

" }}}

" {{{ Espaces

NeoBundle 'DeleteTrailingWhitespace'

" }}}

" {{{ Fichiers de notes

NeoBundle 'jceb/vim-orgmode'

" }}}

" {{{ Gestionnaires de version (VCS)

" NeoBundleLazy 'tpope/vim-fugitive', {
" 	\ 'augroup' : 'fugitive',
" 	\ 'autoload' : { 'commands' : 'Git' }
" 	\ }
"
" NeoBundleLazy 'int3/vim-extradite', {
" 	\ 'autoload' : { 'commands' : 'Extradite' }
" \ }

" }}}

" {{{ Grands fichiers

NeoBundle 'LargeFile' " 2     Edit large files quickly (keywords: large huge speed)

" }}}

" {{{ Joindre

NeoBundleLazy 'sk1418/Join', {
	\ 'autoload' : { 'commands' : 'Join' }
\ }

" }}}

" {{{ Liens

NeoBundleLazy 'utl.vim', {
	\ 'autoload' : { 'commands' : 'Utl' }
\ }

" }}}

" {{{ Visuel

NeoBundle 'vis'                              " 15    Extended Visual Mode Commands, Substitutes, and Searches

NeoBundle 'tyru/visualctrlg.vim'  " 0.0.0 Report info about selected text
NeoBundle 'visualrepeat'          " 1.00  Repeat command extended to visual mode.
NeoBundle 'thinca/vim-visualstar' " 0.2.0 star(*) for Visual-mode.

" }}}

" {{{ Raccourcis

NeoBundle 'kana/vim-operator-replace'

" }}}

" {{{ Répétition

NeoBundle 'kana/vim-repeat'
NeoBundle 'record-repeat.vim' " 0.1   Repeat sequences of commands

" }}}

" {{{ Système de fichiers

NeoBundle 'artnez/vim-writepath'

" }}}

" {{{ Thèmes

NeoBundle 'flazz/vim-colorschemes'

" }}}

" {{{ Visualisateurs

NeoBundle 'rhysd/open-pdf.vim'

" Conflit avec le plugin intégré dans neovim
"NeoBundle 'vim-utils/vim-man'

" }}}

" {{{ Calcul

" Ne fonctionne pas
"NeoBundle 'gregsexton/VimCalc'

" }}}

" ------------

" {{{ Startify (mhinz/vim-startify)

" Plus nécessaire avec amiorin/vim-project

let g:startify_show_files = 1
let g:startify_show_files_number = 36

let g:startify_session_dir = '~/racine/data/edit/neovim/addon/startify/session'
let g:startify_show_sessions = 1

let g:startify_bookmarks = [ '~/notes/scratch' ]

" }}}

" {{{ Exploration des fichiers récemment édités

"  {{{ Mru (mru.vim)
" ------------------------------------------------------------------------

" nnoremap <F9>m :MRU<space>
"
" let g:MRU_File = $HOME . '/racine/data/edit/neovim/addon/mru/mru_files'
"
" let g:MRU_Max_Entries = 127543
"
" "let g:MRU_Include_Files = ''
"
" let g:MRU_Exclude_Files = '^/tmp/.*\|^/var/tmp/.*\|/mutt-.*'
"
" let g:MRU_Use_Current_Window = 0
" let g:MRU_Auto_Close = 1
"
" let g:MRU_Window_Height = 23
"
" let g:MRU_Add_Menu = 0
" let g:MRU_Max_Menu_Entries = 12
" let g:MRU_Max_Submenu_Entries = 12

" }}}

" }}}

" {{{ Fichiers de notes

" {{{ Junkfile (Shougo/junkfile.vim)

let g:junkfile#directory = $HOME . '/racine/plugin/data/junkfile'
let g:junkfile#edit_command = 'edit'

" }}}

" }}}

" {{{ Signets

" {{{ Bookmarks (MattesGroeger/vim-bookmarks)

nmap mm <Plug>BookmarkToggle
nmap mi <Plug>BookmarkAnnotate
nmap ml <Plug>BookmarkShowAll
nmap mj <Plug>BookmarkNext
nmap mk <Plug>BookmarkPrev
nmap mc <Plug>BookmarkClear
nmap mx <Plug>BookmarkClearAll
nmap mK <Plug>BookmarkMoveUp
nmap mJ <Plug>BookmarkMoveDown

let g:bookmark_auto_save = 1
let g:bookmark_auto_save_file = $HOME . '/racine/data/edit/neovim/addon/bookmarks/default'

let g:bookmark_center = 1
let g:bookmark_highlight_lines = 0
let g:bookmark_show_warning = 1

" Pas nécessaire lorsque unite est installé
"let g:bookmark_auto_close = 0

"let g:bookmark_sign = '>>'
"let g:bookmark_annotation_sign = '##'

" }}}

" }}}

" let g:UltiSnipsSnippetDirectories=[
" 	\$HOME . '/racine/config/edit/neovim/snippet',
" 	\$HOME . '/racine/plugin/data/UltiSnips'
" 	\]

let g:UltiSnipsSnippetDirectories=['snippet']

" {{{ Déjà dans neobundle

" Attention à ne pas le mettre en double
" ici & dans neobundle, sinon nvim boucle
"
" Nécessaire dans neobundle pour vim

"call dein#add('thinca/vim-visualstar')

" }}}

" {{{ Unite-ack (t9md/vim-unite-ack)

let g:unite_source_ack_command = '/usr/bin/vendor_perl/ack --no-heading --no-color --all --with-filename'
let g:unite_source_ack_ignore_case = 1

" }}}

" {{{ Idées

"call dein#add('hkupty/iron.nvim')

"call dein#add('hkupty/nvimux')

" }}}

" {{{ Barre de statut

" {{{ Airline (bling/vim-airline)

" {{{ Détection

let g:airline_detect_modified=1
let g:airline_detect_paste=1
"let g:airline_detect_whitespace=1

" let g:airline_detect_iminsert=1

" }}}

" {{{ Présentation

let g:airline_theme='personnel'

let g:airline_inactive_collapse=1

let g:airline_mode_map = {
	\ '__' : '-',
	\ 'n'  : 'NORMAL',
	\ 'i'  : 'INSERT',
	\ 'R'  : 'REPLACE',
	\ 'c'  : 'CMDLINE',
	\ 'v'  : 'VISUAL',
	\ 'V'  : 'V-LINE',
	\ '' : 'V-BLOCK',
	\ 's'  : 'SELECT',
	\ 'S'  : 'S-LINE',
	\ '' : 'S-BLOCK',
	\ }

let g:airline_left_sep = '▶'
let g:airline_right_sep = '◀'
"let g:airline_linecolumn_prefix = '¶ '
"let g:airline_branch_prefix = '⎇ '
"let g:airline_paste_symbol = 'Þ'
"let g:airline_readonly_symbol = 'RO'
let g:airline#extensions#whitespace#symbol = 'Ξ'

let g:airline_powerline_fonts = 0

let g:airline_exclude_preview = 1

" }}}

" {{{ Exclusions

"let g:airline_exclude_filenames = []
"let g:airline_exclude_filetypes = []

" }}}

" {{{ Extensions

let g:airline#extensions#quickfix#quickfix_text = 'Quickfix'
let g:airline#extensions#quickfix#location_text = 'Location'

let g:airline#extensions#bufferline#enabled = 1
let g:airline#extensions#bufferline#overwrite_variables = 1

let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#empty_message = ''
let g:airline#extensions#branch#use_vcscommand = 0
let g:airline#extensions#branch#displayed_head_limit = 10

let g:airline#extensions#syntastic#enabled = 0

let g:airline#extensions#tagbar#enabled = 0

let g:airline#extensions#csv#enabled = 1
let g:airline#extensions#csv#column_display = 'Number'

"let g:airline#extensions#hunks#enabled = 1
"let g:airline#extensions#hunks#non_zero_only = 0
"let g:airline#extensions#hunks#hunk_symbols = ['+', '~', '-']

let g:airline#extensions#ctrlp#color_template = 'insert'
let g:airline#extensions#ctrlp#show_adjacent_modes = 1

let g:airline#extensions#virtualenv#enabled = 0

let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 0
let g:airline#extensions#whitespace#symbol = '!'
let g:airline#extensions#whitespace#checks = [ 'indent', 'trailing' ]
let g:airline#extensions#whitespace#max_lines = 20000
let g:airline#extensions#whitespace#show_message = 1
let g:airline#extensions#whitespace#trailing_format = 'trailing[%s]'
let g:airline#extensions#whitespace#mixed_indent_format = 'mixed-indent[%s]'

let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#tabline#excludes = []
let g:airline#extensions#tabline#show_tab_nr = 0
let g:airline#extensions#tabline#show_buffers = 0
"let g:airline#extensions#tabline#tab_nr_type = 1
"let g:airline#extensions#tabline#show_tab_type = 1

"let g:airline#extensions#tabline#formatter = 'default'
"let g:airline#extensions#tabline#buffer_nr_show = 1
"let g:airline#extensions#tabline#buffer_nr_format = '%s: '
"let g:airline#extensions#tabline#fnamemod = ':p:.'
"let g:airline#extensions#tabline#fnamecollapse = 1

"let g:airline#extensions#tabline#formatter = 'unique_tail'

let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

let g:airline#extensions#tabline#buffer_min_count = 2
let g:airline#extensions#tabline#tab_min_count = 2

"let g:airline#extensions#tabline#left_sep = ''
"let g:airline#extensions#tabline#left_alt_sep = ''
"let g:airline#extensions#tabline#right_sep = ''
"let g:airline#extensions#tabline#right_alt_sep = ''
"let g:airline#extensions#tabline#close_symbol = 'X'

let g:airline#extensions#tmuxline#enabled = 1
let airline#extensions#tmuxline#color_template = 'normal'

let g:airline#extensions#nrrwrgn#enabled = 1

" }}}

" }}}

" {{{ Powerline

" let g:lightline = {
" 	\ 'colorscheme': 'wombat',
" 	\ 'component': {
" 	\   'readonly': '%{&readonly?"⭤":""}',
" 	\ },
" 	\ 'separator': { 'left': '⮀', 'right': '⮂' },
" 	\ 'subseparator': { 'left': '⮁', 'right': '⮃' }
" 	\ }

" }}}

" }}}

" {{{ Date & Heure

" {{{ Update time (QianChenglong/vim-update-time)

let g:update_time_time_stamp_leader = 'Last Change : '

let g:update_time_time_format = '[=] %A %d %B %Y  (o) %H : %M : %S  %z'

let g:update_time_begin_line = 0

let g:update_time_end_line = 10

let g:update_time_enable = 1

" }}}

" }}}

" {{{ Vimfiler (Shougo/vimfiler.vim)

nnoremap <F4> :VimFiler<space>

let g:vimfiler_as_default_explorer = 0

let g:vimfiler_safe_mode_by_default = 1

" {{{ Mappings

let g:vimfiler_no_default_key_mappings = 0

autocmd FileType vimfiler nmap <buffer> y <Plug>(vimfiler_clipboard_copy_file)
autocmd FileType vimfiler nmap <buffer> d <Plug>(vimfiler_clipboard_move_file)
autocmd FileType vimfiler nmap <buffer> p <Plug>(vimfiler_clipboard_paste)

autocmd FileType vimfiler nmap <buffer> Y <Plug>(vimfiler_yank_full_path)

autocmd FileType vimfiler nmap <buffer> <M-p> <Plug>(vimfiler_pushd)
autocmd FileType vimfiler nmap <buffer> P <Plug>(vimfiler_popd)

" }}}

" {{{ Données

let g:vimfiler_data_directory = $HOME . '/racine/plugin/data/vimfiler'

let g:vimfiler_max_directories_history = 1200

" }}}

" {{{ Présentation

let g:vimfiler_directory_display_top = 1
let g:vimfiler_split_rule = 'topleft'

let g:vimfiler_tree_leaf_icon = ' '
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = '-'
let g:vimfiler_marked_file_icon = '*'

" }}}

" {{{ Comportement

let g:vimfiler_enable_auto_cd = 0

let g:vimfiler_edit_action = 'edit'

" }}}

" {{{ Fichiers cachés

"let g:vimfiler_ignore_pattern = '^\.'

let g:vimfiler_ignore_pattern = ''

" }}}

" {{{ Fichiers « exécutables »

if ! exists('g:vimfiler_execute_file_list')
	let g:vimfiler_execute_file_list = {}
endif

let g:vimfiler_execute_file_list.vim = 'vim'

let g:vimfiler_execute_file_list.zsh = 'zsh'
let g:vimfiler_execute_file_list.bash = 'bash'

let g:vimfiler_execute_file_list.python = 'python'

" }}}

" }}}

" {{{ Gestionnaires de version

let g:changes_autocmd = 1

let g:changes_hl_lines = 1

" }}}

" {{{ Outliners

"  {{{ Orgmode (jceb/vim-orgmode)
" ------------------------------------------------------------------------

" }}}

"  {{{ Vim organizer (hsitz/VimOrganizer)
" ------------------------------------------------------------------------

" }}}

"  {{{ Voom (vim-voom/vim-voom.github.com)
" ------------------------------------------------------------------------

"nnoremap <F9>Oh :Voomhelp<cr>
"nnoremap <F9>Ov :Voom<cr>
"nnoremap <F9>Ow :Voom<space>

" }}}

" }}}

" {{{ Raccourcis

" {{{ Operator-replace (kana/vim-operator-replace)

" Alt gr + r
map ¶  <Plug>(operator-replace)

" }}}

" }}}

" {{{ Restauration

" {{{ Reco

let g:_reco_dir= $HOME . '/racine/plugin/data/reco'

" }}}

" {{{ Recover (chrisbra/Recover.vim)

let g:RecoverPlugin_Edit_Unmodified = 1

" }}}

" }}}

" {{{ Types de fichiers

" {{{ Open-pdf (rhysd/open-pdf.vim)

let g:pdf_cache_dir = $HOME . '/racine/plugin/data/addon/open-pdf'

let g:pdf_open_cmd = 'tabnew | view'
let g:pdf_edit_cmd = 'edit'
let g:pdf_read_cmd = 'read'

let g:pdf_convert_on_edit = 1
let g:pdf_convert_on_read = 1

let g:unite_pdf_search_cmd = 'locate -l 30 "*%s*.pdf"'

" }}}

" }}}

call dein#add('Shougo/vimfiler.vim')

" {{{ Menu

" if ! exists('g:unite_source_menu_menus')
" 	let g:unite_source_menu_menus = {}
" endif

" {{{ Test

" let g:unite_source_menu_menus.test = {
" \     'description' : 'Test menu',
" \ }
"
" let g:unite_source_menu_menus.test.candidates = {
" \   'ghci'      : 'VimShellInteractive ghci',
" \ }
"
" function g:unite_source_menu_menus.test.map(key, value)
" return {
" \       'word' : a:key, 'kind' : 'command',
" \       'action__command' : a:value,
" \     }
" endfunction

" }}}

" {{{ Git

" let g:unite_source_menu_menus.git = {
"     \ 'description' : '            gestionar repositorios git
"         \                            ⌘ [espacio]g',
"     \}

" let g:unite_source_menu_menus.git.command_candidates = [
"     \['▷ tig                                                        ⌘ ,gt',
"         \'normal ,gt'],
"     \['▷ git status       (Fugitive)                                ⌘ ,gs',
"         \'Gstatus'],
"     \['▷ git diff         (Fugitive)                                ⌘ ,gd',
"         \'Gdiff'],
"     \['▷ git commit       (Fugitive)                                ⌘ ,gc',
"         \'Gcommit'],
"     \['▷ git log          (Fugitive)                                ⌘ ,gl',
"         \'exe "silent Glog | Unite quickfix"'],
"     \['▷ git blame        (Fugitive)                                ⌘ ,gb',
"         \'Gblame'],
"     \['▷ git stage        (Fugitive)                                ⌘ ,gw',
"         \'Gwrite'],
"     \['▷ git checkout     (Fugitive)                                ⌘ ,go',
"         \'Gread'],
"     \['▷ git rm           (Fugitive)                                ⌘ ,gr',
"         \'Gremove'],
"     \['▷ git mv           (Fugitive)                                ⌘ ,gm',
"         \'exe "Gmove " input("destino: ")'],
"     \['▷ git push         (Fugitive, salida por buffer)             ⌘ ,gp',
"         \'Git! push'],
"     \['▷ git pull         (Fugitive, salida por buffer)             ⌘ ,gP',
"         \'Git! pull'],
"     \['▷ git prompt       (Fugitive, salida por buffer)             ⌘ ,gi',
"         \'exe "Git! " input("comando git: ")'],
"     \['▷ git cd           (Fugitive)',
"         \'Gcd'],
"     \]

" nnoremap <silent>[menu]g :Unite -silent -start-insert menu:git<CR>

" }}}

" }}}

Plug 'jalvesaq/vimcmdline'

" {{{ Vimcmdline (jalvesaq/vimcmdline)

map <F6>s :call VimCmdLineStartApp()<cr>
map <F6>q :call VimCmdLineQuit()<cr>

" }}}

xmap <expr> ; sneak#is_sneaking() ? '<Plug>VSneakNext' : ';'
xmap <expr> , sneak#is_sneaking() ? '<Plug>VSneakPrevious' : ','

"tnoremap <D-e> <C-\><C-N>:TerminusEditCommand<cr>

tnoremap <silent> <Plug>TerminusEditCommand <c-\><c-n>:call <SID>current_terminal().EditCommand()<cr>
tnoremap <silent> <Plug>TerminusInterceptCommand <c-\><c-n>:call <SID>current_terminal().InterceptCommand()<cr>

tmap <d-e> <Plug>TerminusEditCommand
tmap <d-v> <Plug>TerminusInterceptCommand

"Plug 'rafi/vim-denite-mpc'

"  {{{ Deoplete (Shougo/deoplete.nvim)
" ------------------------------------------------------------------------

let g:deoplete#enable_at_startup = 1

let g:deoplete#auto_complete_start_length = 2

let g:deoplete#enable_camel_case = 1

" }}}

if &compatible
  set nocompatible
endif

set runtimepath+=~/racine/plugin/manager/dein/repos/github.com/Shougo/dein.vim

call dein#begin('~/racine/plugin/manager/dein')

" ------------------------------

" {{{ Self

call dein#add('Shougo/dein.vim')

" }}}

" ------------------------------

" ------------------------------

call dein#end()

filetype plugin indent on

" If you want to install not installed plugins on startup.

if dein#check_install()
 call dein#install()
endif

"Plug 'rafi/vim-denite-mpc'


	au VimEnter * CmdAlias nbu Unite\ -log\ neobundle/update
	au VimEnter * CmdAlias nbi NeoBundleInstall
	au VimEnter * CmdAlias nbx NeoBundleClean

Plug 'chriskempson/base16-vim'

" Thème {{{1

" Base 16 {{{2

" if filereadable(expand("~/.vimrc_background"))
"   let base16colorspace=256
"   source ~/.vimrc_background
" endif

" }}}2

" }}}1

" {{{ Libraries

" Il faut placer les librairies avant les autres plugins
" pour éviter que certains de ceux-ci ne croient à tort
" que la librairie n’est pas installée

" Objets texte

Plug 'kana/vim-textobj-user'

" Pour tcomment_vim

Plug 'tomtom/tlib_vim'

" Pour cmdalias

Plug 'coot/CRDispatcher'

" Pour crunch

Plug 'arecarn/selection.vim'

" Pour LineJuggler

Plug 'vim-scripts/ingo-library'

" }}}

	call minpac#add('kana/vim-submode', { 'type' : 'start' })

"  Submode (kana/vim-submode) {{{2

let g:submode_timeout = 0
"let g:submode_timeout = 12000

call submode#enter_with('undo/redo', 'n', '', 'g-', 'g-')
call submode#enter_with('undo/redo', 'n', '', 'g+', 'g+')
call submode#leave_with('undo/redo', 'n', '', '<Esc>')
call submode#map('undo/redo', 'n', '', '-', 'g-')
call submode#map('undo/redo', 'n', '', '+', 'g+')

call submode#enter_with('change-list', 'n', '', 'g;', 'g;')
call submode#enter_with('change-list', 'n', '', 'g,', 'g,')
call submode#leave_with('change-list', 'n', '', '<Esc>')
call submode#map('change-list', 'n', '', ';', 'g;')
call submode#map('change-list', 'n', '', ',', 'g,')

" }}}2

" Dirvish {{{2

nnoremap <D-f> :Dirvish<cr>

" }}}2

" Deol {{{2

nnoremap <D-s> :Deol<cr>

" }}}2

" Terminus (brettanomyces/nvim-terminus) {{{2

nnoremap <D-!> :TerminusOpen<space>

tmap <c-x>e <Plug>TerminusEditCommand

tmap <c-x>v <Plug>TerminusInterceptCommand

tmap <s-cr> <Plug>TerminusEditCommand
tmap <c-cr> <Plug>TerminusInterceptCommand

let g:terminus_default_prompt = '>'

" }}}2


" nnoremap µ          :<c-u>DeniteBufferDir file_rec<cr>
" nnoremap <s-µ>      :<c-u>DeniteBufferDir file_rec<cr>

" nnoremap µ          :<c-u>Denite -root-markers=.racine-projet file_rec<cr>
" nnoremap <s-µ>      :<c-u>Denite -root-markers=.racine-projet file_rec<cr>

" nnoremap µ          :<c-u>DeniteProjectDir -root-markers=.racine-projet file_rec<cr>
" nnoremap <s-µ>      :<c-u>DeniteProjectDir -root-markers=.racine-projet file_rec<cr>

nnoremap <M-Left> :CtrlSpaceGoUp<cr>
nnoremap <M-Right> :CtrlSpaceGoDown<cr>

nnoremap <M-PageUp> :CtrlSpaceGoUp<cr>
nnoremap <M-PageDown> :CtrlSpaceGoDown<cr>

"nnoremap §          :<c-u>Denite unite:outline:folding outline<cr>
nnoremap °          :<c-u>Denite -mode=normal help command filetype output:!ls<cr>

" Unite & UltiSnips {{{4

function! UltiSnipsCallUnite()
	Unite -start-insert -winheight=100 -immediately -no-empty ultisnips
	return ''
endfunction

inoremap <silent> <tab> <C-R>=(pumvisible()? "\<LT>C-E>":"")<CR><C-R>=UltiSnipsCallUnite()<CR>

"nnoremap <silent> ... a<C-R>=(pumvisible()? "\<LT>C-E>":"")<CR><C-R>=UltiSnipsCallUnite()<CR>

" }}}4

"nnoremap §          :<c-u>Denite unite:outline:folding<cr>

" Table-mode (dhruvasagar/vim-table-mode) {{{2

let g:table_mode_always_active = 0

let g:table_mode_border = 1

" Mappings {{{3

nnoremap '<F10>t' :TableModeToggle<cr>

let g:table_mode_map_prefix = '<F10>p'

nnoremap '<F10>s' :TableSort<cr>

let g:table_mode_realign_map = '<F10>pr'
let g:table_mode_delete_row_map = '<F10>pdd'
let g:table_mode_delete_column_map = '<F10>pdc'
let g:table_mode_add_formula_map = '<F10>pfa'
let g:table_mode_eval_formula_map = '<F10>pfe'
let g:table_mode_echo_cell_map = '<F10>p?'
let g:table_mode_sort_map = '<F10>ps'

" let g:table_mode_motion_up_map = '{<Bar>'
" let g:table_mode_motion_down_map = '}<Bar>'
" let g:table_mode_motion_left_map = '[<Bar>'
" let g:table_mode_motion_right_map = ']<Bar>'
" let g:table_mode_cell_text_object_a_map = 'a<Bar>'
" let g:table_mode_cell_text_object_i_map = 'i<Bar>'

" }}}3

" Caractères {{{3

let g:table_mode_separator     = '|'
let g:table_mode_corner        = '+'
let g:table_mode_corner_corner = '|'
let g:table_mode_fillchar      = '-'
let g:table_mode_delimiter     = ','
let g:table_mode_align_char    = ':'

" }}}3

" }}}2

" Easy align (junegunn/vim-easy-align) {{{2

" Start interactive EasyAlign in visual mode (e.g. vipga)

xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)

nmap ga <Plug>(EasyAlign)

" Options

let g:easy_align_ignores = ['Comment', 'String']

" }}}2

" Tabular (godlygeek/tabular) {{{2

nnoremap <s-tab> :Tabularize /
vnoremap <s-tab> :Tabularize /

" }}}2

"let g:UltiSnipsJumpForwardTrigger="<C-j>" let
"g:UltiSnipsJumpBackwardTrigger="<C-k>"

if executable('rg')
  let $FZF_DEFAULT_COMMAND = 'rg --nocolor --smart-case'
  command! -bang -nargs=* Find call fzf#vim#grep('rg\ --vimgrep\ --smart-case '.shellescape(<q-args>), 1, <bang>0)
endif

" Submode {{{2

let g:submode_timeout = 0
"let g:submode_timeout = 12000

" }}}2

" Cmdmatch (majkinetor/unite-cmdmatch) {{{2

cmap <c-o> <Plug>(unite_cmdmatch_complete)

" }}}2

"  Netrw (plugin standard) {{{2

" Chargement {{{3

"let g:loaded_netrw       = 0

" Décommenter pour ne pas charcher automatiquement netrw lors de
" l’ouverture d’un répertoire

"let g:loaded_netrwPlugin = 0

" }}}3

let g:netrw_home           = $HOME . '/racine/plugin/data/netrw'

let g:netrw_menu           = 1

let g:netrw_dirhistmax     = 712

let g:netrw_keepdir        = 0

let g:netrw_liststyle      = 1
let g:netrw_special_syntax = 1
let g:netrw_banner         = 1
let g:netrw_browse_split   = 0
let g:netrw_preview        = 0
let g:netrw_fastbrowse     = 1
let g:netrw_silent         = 1

let g:netrw_ctags          = 'ctags'
let g:netrw_ssh_cmd        = 'ssh'
let g:netrw_browsex_viewer = "kfmclient exec"

" Tri {{{3

let g:netrw_sort_by = 'name'
let g:netrw_sort_direction = 'normal'
"let g:netrw_sort_options='i'

let g:netrw_sort_sequence ='[\/]$,\<core\%(\.\d\+\)\=\>'
let g:netrw_sort_sequence .='\.otl$'
let g:netrw_sort_sequence .=',\.p\?html\?$,\.php$,\.css$,\.js$'
let g:netrw_sort_sequence .=',\.h$,\.c$,\.cpp$'
let g:netrw_sort_sequence .=',\.py$,\.pyx$'
let g:netrw_sort_sequence .='*,\~$'

" }}}3

" Masque {{{3

let g:netrw_list_hide = '\.un\~$,\.renduHtml$,\.sessionvim$'
let g:netrw_list_hide .= ',^tags$,^TAGS$,^cscope\.'

let g:netrw_list_hide .= ',^\.tarexclude$,^\.directory$'

let g:netrw_list_hide .= ',\.o$,\.so$'
let g:netrw_list_hide .= ',\.pyc$,\.elc$,\.zwc$'
let g:netrw_list_hide .= ',\.dll$,\.obj$,\.bak$,\.exe$'

let g:netrw_list_hide .= ',^RCS[\/]$,^CVS[\/]$,^\.hg[\/]$,^\.bzr[\/]$,^\.git[\/]$,\.mtn$,^_darcs[\/]$'
let g:netrw_list_hide .= ',^.hgignore$,^.bzrignore$,^.hgtags$'

let g:netrw_list_hide .= ',\.aux$,,\.log$,\.maf$,\.toc$,\.ptc$,\.mtc$'

let g:netrw_hide = 1

" }}}3

" }}}2

" Sans distraction {{{1

" Goyo (junegunn/goyo.vim) {{{2

autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" }}}2

" Limelight (junegunn/limelight.vim) {{{2

" Color name (:help cterm-colors) or ANSI code
"let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240

" Color name (:help gui-colors) or RGB color
"let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#222222'

" Default: 0.5
let g:limelight_default_coefficient = 0.7

" Number of preceding/following paragraphs to include (default: 0)
let g:limelight_paragraph_span = 1

" Beginning/end of paragraph
"   When there's no empty line between the paragraphs
"   and each paragraph starts with indentation
let g:limelight_bop = '^\s'
let g:limelight_eop = '\ze\n^\s'

" Highlighting priority (default: 10)
"   Set it to -1 not to overrule hlsearch
let g:limelight_priority = -1

" }}}2

" }}}1

"  Submode (kana/vim-submode) {{{2

call submode#enter_with('undo/redo', 'n', '', 'g-', 'g-')
call submode#enter_with('undo/redo', 'n', '', 'g+', 'g+')
call submode#leave_with('undo/redo', 'n', '', '<Esc>')
call submode#map('undo/redo', 'n', '', '-', 'g-')
call submode#map('undo/redo', 'n', '', '+', 'g+')

call submode#enter_with('change-list', 'n', '', 'g;', 'g;')
call submode#enter_with('change-list', 'n', '', 'g,', 'g,')
call submode#leave_with('change-list', 'n', '', '<Esc>')
call submode#map('change-list', 'n', '', ';', 'g;')
call submode#map('change-list', 'n', '', ',', 'g,')

" }}}2

" Fzf preview (yuki-ycino/fzf-preview.vim) {{{2

let g:fzf_preview_command = 'bat --color=always --style=grid {-1}'

" }}}2

"  YankRing (YankRing.vim) {{{2

" Mappings {{{3

" Map exceptionnel

nnoremap <silent> ç :<C-U>YRShow<cr>

" Maps ordinaires

nnoremap <silent> <F7><F7> :YRToggle<cr>
nnoremap <silent> <F7>s :<C-U>YRSearch<cr>

let g:yankring_replace_n_pkey = '<m-p>'
let g:yankring_replace_n_nkey = '<m-y>'

" Y, pour compléter C et D

function! YRRunAfterMaps()
	nnoremap Y   :<C-U>YRYankCount 'y$'<CR>
endfunction

" }}}3

" Options {{{3

let g:yankring_max_history = 420

let g:yankring_min_element_length = 2
let g:yankring_max_element_length = 90000

let g:yankring_warn_on_truncate = 1

let g:yankring_window_use_separate = 1
let g:yankring_window_auto_close   = 1
let g:yankring_window_use_horiz    = 1
let g:yankring_window_use_bottom   = 1
let g:yankring_window_height       = 25

let g:yankring_max_display = 120

" Pas besoin du menu graphique de gvim
let g:yankring_default_menu_mode = 0

let g:yankring_persist = 1
let g:yankring_share_between_instances = 1

let g:yankring_history_dir = $HOME . '/racine/plugin/data/yankring-neovim'
let g:yankring_history_file = 'yankring-hist'

let g:yankring_ignore_duplicate = 1

let g:yankring_ignore_operator = 'g~ gu gU ! = gq g? > < zf g@ @'
let g:yankring_map_dot = 0
let g:yankring_dot_repeat_yank = 0
let g:yankring_paste_using_g = 1

let g:yankring_record_insert = 1

" Désactivé car ralentit x,X, etc
let g:yankring_manage_numbered_reg = 0

let g:yankring_paste_check_default_buffer   = 1
let g:yankring_clipboard_monitor            = 1
let g:yankring_manual_clipboard_check       = 1
let g:yankring_paste_check_default_register = 1

" }}}3

" }}}2

nnoremap ç :<c-u>Unite -prompt-direction=top history/yank<cr>

"let g:VM_leader = '’'

" Multiple cursors {{{2

" let g:multi_cursor_use_default_mapping=0
"
" let g:multi_cursor_start_word_key      = '<D-n>'
" let g:multi_cursor_select_all_word_key = '<S-D-n>'
" let g:multi_cursor_start_key           = 'g<D-n>'
" let g:multi_cursor_select_all_key      = 'g<S-D-n>'
" let g:multi_cursor_next_key            = '<D-n>'
" let g:multi_cursor_prev_key            = '<D-p>'
" let g:multi_cursor_skip_key            = '<D-x>'
" let g:multi_cursor_quit_key            = '<Esc>'
"
" let g:multi_cursor_exit_from_visual_mode = 0
" let g:multi_cursor_exit_from_insert_mode = 0

" }}}2

"let g:VM_maps["Select Operator"] = 'gs'

" Neomake {{{2

nnoremap <D-m> :NeomakeSh<space>

let g:neomake_make_maker = {
	\ 'exe': 'make',
\ }

" }}}2

" Undotree (mbbill/undotree) {{{2

nnoremap <s-bs> :UndotreeToggle<cr>

" }}}2

" let g:VM_maps["Select Cursor Down"] = '<D-n>'
" let g:VM_maps["Select Cursor Up"]   = '<D-p>'

" nmap <expr> ; sneak#is_sneaking() ? '<Plug>SneakNext' : '<Plug>Sneak_s'
" nmap <expr> , sneak#is_sneaking() ? '<Plug>SneakPrevious' : '<Plug>Sneak_S'

" visual-mode

" xmap <expr> ; sneak#is_sneaking() ? '<Plug>SneakNext' : '<Plug>Sneak_s'
" xmap <expr> , sneak#is_sneaking() ? '<Plug>SneakPrevious' : '<Plug>Sneak_S'

" operator-pending-mode

" omap <expr> ; sneak#is_sneaking() ? '<Plug>SneakNext' : '<Plug>Sneak_s'
" omap <expr> , sneak#is_sneaking() ? '<Plug>SneakPrevious' : '<Plug>Sneak_S'

" nmap s <Plug>Sneak_s
" nmap S <Plug>Sneak_S

" xmap s <Plug>Sneak_s
" xmap S <Plug>Sneak_S

" omap s <Plug>Sneak_s
" omap S <Plug>Sneak_S

" ; & ,

" map ; <Plug>Sneak_;
" map , <Plug>Sneak_,

" nmap <expr> <Tab> sneak#is_sneaking() ? '<Plug>Sneak_;' : '<Tab>'
" nmap <expr> <Space> sneak#is_sneaking() ? '<Plug>Sneak_;' : '<Space>'

" Modes {{{1

" Cmdalias (coot/cmdalias_vim) {{{2

nnoremap <F11>c :CmdAliasToggle<cr>

augroup Cmdalias
	au!
	au VimEnter * CmdAlias ali\%[as] CmdAlias
	au VimEnter * CmdAlias h\%[elp] tab\ help
augroup END

" }}}2

" }}}1

" Terminal {{{1

" Neoterm (kassio/neoterm) {{{2

nnoremap <d-!> :new \| Ttoggle<cr>

nnoremap <d-$> :TREPLSendLine<cr>
vnoremap <d-$> :TREPLSendSelection<cr>

nnoremap <d-cr> :TREPLSendFile<cr>

" }}}2

" }}}1

	"au VimEnter * cd ~/racine

	" Voir g:CtrlSpaceLoadLastWorkspaceOnStart
" 	au VimEnter * cd ~/racine |
" 				\ exe "CtrlSpaceLoadWorkspace tout" |
" 				\ cd ~/racine/plain

" Démarrage {{{1

augroup Demarrage
	au!
augroup END

" }}}1

" CtrlSpace (szw/vim-ctrlspace) {{{2

" Mappings {{{3

let g:CtrlSpaceSetDefaultMapping = 1

let g:CtrlSpaceDefaultMappingKey = "<C-Space> "

let g:CtrlSpaceUseMouseAndArrowsInTerm = 1

let g:CtrlSpaceUseUnicode = 0

nnoremap <c-space> :CtrlSpace<cr>

" nnoremap <C-PageUp> :CtrlSpaceGoUp<cr>
" nnoremap <C-PageDown> :CtrlSpaceGoDown<cr>

" Voir les fichiers dans
" racine/plugin/manager/neovimpack/minpac/start/vim-ctrlspace/autoload/ctrlspace/keys

" ’ = / ne marche pas

let g:CtrlSpaceKeys = {
		\ "Nop": {
			\"h": "ctrlspace#keys#common#ToggleHelp",
		\},
		\ "Help": {
			\"h": "ctrlspace#keys#common#ToggleHelp",
		\},
		\ "Buffer": {
			\"*": "ctrlspace#keys#common#ToggleTabMode",
			\"=": "ctrlspace#keys#common#ToggleBufferMode",
			\"'": "ctrlspace#keys#common#ToggleBookmarkMode",
			\"\"": "ctrlspace#keys#common#ToggleWorkspaceMode",
		\},
		\ "Tab": {
			\"*": "ctrlspace#keys#common#ToggleTabMode",
			\"=": "ctrlspace#keys#common#ToggleBufferMode",
			\"'": "ctrlspace#keys#common#ToggleBookmarkMode",
			\"\"": "ctrlspace#keys#common#ToggleWorkspaceMode",
		\},
		\ "Workspace": {
			\"*": "ctrlspace#keys#common#ToggleTabMode",
			\"=": "ctrlspace#keys#common#ToggleBufferMode",
			\"'": "ctrlspace#keys#common#ToggleBookmarkMode",
			\"\"": "ctrlspace#keys#common#ToggleWorkspaceMode",
			\"w": "ctrlspace#keys#workspace#ToggleSubmode",
		\},
		\ "Bookmark": {
			\"*": "ctrlspace#keys#common#ToggleTabMode",
			\"=": "ctrlspace#keys#common#ToggleBufferMode",
			\"'": "ctrlspace#keys#common#ToggleBookmarkMode",
			\"\"": "ctrlspace#keys#common#ToggleWorkspaceMode",
		\},
	\}

" }}}3

" Données {{{3

let g:CtrlSpaceCacheDir = $HOME . '/racine/plugin/data/ctrlspace'

let g:CtrlSpaceProjectRootMarkers = ['.racine-projet']

let g:CtrlSpaceIgnoredFiles = '\v(tmp|temp)[\/]'

let g:CtrlSpaceSearchResonators = ['.', '/', '\', '_', '-']

" }}}3

" Limites {{{3

let g:CtrlSpaceMaxFiles = 500
let g:CtrlSpaceMaxSearchResults = 200

let g:CtrlSpaceSearchTiming = [50, 500]

" }}}3

" Recherche de fichiers {{{3

let g:CtrlSpaceFileEngine = "auto"

if executable("ag")
    let g:CtrlSpaceGlobCommand = 'ag -l --nocolor -g ""'
endif

" }}}3

" Présentation {{{3

let g:CtrlSpaceUseHorizontalSplits = 1

let g:CtrlSpaceHeight = 1
let g:CtrlSpaceMaxHeight = 0

let g:CtrlSpaceShowUnnamed = 2

let g:CtrlSpaceUseTabline = 1

let g:CtrlSpaceUnicodeFont = 1

" }}}3

" Workspaces {{{3

let g:CtrlSpaceSaveWorkspaceOnExit = 1
let g:CtrlSpaceSaveWorkspaceOnSwitch = 1
let g:CtrlSpaceLoadLastWorkspaceOnStart = 0

" }}}3

" Options {{{3

let g:CtrlSpaceCyclicList = 2
let g:CtrlSpaceMaxJumps = 120
let g:CtrlSpaceMaxSearches = 120
let g:CtrlSpaceDefaultSortOrder = 1
let g:CtrlSpaceUseMouseAndArrows = 1

" }}}3

" }}}2

nnoremap <D-g> :Grepper -tool rg<cr>
nnoremap <D-q> :Grepper -tool rg<space>

" Recherche & Remplacement {{{1

" Grepper {{{2

let g:grepper.tools =
  \ ['rg', 'ag', 'pt', 'sift', 'ack-grep', 'grep', 'git']

let g:grepper.rg = {
	\ 'grepprg':    'rg --vimgrep --smart-case',
	\ 'grepformat': '%f:%l:%c:%m',
	\ 'escape':     '\^$.*[]',
	\ }

" }}}2

" }}}1

" let g:unite_source_grep_command = 'ack'
" let g:unite_source_grep_default_opts = '--no-heading --no-color --ignore-case --all --with-filename --context=0'
" let g:unite_source_grep_recursive_opt = ''

" let g:unite_source_grep_command = 'ag'
" let g:unite_source_grep_default_opts = '--nocolor --nogroup --hidden --ignore-case -C 2'
" let g:unite_source_grep_recursive_opt = ''

nnoremap §      :<c-u>Denite outline<cr>

" Copier & Coller {{{1

" Neoyank (Shougo/neoyank.vim) {{{2

nnoremap ç :<c-u>Denite neoyank<cr>

let g:neoyank#limit = 4200
let g:neoyank#length = 10000

let g:neoyank#save_registers = [
			\'"',
			\'+',
			\'*',
			\'-',
			\'.',
			\':',
			\'/',
			\'%',
			\'0',
			\'1',
			\'2',
			\'3',
			\'4',
			\'5',
			\'6',
			\'7',
			\'8',
			\'9',
			\]

let g:neoyank#file = $HOME . '/racine/plugin/data/unite/neoyank/history-neovim'

autocmd BufWinEnter \(*.asc\|*.gpg\) let g:neoyank_disable_write = 1

" }}}2

" }}}1

" {{{ Neoyank

autocmd BufWinEnter \(*.asc\|*.gpg\) let g:neoyank_disable = 1

" }}}

" Unite {{{1

autocmd FileType unite call s:unite_my_settings()

function! s:unite_my_settings()
	imap <silent><buffer><expr> <C-s>     unite#do_action('split')
endfunction

" }}}1

" Unite {{{2

" Données {{{3

let g:unite_data_directory = $HOME . '/racine/plugin/data/unite'

let g:unite_source_file_mru_long_limit = 12743
let g:unite_source_mru_update_interval = 900

let g:unite_source_directory_mru_long_limit = 3600

" }}}3

" Répertoires {{{3

let g:unite_kind_openable_cd_command = 'cd'
let g:unite_kind_openable_lcd_command = 'lcd'

" }}}3

" Présentation {{{3

let g:unite_split_rule = 'dynamicbottom'

let g:unite_enable_split_vertically = 0

let g:unite_prompt = 'unite> '

" }}}3

" Copie & Collage {{{3

let g:unite_source_history_yank_enable = 1
let g:unite_source_history_yank_save_clipboard = 1

let g:unite_source_history_yank_limit = 543

" }}}3

" Recherche grep {{{3

let g:unite_source_grep_max_candidates = 570

let g:unite_source_grep_command = 'grep'
let g:unite_source_grep_default_opts = '--ignore-case --with-filename --line-number --context=0'
let g:unite_source_grep_recursive_opt = '-r'

let g:unite_source_find_max_candidates = 570

" }}}3

" }}}2

"  Unite (Shougo/unite.vim) {{{2

" Mappings {{{3

nnoremap <F11>u       :<c-u>Unite -prompt-direction=top<space>

nnoremap <S-F11>u     :<c-u>Unite -prompt-direction=top source<cr>

"nnoremap z=         :<c-u>Unite -winheight=15 spell_suggest<cr>

"nnoremap é          :<c-u>Unite -start-insert -prompt-direction=top line<cr>

"nnoremap §          :<c-u>Unite -start-insert -prompt-direction=top outline:folding<cr>

"nnoremap °          :<c-u>Unite -start-insert -prompt-direction=top buffer<cr>

"nnoremap è          :<c-u>Unite -prompt-direction=top jump<cr>

"nnoremap ù          :<c-u>Unite -start-insert -prompt-direction=top neomru/file buffer<cr>
"nnoremap µ          :<c-u>Unite -start-insert -prompt-direction=top file_rec/neovim<cr>
"nnoremap <s-µ>      :<c-u>Unite -start-insert -prompt-direction=top file_rec/neovim<cr>

"nnoremap £          :<c-u>Unite -start-insert -prompt-direction=top tag<cr>

" nnoremap <C-F3>b      :<c-u>Unite -prompt-direction=top buffer<cr>
" nnoremap <C-F3>B      :<c-u>Unite -prompt-direction=top bookmark<cr>
" nnoremap <C-F3>c      :<c-u>Unite -prompt-direction=top command<cr>
" nnoremap <C-F3>d      :<c-u>Unite -prompt-direction=top directory<cr>
" nnoremap <C-F3>f      :<c-u>Unite -prompt-direction=top file_rec/async<cr>
" nnoremap <C-F3>g      :<c-u>Unite -prompt-direction=top grep<cr>
" nnoremap <C-F3>m      :<c-u>Unite -prompt-direction=top mapping<cr>
" nnoremap <C-F3>M      :<c-u>Unite -no-split output:message<cr>
" nnoremap <C-F3>h      :<c-u>Unite -prompt-direction=top help<cr>
" nnoremap <C-F3>l      :<c-u>Unite -prompt-direction=top line<cr>
" nnoremap <C-F3>q      :<c-u>Unite -no-quit -prompt-direction=top quickfix<cr>
" nnoremap <C-F3>r      :<c-u>Unite -prompt-direction=top file_mru<cr>
" nnoremap <C-F3>t      :<c-u>Unite -prompt-direction=top tag<cr>
" nnoremap <C-F3>T      :<c-u>Unite -prompt-direction=top gtags/grep<cr>
" nnoremap <C-F3>o      :<c-u>Unite -prompt-direction=top outline<cr>
" nnoremap <C-F3>z      :<c-u>Unite -prompt-direction=top outline:folding<cr>
" nnoremap <C-F3>'      :<c-u>Unite -prompt-direction=top mark<cr>
" nnoremap <C-F3>"      :<c-u>Unite -prompt-direction=top register<cr>
" nnoremap <C-F3>!      :<c-u>Unite -prompt-direction=top launcher<cr>
" nnoremap <C-F3>:      :<c-u>Unite -prompt-direction=top history/command<cr>
" nnoremap <C-F3>/      :<c-u>Unite -prompt-direction=top history/search<cr>
" nnoremap <C-F3>y      :<c-u>Unite -prompt-direction=top history/yank<cr>
" nnoremap <C-F3>j      :<c-u>Unite -prompt-direction=top jump<cr>
" nnoremap <C-F3><tab>  :<c-u>Unite -prompt-direction=top jump<cr>
" nnoremap <C-F3><bs>   :<c-u>Unite -prompt-direction=top change<cr>

"nnoremap <C-F3>a      :<c-u>UniteBookmarkAdd<cr>

"nnoremap <C-F3>s      :<c-u>Unite junkfile<cr>

" }}}3

" Ignore {{{3

call unite#custom#source('file_rec', 'ignore_globs',
	\ split(&wildignore, ','))

" }}}3

" Motifs flous {{{3

" call unite#filters#matcher_default#use(['matcher_fuzzy'])

" }}}3

" Présentation {{{3

call unite#custom#profile('default', 'context', {
\   'direction' : 'dynamicbottom'
\ })

call unite#custom#profile('default', 'context', {
\   'winheight' : 20
\ })

call unite#custom#profile('default', 'context', {
\   'winwidth' : 20
\ })

" }}}3

" }}}2

" Neomru (Shougo/neomru.vim) {{{2

call unite#custom#source('neomru/file', 'ignore_globs',
			\ [
			\ '/home/*/racine/plugin/manager/**/doc/*.txt',
			\ 'term://*',
			\ 'man://*',
			\ ])

" }}}2

" Visual multi (mg979/vim-visual-multi) {{{2

" Mappings {{{3

let g:VM_default_mappings = 0
let g:VM_mouse_mappings = 0

let g:VM_leader = {
			\'default': '<d-v>',
			\'visual': '<d-v>',
			\'buffer': '<d-v>'
			\}

let g:VM_maps = {}

let g:VM_maps['Find Under']          = '<d-v>u'
let g:VM_maps['Find Subword Under']  = '<d-v>U'
let g:VM_maps["Add Cursor Down"]     = '<d-n>'
let g:VM_maps["Add Cursor Up"]       = '<d-p>'
let g:VM_maps["Select All"]          = '<d-v>A'
let g:VM_maps["Start Regex Search"]  = '<d-v>/'
let g:VM_maps["Add Cursor At Pos"]   = '<d-v><d-v>'
let g:VM_maps["Reselect Last"]       = '<d-v>gv'

let g:VM_maps["Visual All"]     = '<d-v>A'
let g:VM_maps["Visual Regex"]   = '<d-v>/'
let g:VM_maps["Visual Find"]    = '<d-v>f'
let g:VM_maps["Visual Cursors"] = '<d-v>c'
let g:VM_maps["Visual Add"]     = '<d-v>a'

let g:VM_maps["Visual Subtract"] = '<d-v>s'
let g:VM_maps["Visual Reduce"]   = '<d-v>r'

let g:VM_maps["Find Next"]     = 'n'
let g:VM_maps["Find Prev"]     = 'N'
let g:VM_maps["Goto Next"]     = ']'
let g:VM_maps["Goto Prev"]     = '['
let g:VM_maps["Seek Next"]     = '<C-f>'
let g:VM_maps["Seek Prev"]     = '<C-b>'
let g:VM_maps["Skip Region"]   = 'q'
let g:VM_maps["Remove Region"] = 'Q'

let g:VM_maps["Invert Direction"] = 'o'
let g:VM_maps["Replace"]          = 'R'
let g:VM_maps["Surround"]         = 'S'
let g:VM_maps["Move Right"]       = '<M-S-Right>'
let g:VM_maps["Move Left"]        = '<M-S-Left>'

let g:VM_maps["I Next"] = '<tab>'
let g:VM_maps["I Prev"] = '<s-tab>'

let g:VM_maps["Select Operator"] = 's'
let g:VM_maps["Find Operator"]   = 'm'

let g:VM_maps["Increase"]       = '<c-a>'
let g:VM_maps["Decrease"]       = '<c-x>'
let g:VM_maps["Alpha-Increase"] = '<d-v><c-a>'
let g:VM_maps["Alpha-Decrease"] = '<d-v><c-x>'

let g:VM_maps["Transpose"]           = '<d-v>t'
let g:VM_maps["Align"]               = '<d-v>a'
let g:VM_maps["Align Char"]          = '<d-v><'
let g:VM_maps["Align Regex"]         = '<d-v>>'
let g:VM_maps["Split Regions"]       = '<d-v>|'
let g:VM_maps["Filter Regions"]      = '<d-v>f'
let g:VM_maps["Transform Regions"]   = '<d-v>e'
let g:VM_maps["Rewrite Last Search"] = '<d-v>r'
let g:VM_maps["Merge Regions"]       = '<d-v>m'
let g:VM_maps["Duplicate"]           = '<d-v>d'
let g:VM_maps["Shrink"]              = '<d-v>-'
let g:VM_maps["Enlarge"]             = '<d-v>+'
let g:VM_maps["Numbers"]             = '<d-v>0'
let g:VM_maps["Numbers Append"]      = '<d-v>1'

let g:VM_maps["Run Normal"]      = '<d-v>n'
let g:VM_maps["Run Visual"]      = '<d-v>v'
let g:VM_maps["Run Ex"]          = '<d-v>:'
let g:VM_maps["Run Last Normal"] = '<d-v>N'
let g:VM_maps["Run Last Visual"] = '<d-v>V'
let g:VM_maps["Run Last Ex"]     = '<d-v>X'
let g:VM_maps["Run Macro"]       = '<d-v>@'

let g:VM_maps["Select Cursor Down"] = '<C-Down>'
let g:VM_maps["Select Cursor Up"]   = '<C-Up>'

let g:VM_maps["Undo"] = 'u'
let g:VM_maps["Redo"] = '<C-r>'

let g:VM_maps["Tools Menu"]           = '<d-v>='
let g:VM_maps["Case Conversion Menu"] = '<d-v>C'
let g:VM_maps["Show Registers"]       = '<d-v>"'
let g:VM_maps["Toggle Whole Word"]    = '<d-v>w'
let g:VM_maps["Case Settings"]        = '<d-v>c'
let g:VM_maps["Toggle Multiline"]     = '<d-v>M'
let g:VM_maps["Toggle Mappings"]      = '<d-v><d-v>'
let g:VM_maps["Toggle Block"]         = '<d-v><c-v>'
let g:VM_maps["Toggle Single Region"] = '<d-v><cr>'

" }}}3

" Options {{{3

let g:VM_set_statusline = 2
let g:VM_silent_exit = 1

" }}}3

" Couleurs {{{3

" *g:VM_Mono_hl*    is the highlight in cursor mode
" *g:VM_Extend_hl*  ,, in extend mode (the selections)
" *g:VM_Cursor_hl*  ,, in extend mode (the cursors)
" *g:VM_Insert_hl*  ,, in insert mode (the virtual cursors)

let g:VM_Mono_hl   = 'VisualMultiMono'
let g:VM_Extend_hl = 'VisualMultiExtend'
let g:VM_Cursor_hl = 'VisualMultiExtendCursors'
let g:VM_Insert_hl = 'VisualMultiInsert'

let g:VM_highlight_matches = 'hi Search	guifg=#5B3C11 guibg=black gui=underline'

" }}}3

" }}}2

" Neomru {{{2

let g:neomru#file_mru_path = $HOME . '/racine/plugin/data/unite/neomru/file-neovim'

let g:neomru#file_mru_limit = 900

let g:neomru#directory_mru_path = $HOME . '/racine/plugin/data/unite/neomru/directory-neovim'

let g:neomru#directory_mru_limit = 300

let g:neomru#do_validate = 0

" }}}2

nnoremap ù      :<c-u>Denite file_mru file/rec<cr>
nnoremap °      :<c-u>Denite buffer<cr>

" Esearch {{{2

let g:esearch = {
	\ 'adapter':    'ag',
	\ 'backend':    'nvim',
	\ 'out':        'qflist',
	\ 'batch_size': 1000,
	\ 'use':        ['visual', 'hlsearch', 'last'],
	\}

nmap <D-r> <Plug>(esearch)

" }}}2

" Crunch (arecarn/crunch.vim {{{2

nnoremap <C-=> :Crunch<space>

" }}}2


" Exploration multiple {{{1

" Denite {{{2

" Mappings de lancement {{{3

nnoremap <F1>   :<c-u>Denite help<cr>
nnoremap <S-F1> :<c-u>Denite<space>
nnoremap <C-F1> :<c-u>Denite source<cr>

"nnoremap ...    :<c-u>Denite directory_rec<cr>

" }}}3

" Options {{{3

call denite#custom#option('default', {
	  \ 'split' : 'floating',
	  \ 'highlight_mode_normal' : 'Visual',
	  \ 'highlight_mode_insert' : 'Visual',
	  \ 'highlight_matched_char' : 'false',
	  \ 'highlight_matched_range' : 'false',
	  \ })

call denite#custom#source(
\ 'file_mru', 'matchers', ['matcher/substring'])

" call denite#custom#var(
" \ 'file/rec', 'command',
" \ ['ag', '--nocolor', '--smart-case', '--vimgrep', '-g', ''])

call denite#custom#var(
\ 'file/rec', 'command',
\ ['ag', '--nocolor', '--smart-case', '--vimgrep', '-g', ''])

call denite#custom#source(
\ 'file/rec', 'matchers', ['matcher/substring'])

" call denite#custom#source(
" \ 'file/rec', 'matchers', ['matcher/cpsm'])

call denite#custom#source(
\ 'file/rec', 'sorters', ['sorter/rank'])

call denite#custom#source(
\ 'directory_rec', 'sorters', ['sorter/sublime'])

call denite#custom#source(
\ 'line', 'matchers', ['matcher/substring'])

call denite#custom#source(
\ 'buffer', 'sorters', ['sorter/reverse'])

" }}}3

" }}}2

" }}}1

" Denite {{{1

autocmd FileType denite call s:denite_my_settings()

function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
  nnoremap <silent><buffer><expr> <Tab> denite#do_map('choose_action')

  nnoremap <silent><buffer><expr> ç denite#do_map('do_action', 'yank')

  nnoremap <silent><buffer><expr> s denite#do_map('do_action', 'splitswitch')
  nnoremap <silent><buffer><expr> v denite#do_map('do_action', 'vsplitswitch')
  nnoremap <silent><buffer><expr> t denite#do_map('do_action', 'tabopen')

  nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> & denite#do_map('filter', '.vim')

  nnoremap <silent><buffer><expr> u denite#do_map('move_up_path')

  nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
  nnoremap <silent><buffer><expr> <C-A> denite#do_map('select_all')

  nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> D denite#do_map('do_action', 'delete')

  nnoremap <silent><buffer><expr> <C-L> denite#do_map('redraw')
  nnoremap <silent><buffer><expr> <C-R> denite#do_map('restart')

  nnoremap <silent><buffer><expr> ù denite#do_map('restore_sources')
  nnoremap <silent><buffer><expr> µ denite#do_map('restore_sources')

  nnoremap <silent><buffer><expr> q denite#do_map('quit')
  nnoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
  inoremap <silent><buffer><expr> <C-c> denite#do_map('quit')

  inoremap <silent><buffer><expr> <bs> denite#do_map('i_<Plug>(denite_filter_backspace)')
  inoremap <silent><buffer><expr> <cr> denite#do_map('i_<Plug>(denite_filter_update)')
endfunction

" }}}1

" FZF {{{1

autocmd! User FzfStatusLine call <SID>fzf_statusline()

" }}}1

Plug 'junegunn/fzf', { 'do' : './install --all' }

" Exploration de l’arborescence du système de fichiers {{{1

" Vifm {{{2

nnoremap <D-f> :Vifm .<cr>

let g:vifmSplitWidth = 300

" }}}2

" Ranger {{{2

nnoremap <S-D-F> :Ranger<cr>

" }}}2

" }}}1

" Unite-outline (Shougo/unite-outline) {{{2

" Pour compatibilité, variable dépréciée dans unite
" Réglé
"let g:unite_abbr_highlight = 'Normal'

" }}}2

" Tableaux {{{1

" }}}1

" Alignement {{{1

" }}}1

" empeche vimwiki de fonctionner
" let g:vimwiki_listsyms = '✗○◐●✓'
" let g:vimwiki_listsym_rejected = '✗'

" Abréviations {{{1

" }}}1

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

function! s:fzf_statusline()
  " Override statusline as you like
  highlight fzf1 ctermfg=0 ctermbg=3
  highlight fzf2 ctermfg=0 ctermbg=3
  highlight fzf3 ctermfg=0 ctermbg=3
  setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
endfunction

	call minpac#add('terryma/vim-multiple-cursors', { 'type' : 'opt' })

" Brouillons {{{1

" Backscratch {{{2

nnoremap <F10> :Scratch<space>
nnoremap <d-s> :Scratch<space>

" }}}2

" }}}1

map \cc <plug>NERDCommenterToggle
map \c<space> <plug>NERDCommenterComment
map \cn <plug>NERDCommenterNest
map \cm <plug>NERDCommenterMinimal
map \ci <plug>NERDCommenterInvert
map \cs <plug>NERDCommenterSexy
map \cy <plug>NERDCommenterYank
map \c$ <plug>NERDCommenterToEOL
map \cA <plug>NERDCommenterAppend
map \cI <plug>NERDCommenterInsert
map \ca <plug>NERDCommenterAltDelims
map \cl <plug>NERDCommenterAlignLeft
map \cb <plug>NERDCommenterAlignBoth
map \cu <plug>NERDCommenterUncommentLine

" Textobj-user & dérivés (kana/vim-textobj-user) {{{2

let g:textobj_between_no_default_key_mappings = 1

omap  ai  <Plug>(textobj-between-a)
xmap  ai  <Plug>(textobj-between-a)
omap  ii  <Plug>(textobj-between-i)
xmap  ii  <Plug>(textobj-between-i)

let g:textobj_delimited_no_default_key_mappings = 1

omap  ad  <Plug>(textobj-delimited-forward-a)
xmap  ad  <Plug>(textobj-delimited-forward-a)
omap  id  <Plug>(textobj-delimited-forward-i)
xmap  id  <Plug>(textobj-delimited-forward-i)

let g:textobj_line_no_default_key_mappings = 1

omap  al  <Plug>(textobj-line-a)
xmap  al  <Plug>(textobj-line-a)
omap  il  <Plug>(textobj-line-i)
xmap  il  <Plug>(textobj-line-i)

let g:textobj_indent_no_default_key_mappings = 1

omap  a<tab>  <Plug>(textobj-indent-a)
xmap  a<tab>  <Plug>(textobj-indent-a)
omap  i<tab>  <Plug>(textobj-indent-i)
xmap  i<tab>  <Plug>(textobj-indent-i)

let g:textobj_comment_no_default_key_mappings = 1

omap  ac  <Plug>(textobj-comment-a)
xmap  ac  <Plug>(textobj-comment-a)
omap  ic  <Plug>(textobj-comment-i)
xmap  ic  <Plug>(textobj-comment-i)

let g:textobj_function_no_default_key_mappings = 1

omap  af  <Plug>(textobj-function-a)
xmap  af  <Plug>(textobj-function-a)
omap  if  <Plug>(textobj-function-i)
xmap  if  <Plug>(textobj-function-i)

let g:textobj_fold_no_default_key_mappings = 1

omap  az  <Plug>(textobj-fold-a)
xmap  az  <Plug>(textobj-fold-a)
omap  iz  <Plug>(textobj-fold-i)
xmap  iz  <Plug>(textobj-fold-i)

let g:textobj_entire_no_default_key_mappings = 1

omap  ae  <Plug>(textobj-entire-a)
xmap  ae  <Plug>(textobj-entire-a)
omap  ie  <Plug>(textobj-entire-i)
xmap  ie  <Plug>(textobj-entire-i)

" }}}2

	call minpac#add('tpope/vim-jdaddy', { 'type' : 'opt' })
	call minpac#add('axiaoxin/vim-json-line-format', { 'type' : 'opt' })

" Filtres {{{1

"  Narrow region (chrisbra/NrrwRgn) {{{2

nnoremap à :NarrowRegion<cr><c-w>_zR<c-w>_

vnoremap à :NarrowRegion<cr><c-w>_zR_<c-w>_

"xmap à <Plug>NrrwrgnDo

nmap _ <Plug>NrrwrgnWinIncr

let g:nrrw_rgn_vert = 0

let g:nrrw_rgn_wdth = 20
let g:nrrw_rgn_incr = 10

let g:nrrw_topbot_leftright = 'aboveleft'
"let g:nrrw_topbot_leftright = 'botright'

let g:nrrw_rgn_nohl = 0

let g:nrrw_rgn_update_orig_win = 1

" }}}2

" }}}1

	nmap <silent> <pageup>       <plug>(wheel-previous-location)
	nmap <silent> <pagedown>     <plug>(wheel-next-location)
	nmap <silent> <c-pageup>     <plug>(wheel-previous-circle)
	nmap <silent> <c-pagedown>   <plug>(wheel-next-circle)
	nmap <silent> <s-pageup>     <plug>(wheel-previous-torus)
	nmap <silent> <s-pagedown>   <plug>(wheel-next-torus)

	nmap <silent> <home>       <plug>(wheel-history-newer)
	nmap <silent> <end>        <plug>(wheel-history-older)
	nmap <silent> <c-home>     <plug>(wheel-history-newer-in-circle)
	nmap <silent> <c-end>      <plug>(wheel-history-older-in-circle)
	nmap <silent> <s-home>     <plug>(wheel-history-newer-in-torus)
	nmap <silent> <s-end>      <plug>(wheel-history-older-in-torus)

" Configuration des plugins

" Librairies : fonctions, utilitaires {{{1

" Tlib (tomtom/tlib_vim) {{{2

"nnoremap ...p <cmd>TBrowseOutput<space>

"nnoremap ...o <cmd>exec 'e' fnameescape(tlib#input#List('s', 'Old file', v<cmd>oldfiles))<cr>

" }}}2

" }}}1

" Vimwiki {{{1

augroup VimWiki
	autocmd!
	autocmd BufRead *.wiki nmap <buffer> \we <cmd>Vimwiki2HTML<cr>
	autocmd BufRead *.wiki nmap <buffer> \wc <cmd>VimwikiTOC<cr>
augroup END

" }}}1

" Complétion {{{1

" Deoplete {{{2

"let g:deoplete#enable_at_startup = 1

" }}}2

" Wilder {{{2

nnoremap <d-m> <cmd>call wilder#toggle()<cr>

call wilder#enable_cmdline_enter()
call wilder#disable()

cmap <expr> <Tab> wilder#in_context() ? wilder#next() : "\<Tab>"
cmap <expr> <C-N> wilder#in_context() ? wilder#next() : "\<C-N>"
cmap <expr> <C-P> wilder#in_context() ? wilder#previous() : "\<C-P>"

" only / and ? are enabled by default
call wilder#set_option('modes', ['/', '?', ':'])

" }}}2

" }}}1

" FZF (junegunn/fzf.vim) {{{2

" Mappings {{{3

nnoremap <f7>a <cmd>Ag<cr>
nnoremap <f7>b <cmd>Buffers<cr>
nnoremap <f7>c <cmd>Commands<cr>
nnoremap <f7>C <cmd>Commits<cr>
nnoremap <f7>f <cmd>Files<cr>
nnoremap <f7>F <cmd>Filetypes<cr>
nnoremap <f7>g <cmd>GitFiles<cr>
nnoremap <f7>h <cmd>History<cr>
nnoremap <f7>H <cmd>Helptags<cr>
nnoremap <f7>l <cmd>Lines<cr>
nnoremap <f7>m <cmd>Marks<cr>
nnoremap <f7>M <cmd>Maps<cr>
nnoremap <f7>r <cmd>Rg<cr>
nnoremap <f7>s <cmd>Snippets<cr>
nnoremap <f7>t <cmd>Tags<cr>
nnoremap <f7>w <cmd>Windows<cr>

" }}}3

" Options {{{3

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/racine/hist/fzf'

" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

let $FZF_DEFAULT_OPTS="--reverse " " top to bottom

" }}}3

" Présentation {{{3

" Default fzf layout
" - down / up / left / right

" popup
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }

"let g:fzf_layout = { 'down': '~40%' }

" In Neovim, you can set up fzf window using a Vim command
"let g:fzf_layout = { 'window': 'new' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

function! s:fzf_statusline()
  " Override statusline as you like
  highlight fzf1 ctermfg=0 ctermbg=3
  highlight fzf2 ctermfg=0 ctermbg=3
  highlight fzf3 ctermfg=0 ctermbg=3
  setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
endfunction

" }}}3

" }}}2

" Abolish (tpope/vim-abolish) {{{2

let g:abolish_save_file = $HOME . '/racine/plugin/data/abolish/abreviations'

nnoremap <F11>a <cmd>Abolish //<Left>
nnoremap <F11>s <cmd>Subvert //<Left>

" }}}2

" Recherche & Remplacement {{{1

" Quickfix reflector (stefandtw/quickfix-reflector.vim) {{{2

let g:qf_join_changes = 0
let g:qf_modifiable = 1
let g:qf_write_changes = 0

" }}}2

" QFGrep {{{2

" nmap <buffer> \r <Plug>QFRestore
" nmap <buffer> \v <Plug>QFGrepV
" nmap <buffer> \g <Plug>QFGrepG

let g:QFG_hi_prompt='guifg=#5B3C11 guibg=black ctermfg=3 ctermbg=NONE'
let g:QFG_hi_info='guifg=#5B3C11 guibg=black ctermfg=3 ctermbg=NONE'
let g:QFG_hi_error='guifg=#5B3C11 guibg=black ctermfg=3 ctermbg=NONE'

" }}}2

" }}}1

" Neorg {{{2

lua << EOF

local parser_configs = require('nvim-treesitter.parsers').get_parser_configs()

parser_configs.norg = {
    install_info = {
        url = "https://github.com/nvim-neorg/tree-sitter-norg",
        files = { "src/parser.c", "src/scanner.cc" },
        branch = "main"
    },
}

require('nvim-treesitter.configs').setup {
	ensure_installed = { "norg", "c" },
}

require('neorg').setup {
	-- Tell Neorg what modules to load
	load = {
		["core.defaults"] = {}, -- Load all the default modules
		["core.norg.concealer"] = {}, -- Allows for use of icons
		["core.norg.dirman"] = { -- Manage your directories with Neorg
			config = {
				workspaces = {
					neorg = "~/racine/organ/neorg"
					}
				}
		}
	},
}

EOF

" }}}2

" Vimwiki {{{2

" Common wiki settings {{{3

let common_wiki = {}

let common_wiki.ext = '.wiki'
let common_wiki.list_margin = -1

let common_wiki.index = 'main'
let common_wiki.diary_index = 'diary'
let common_wiki.diary_header = 'Diary'
let common_wiki.diary_sort = 'desc'

let common_wiki.syntax = 'default'
let common_wiki.automatic_nested_syntaxes = 1
let common_wiki.nested_syntaxes = {'python': 'python', 'c++': 'cpp'}

let common_wiki.auto_export = 0
let common_wiki.auto_toc = 0
let common_wiki.auto_tags = 1
let common_wiki.auto_diary_index = 1

let common_wiki.custom_wiki2html = ''
let common_wiki.custom_wiki2html_args = ''
let common_wiki.template_default =  'default'
let common_wiki.template_ext = '.tpl'
let common_wiki.maxhi = 0

" }}}3

" Plain wiki {{{3

let plain_wiki = deepcopy(common_wiki)

let plain_wiki.path = '~/racine/wiki/plain/wiki'
let plain_wiki.path_html = '~/racine/wiki/plain/html'
let plain_wiki.template_path =  '~/racine/wiki/plain/template'
let plain_wiki.index = 'main'
let plain_wiki.css_name = 'style.css'

" }}}3

" Site wiki {{{3

let site_wiki = deepcopy(common_wiki)

let site_wiki.path = '~/racine/wiki/site/wiki'
let site_wiki.path_html = '~/racine/wiki/site/html'
let site_wiki.template_path =  '~/racine/wiki/site/template'
let site_wiki.index = 'index'
let site_wiki.css_name = 'style/defaut.css'

" }}}3

"  List of wikis{{{3

let g:vimwiki_list = [plain_wiki, site_wiki]

" }}}3

" Global settings {{{3

let g:vimwiki_ext2syntax = {'.md': 'markdown',
			  \ '.mkd': 'markdown',
			  \ '.wiki': 'media'}

let g:vimwiki_diary_months = {
      \ 1: 'January', 2: 'February', 3: 'March',
      \ 4: 'April', 5: 'May', 6: 'June',
      \ 7: 'July', 8: 'August', 9: 'September',
      \ 10: 'October', 11: 'November', 12: 'December'
      \ }

let g:vimwiki_hl_headers = 0
let g:vimwiki_hl_cb_checked = 0
let g:vimwiki_global_ext = 0
let g:vimwiki_menu = 'Vimwiki'
let g:vimwiki_use_mouse = 1
let g:vimwiki_folding = 'expr'
let g:vimwiki_list_ignore_newline = 1
let g:vimwiki_text_ignore_newline = 1
let g:vimwiki_use_calendar = 1
let g:vimwiki_table_mappings = 1
let g:vimwiki_table_auto_fmt = 1
let g:vimwiki_CJK_length = 1
let g:vimwiki_dir_link = ''
let g:vimwiki_html_header_numbering = 1
let g:vimwiki_html_header_numbering_sym = ''
let g:vimwiki_valid_html_tags = 'b,i,s,u,sub,sup,kbd,br,hr'
let g:vimwiki_user_htmls = '404.html,search.html'
let g:vimwiki_conceallevel = 2
let g:vimwiki_autowriteall = 1
let g:vimwiki_url_maxsave = 15
let g:vimwiki_toc_header = 'Contents'
let g:vimwiki_map_prefix = '<Leader>w'
let g:vimwiki_auto_chdir = 1

" }}}3

" }}}2

	call minpac#add('Shougo/defx.nvim', { 'type' : 'opt' })
	call minpac#add('Shougo/denite.nvim', { 'type' : 'opt' })
	call minpac#add('Shougo/deol.nvim', { 'type' : 'opt' })
	call minpac#add('Shougo/deoplete.nvim', { 'type' : 'opt' })
	call minpac#add('Shougo/neobundle-vim-recipes', { 'type' : 'opt' })
	call minpac#add('Shougo/neomru.vim', { 'type' : 'opt' })
	call minpac#add('Shougo/neoyank.vim', { 'type' : 'opt' })
	call minpac#add('Shougo/unite-outline', { 'type' : 'opt' })
	call minpac#add('Shougo/unite.vim', { 'type' : 'opt' })
	call minpac#add('Shougo/vimfiler.vim', { 'type' : 'opt' })
	call minpac#add('arecarn/selection.vim', { 'type' : 'opt' })
	call minpac#add('brettanomyces/nvim-terminus', { 'type' : 'opt' })
	call minpac#add('chrisbra/vim_faq', { 'type' : 'opt' })
	call minpac#add('cideM/yui', { 'type' : 'opt' })
	call minpac#add('dbeniamine/vim-mail', { 'type' : 'opt' })
	call minpac#add('eugen0329/vim-esearch', { 'type' : 'opt' })
	call minpac#add('flazz/vim-colorschemes', { 'type' : 'opt' })
	call minpac#add('francoiscabrol/ranger.vim', { 'type' : 'opt' })
	call minpac#add('godlygeek/tabular', { 'type' : 'opt' })
	call minpac#add('hauleth/vim-backscratch', { 'type' : 'opt' })
	call minpac#add('hewes/unite-gtags', { 'type' : 'opt' })
	call minpac#add('honza/vim-snippets', { 'type' : 'opt' })
	call minpac#add('jamessan/vim-gnupg', { 'type' : 'opt' })
	call minpac#add('jceb/vim-orgmode', { 'type' : 'opt' })
	call minpac#add('k-takata/minpac', {'type': 'opt'})
	call minpac#add('kassio/neoterm', { 'type' : 'opt' })
	call minpac#add('kmnk/vim-unite-giti', { 'type' : 'opt' })
	call minpac#add('kopischke/unite-spell-suggest', { 'type' : 'opt' })
	call minpac#add('maralla/completor.vim', { 'type' : 'opt' })
	call minpac#add('mg979/vim-visual-multi', { 'type' : 'opt' })
	call minpac#add('mhinz/vim-grepper', { 'type' : 'opt' })
	call minpac#add('milisims/nvim-luaref', { 'type' : 'opt' })
	call minpac#add('neomake/neomake', { 'type' : 'opt' })
	call minpac#add('nixprime/cpsm', { 'type' : 'opt' })
	call minpac#add('nvim-lua/popup.nvim', { 'type' : 'opt' })
	call minpac#add('nvim-neorg/neorg', { 'type' : 'opt' })
	call minpac#add('nvim-telescope/telescope.nvim', { 'type' : 'opt' })
	call minpac#add('osyo-manga/unite-quickfix', { 'type' : 'opt' })
	call minpac#add('rbgrouleff/bclose.vim', { 'type' : 'opt' })
	call minpac#add('rhysd/open-pdf.vim', { 'type' : 'opt' })
	call minpac#add('simnalamburt/vim-mundo', { 'type' : 'opt' })
	call minpac#add('sjl/gundo.vim', { 'type' : 'opt' })
	call minpac#add('sk1418/QFGrep', { 'type' : 'opt' })
	call minpac#add('t9md/vim-textmanip', { 'type' : 'opt' })
	call minpac#add('tacroe/unite-mark', { 'type' : 'opt' })
	call minpac#add('thinca/vim-visualstar', { 'type' : 'opt' })
	call minpac#add('tomtom/tlib_vim', { 'type' : 'opt' })
	call minpac#add('tpope/vim-abolish', { 'type' : 'opt' })
	call minpac#add('tpope/vim-eunuch', { 'type' : 'opt' })
	call minpac#add('tpope/vim-unimpaired', { 'type' : 'opt' })
	call minpac#add('tsukkee/unite-help', { 'type' : 'opt' })
	call minpac#add('tsukkee/unite-tag', { 'type' : 'opt' })
	call minpac#add('ujihisa/unite-locate', { 'type' : 'opt' })
	call minpac#add('urbainvaes/vim-ripple', { 'type' : 'opt' })
	call minpac#add('vifm/neovim-vifm', { 'type' : 'opt' })
	call minpac#add('vim-ctrlspace/vim-ctrlspace', { 'type' : 'opt' })
	call minpac#add('vim-scripts/LogiPat', { 'type' : 'opt' })
	call minpac#add('vim-scripts/rcs.vim', { 'type' : 'opt' })
	call minpac#add('vim-scripts/vcscommand.vim', { 'type' : 'opt' })
	call minpac#add('vim-scripts/vis', { 'type' : 'opt' })
	call minpac#add('vim-scripts/visSum.vim', { 'type' : 'opt' })
	call minpac#add('vim-scripts/visualrepeat', { 'type' : 'opt' })
	call minpac#add('vim-utils/vim-husk', { 'type' : 'opt' })
	call minpac#add('vim-utils/vim-line', { 'type' : 'opt' })
	call minpac#add('vim-utils/vim-space', { 'type' : 'opt' })
	call minpac#add('vim-utils/vim-vertical-move', { 'type' : 'opt' })
	call minpac#add('vimoutliner/vimoutliner', { 'type' : 'opt' })
	call minpac#add('vimwiki/vimwiki', { 'type' : 'opt' })
	call minpac#add('voldikss/vim-floaterm', { 'type' : 'opt' })
	call minpac#add('yaroot/vissort', { 'type' : 'opt' })
	call minpac#add('yuki-ycino/fzf-preview.vim', { 'type' : 'opt' })

	" required for orgmode.nvim
	call minpac#add('nvim-lua/plenary.nvim', { 'type' : 'start' })

	"call packager#add('nvim-treesitter/nvim-treesitter', always)
	"call packager#add('kristijanhusak/orgmode.nvim', always)
	"call packager#add('masukomi/vim-markdown-folding', optional)
  autocmd FileType markdown packadd vim-markdown-folding
  autocmd FileType markdown packadd vim-markdown-toc
  autocmd FileType org packadd orgmode.nvim
	call packager#add('kristijanhusak/orgmode.nvim', {
				\ 'type' : 'opt',
				\ 'do' : function('Packager_do_orgmode'),
				\ 'requires' : 'nvim-treesitter/nvim-treesitter',
				\ })
  autocmd FileType markdown packadd foltext_vim
  autocmd FileType org packadd foltext_vim

" FZF (junegunn/fzf.vim) {{{2

" Mappings {{{3

nnoremap <f7>a <cmd>Ag<cr>
nnoremap <f7>b <cmd>Buffers<cr>
nnoremap <f7>c <cmd>Commands<cr>
nnoremap <f7>C <cmd>Commits<cr>
nnoremap <f7>f <cmd>Files<cr>
nnoremap <f7>F <cmd>Filetypes<cr>
nnoremap <f7>g <cmd>GitFiles<cr>
nnoremap <f7>h <cmd>History<cr>
nnoremap <f7>H <cmd>Helptags<cr>
nnoremap <f7>l <cmd>Lines<cr>
nnoremap <f7>m <cmd>Marks<cr>
nnoremap <f7>M <cmd>Maps<cr>
nnoremap <f7>r <cmd>Rg<cr>
nnoremap <f7>s <cmd>Snippets<cr>
nnoremap <f7>t <cmd>Tags<cr>
nnoremap <f7>w <cmd>Windows<cr>

" }}}3

" Options {{{3

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/racine/hist/fzf'

" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

let $FZF_DEFAULT_OPTS="--reverse " " top to bottom

" }}}3

" Présentation {{{3

" Default fzf layout
" - down / up / left / right

" popup
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }

"let g:fzf_layout = { 'down': '~40%' }

" In Neovim, you can set up fzf window using a Vim command
"let g:fzf_layout = { 'window': 'new' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

function! s:fzf_statusline()
  " Override statusline as you like
  highlight fzf1 ctermfg=0 ctermbg=3
  highlight fzf2 ctermfg=0 ctermbg=3
  highlight fzf3 ctermfg=0 ctermbg=3
  setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
endfunction

" }}}3

" }}}2

" Déplacement & Copie {{{1

" Textmanip (t9md/vim-textmanip) {{{2

xmap z<Down> <Plug>(textmanip-move-down)
xmap z<Up> <Plug>(textmanip-move-up)
xmap z<Left> <Plug>(textmanip-move-left)
xmap z<Right> <Plug>(textmanip-move-right)

xmap z<S-Down> <Plug>(textmanip-duplicate-down)
xmap z<S-Up> <Plug>(textmanip-duplicate-up)

nmap z<S-Down> <Plug>(textmanip-duplicate-down)
nmap z<S-Up> <Plug>(textmanip-duplicate-up)

" }}}2

" }}}1

" Markdown folding {{{2

let g:markdown_fold_style = 'nested'
let g:markdown_fold_override_foldtext = 1

" }}}2

" Orgmode.nvim {{{2

fun! Packager_do_orgmode (plugin)
lua << EOF
	local parser_config = require "nvim-treesitter.parsers".get_parser_configs()
	parser_config.org = {
	  install_info = {
		url = 'https://github.com/milisims/tree-sitter-org',
		revision = 'f110024d539e676f25b72b7c80b0fd43c34264ef',
		files = {'src/parser.c', 'src/scanner.cc'},
	  },
	  filetype = 'org',
	}
	require'nvim-treesitter.configs'.setup {
	  -- If TS highlights are not enabled at all, or disabled via `disable` prop, highlighting will fallback to default Vim syntax highlighting
	  highlight = {
		enable = true,
		disable = {'org'}, -- Remove this to use TS highlighter for some of the highlights (Experimental)
		additional_vim_regex_highlighting = {'org'}, -- Required since TS highlighter doesn't support all syntax features (conceal)
	  },
	  ensure_installed = {'org'}, -- Or run :TSUpdate org
	}
	require('orgmode').setup({
		org_agenda_files = {'~/Dropbox/org/*', '~/my-orgs/**/*'},
		org_default_notes_file = '~/Dropbox/org/refile.org',
	})
EOF
endfun

" }}}2


" Divers {{{1

" {{{ Open-pdf (rhysd/open-pdf.vim)

let g:pdf_cache_dir = $HOME . '/racine/plugin/data/addon/open-pdf'

let g:pdf_open_cmd = 'tabnew | view'
let g:pdf_edit_cmd = 'edit'
let g:pdf_read_cmd = 'read'

let g:pdf_convert_on_edit = 1
let g:pdf_convert_on_read = 1

let g:unite_pdf_search_cmd = 'locate -l 30 "*%s*.pdf"'

" }}}

" }}}1

" Historique d’undo {{{1

" Undotree (mbbill/undotree) {{{2

nnoremap <s-bs> <cmd>UndotreeToggle<cr>

" }}}2

" }}}1

" Markdown TOC {{{2

let g:vmt_auto_update_on_save = 1
let g:vmt_dont_insert_fence = 0
let g:vmt_cycle_list_item_markers = 1

" }}}2

	call packager#add('coot/cmdalias_vim', {
				\ 'type' : 'opt',
				\ 'requires' : 'coot/CRDispatcher',
				\ })

   	\   'javascript': { 'cmd': 'node' },
   	\   'clojure': { 'cmd': 'clj' },
   	\   'scheme': { 'cmd': 'rlwrap csi' },
   	\   'julia':  { 'cmd': 'julia' }

	call packager#add('axvr/zepl.vim', optional)

" Zepl () {{{2

let g:repl_config = {
   	\   'bash': { 'cmd': 'bash' },
   	\   'zsh': { 'cmd': 'zsh' },
	\   'fish': { 'cmd': 'fish -l' },
	\   'elvish': { 'cmd': 'elvish' },
	\   'xonsh': { 'cmd': 'xonsh' },
	\   'python': { 'cmd': 'python' },
   	\ }

" }}}2

	call packager#add('tomtom/foldtext_vim', optional)

" Vim Markdown Folding {{{1

augroup markdown-folding
	autocmd!
	autocmd BufEnter *.md setlocal foldmethod=expr
augroup END

" }}}1

  autocmd FileType markdown packadd foltext_vim
  autocmd FileType org packadd foltext_vim

	call packager#add('martineausimon/nvim-lilypond-suite', {
				\ 'type' : 'opt',
				\ 'requires' : ['MunifTanjim/nui.nvim']
				\ })

	autocmd FileType lilypond packadd nvim-lilypond-suite

" Types de fichiers {{{1

packadd nvim-lilypond-suite

lua << FIN

require('nvls').setup({
  lilypond = {
    mappings = {
      compile = "<F9>m",
      player = "<F9>p",
      open_pdf = "<F9>d",
      switch_buffers = "<F9><A-Space>",
      insert_version = "<F9>i",
      hyphenation = "<F9>--",
      hyphenation_change_lang = "<F9>-l",
      insert_hyphen = "<F9>i-",
      add_hyphen = "<F9>a-",
      del_next_hyphen = "<F9>df-",
      del_prev_hyphen = "<F9>dF-",
      del_selected_hyphen = "<F9>d-"
    },
    options = {
      pitches_language = "default",
      output = "pdf",
      --main_file = "main.ly",
      main_file = "%",
      main_folder = "%:p:h",
      include_dir = "include",
      hyphenation_language = "fr_DEFAULT"
    },
    highlights = {
      lilyString = { link = "String" },
      lilyDynamic = { bold = true },
      lilyComment = { link = "Comment" },
      lilyNumber = { link = "Number" },
      lilyVar = { link = "Tag" },
      lilyBoolean = { link = "Boolean" },
      lilySpecial = { bold = true },
      lilyArgument = { link = "Type" },
      lilyScheme = { link = "Special" },
      lilyLyrics = { link = "Special" },
      lilyMarkup = { bold = true },
      lilyFunction = { link = "Statement" },
      lilyArticulation = { link = "PreProc" },
      lilyContext = { link = "Type" },
      lilyGrob = { link = "Include" },
      lilyTranslator = { link = "Type" },
      lilyPitch = { link = "Function" },
      lilyChord = {
        ctermfg = "lightMagenta",
        fg = "lightMagenta",
        bold = true
      },
    },
  },
  latex = {
    mappings = {
      compile = "<F9>m",
      open_pdf = "<F9>p",
      lilypond_syntax = "<F9>s"
    },
    options = {
      clean_logs = false,
      main_file = "main.tex",
      main_folder = "%:p:h",
      include_dir = nil,
      lilypond_syntax_au = "BufEnter"
    },
  },
  player = {
    mappings = {
      quit = "q",
      play_pause = "<space>",
      loop = "<F9>l",
      backward = "h",
      small_backward = "<S-h>",
      forward = "l",
      small_forward = "<S-l>",
      decrease_speed = "j",
      increase_speed = "k",
      halve_speed = "<S-j>",
      double_speed = "<S-k>",
      mpv_flags = {
        "--msg-level=cplayer=no,ffmpeg=no",
        "--loop",
        "--config-dir=/dev/null"
      }
    },
    options = {
      row = "2%",
      col = "99%",
      width = "37",
      height = "1",
      border_style = "single",
      winhighlight = "Normal:Normal,FloatBorder:Normal"
    },
  },
})

FIN

" }}}1

	autocmd FileType tex packadd vim-latex
	call packager#add('neoclide/coc.nvim', optional)

" Easy align (junegunn/vim-easy-align) {{{2

" Start interactive EasyAlign in visual mode (e.g. vip|)
vmap <bar> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. g|ip)
nmap g<bar> <Plug>(EasyAlign)

let g:easy_align_delimiters = {
\  ' ': { 'pattern': ' ',  'left_margin': 0, 'right_margin': 0, 'stick_to_left': 0 },
\  '=': { 'pattern': '===\|<=>\|\(&&\|||\|<<\|>>\)=\|=\~[#?]\?\|=>\|[:+/*!%^=><&|.-]\?=[#?]\?',
\                          'left_margin': 1, 'right_margin': 1, 'stick_to_left': 0 },
\  ':': { 'pattern': ':',  'left_margin': 1, 'right_margin': 1, 'stick_to_left': 0 },
\  ',': { 'pattern': ',',  'left_margin': 0, 'right_margin': 1, 'stick_to_left': 1 },
\  '|': { 'pattern': '|',  'left_margin': 1, 'right_margin': 1, 'stick_to_left': 0 },
\  '.': { 'pattern': '\.', 'left_margin': 0, 'right_margin': 0, 'stick_to_left': 0 },
\  '#': { 'pattern': '#\+', 'delimiter_align': 'l', 'ignore_groups': ['!Comment']  },
\  '&': { 'pattern': '\\\@<!&\|\\\\',
\                          'left_margin': 1, 'right_margin': 1, 'stick_to_left': 0 },
\  '{': { 'pattern': '(\@<!{',
\                          'left_margin': 1, 'right_margin': 1, 'stick_to_left': 0 },
\  '}': { 'pattern': '}',  'left_margin': 1, 'right_margin': 0, 'stick_to_left': 0 }
\ }

	call packager#add('sheerun/vim-polyglot', always)

" Si tab est défini ici, le commenter dans Neocomplcache

" UltiSnips (SirVer/ultisnips) {{{2

" Mappings {{{3

" inoremap <tab> <cmd>call UltiSnips#ExpandSnippetOrJump()<cr>
" snoremap <tab> <cmd>call UltiSnips#JumpForwards()<cr>
" inoremap <s-tab> <cmd>call UltiSnips#JumpBackwards()<cr>
" snoremap <s-tab> <cmd>call UltiSnips#JumpBackwards()<cr>

let g:UltiSnipsExpandTrigger="<c-x><c-x>"
let g:UltiSnipsJumpForwardTrigger="<c-x><c-x>"
let g:UltiSnipsJumpBackwardTrigger="<c-x><bs>"

let g:UltiSnipsListSnippets='<F10>l'

nnoremap <F10>e <cmd>UltiSnipsEdit<cr>
nnoremap <F10>a <cmd>UltiSnipsAddFiletypes<space>

" Données {{{3

"let g:UltiSnipsSnippetsDir = $HOME . '/racine/config/edit/neovim/snippet'

let g:UltiSnipsSnippetDirectories=['snippet', 'UltiSnips']

let g:UltiSnipsEditSplit = 'horizontal'


augroup autopairs
	autocmd!
	autocmd BufEnter *.vim let g:AutoPairs = { '(':')', '[':']', '{':'}', '<':'>', "'":"'", '`':'`' }
	autocmd BufLeave *.vim let g:AutoPairs = { '(':')', '[':']', '{':'}', '<':'>', "'":"'", '"':'"', '`':'`' }
	autocmd BufEnter *.el let g:AutoPairs = { '(':')', '[':']', '{':'}', '<':'>', '"':'"', '`':'`' }
	autocmd BufLeave *.el let g:AutoPairs = { '(':')', '[':']', '{':'}', '<':'>', "'":"'", '"':'"', '`':'`' }
	autocmd BufEnter *.ly let g:AutoPairs = { '(':')', '[':']', '{':'}', '<':'>', '"':'"', '`':'`' }
	autocmd BufLeave *.ly let g:AutoPairs = { '(':')', '[':']', '{':'}', '<':'>', "'":"'", '"':'"', '`':'`' }
augroup END

	" -- filetype plugins
	call packager#add('martineausimon/nvim-lilypond-suite', always)

nmap đ <Plug>Sneak_s
nmap ŋ <Plug>Sneak_S

xmap đ <Plug>Sneak_s
xmap ŋ <Plug>Sneak_S

omap đ <Plug>Sneak_s
omap ŋ <Plug>Sneak_S

nmap <f8> <Plug>Sneak_s
nmap <f7> <Plug>Sneak_S

xmap <f8> <Plug>Sneak_s
xmap <f7> <Plug>Sneak_S

omap <f8> <Plug>Sneak_s
omap <f7> <Plug>Sneak_S

" Mappings {{{3

" 2-character Sneak (default)

" altgr-f = đ
" altgr-F = ª

nmap đ <Plug>Sneak_s
nmap ª <Plug>Sneak_S

xmap đ <Plug>Sneak_s
xmap ª <Plug>Sneak_S

omap đ <Plug>Sneak_s
omap ª <Plug>Sneak_S

omap ; <Plug>Sneak_;
omap , <Plug>Sneak_,

" 1-character enhanced 'f'

nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F

xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F

omap f <Plug>Sneak_f
omap F <Plug>Sneak_F

" 1-character enhanced 't'

nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T

xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T

omap t <Plug>Sneak_t
omap T <Plug>Sneak_T

" label-mode

nmap zl <Plug>SneakLabel_s
nmap zL <Plug>SneakLabel_S

" Table mode {{{2

nnoremap <d-&> <cmd>TableModeToggle<cr>

let g:table_mode_always_active = 0

" table à la org mode
let g:table_mode_corner = '+'
" table à la markdown
"let g:table_mode_corner = '|'

highlight SneakPluginScope guifg=#7b3c11 guibg=black gui=default
highlight SneakPluginTarget guifg=#7b3c11 guibg=black gui=default

	" altgr-h
	nmap <silent> ħ           <cmd>call wheel#waterclock#history('tab')<cr>
	" altgr-o
	nmap <silent> œ           <plug>(wheel-prompt-occur)

